//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package armdeploymentstacks

import "time"

// ClientBeginCreateOrUpdateAtManagementGroupOptions contains the optional parameters for the Client.BeginCreateOrUpdateAtManagementGroup
// method.
type ClientBeginCreateOrUpdateAtManagementGroupOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// ClientBeginCreateOrUpdateAtResourceGroupOptions contains the optional parameters for the Client.BeginCreateOrUpdateAtResourceGroup
// method.
type ClientBeginCreateOrUpdateAtResourceGroupOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// ClientBeginCreateOrUpdateAtSubscriptionOptions contains the optional parameters for the Client.BeginCreateOrUpdateAtSubscription
// method.
type ClientBeginCreateOrUpdateAtSubscriptionOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// ClientBeginDeleteAtManagementGroupOptions contains the optional parameters for the Client.BeginDeleteAtManagementGroup
// method.
type ClientBeginDeleteAtManagementGroupOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
	// Flag to indicate delete rather than detach for the management groups.
	UnmanageActionManagementGroups *UnmanageActionManagementGroupMode
	// Flag to indicate delete rather than detach for the resource groups.
	UnmanageActionResourceGroups *UnmanageActionResourceGroupMode
	// Flag to indicate delete rather than detach for the resources.
	UnmanageActionResources *UnmanageActionResourceMode
}

// ClientBeginDeleteAtResourceGroupOptions contains the optional parameters for the Client.BeginDeleteAtResourceGroup method.
type ClientBeginDeleteAtResourceGroupOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
	// Flag to indicate delete rather than detach for the resource groups.
	UnmanageActionResourceGroups *UnmanageActionResourceGroupMode
	// Flag to indicate delete rather than detach for the resources.
	UnmanageActionResources *UnmanageActionResourceMode
}

// ClientBeginDeleteAtSubscriptionOptions contains the optional parameters for the Client.BeginDeleteAtSubscription method.
type ClientBeginDeleteAtSubscriptionOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
	// Flag to indicate delete rather than detach for the resource groups.
	UnmanageActionResourceGroups *UnmanageActionResourceGroupMode
	// Flag to indicate delete rather than detach for the resources.
	UnmanageActionResources *UnmanageActionResourceMode
}

// ClientExportTemplateAtManagementGroupOptions contains the optional parameters for the Client.ExportTemplateAtManagementGroup
// method.
type ClientExportTemplateAtManagementGroupOptions struct {
	// placeholder for future optional parameters
}

// ClientExportTemplateAtResourceGroupOptions contains the optional parameters for the Client.ExportTemplateAtResourceGroup
// method.
type ClientExportTemplateAtResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// ClientExportTemplateAtSubscriptionOptions contains the optional parameters for the Client.ExportTemplateAtSubscription
// method.
type ClientExportTemplateAtSubscriptionOptions struct {
	// placeholder for future optional parameters
}

// ClientGetAtManagementGroupOptions contains the optional parameters for the Client.GetAtManagementGroup method.
type ClientGetAtManagementGroupOptions struct {
	// placeholder for future optional parameters
}

// ClientGetAtResourceGroupOptions contains the optional parameters for the Client.GetAtResourceGroup method.
type ClientGetAtResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// ClientGetAtSubscriptionOptions contains the optional parameters for the Client.GetAtSubscription method.
type ClientGetAtSubscriptionOptions struct {
	// placeholder for future optional parameters
}

// ClientListAtManagementGroupOptions contains the optional parameters for the Client.ListAtManagementGroup method.
type ClientListAtManagementGroupOptions struct {
	// placeholder for future optional parameters
}

// ClientListAtResourceGroupOptions contains the optional parameters for the Client.ListAtResourceGroup method.
type ClientListAtResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// ClientListAtSubscriptionOptions contains the optional parameters for the Client.ListAtSubscription method.
type ClientListAtSubscriptionOptions struct {
	// placeholder for future optional parameters
}

// DebugSetting - The debug setting.
type DebugSetting struct {
	// Specifies the type of information to log for debugging. The permitted values are none, requestContent, responseContent,
	// or both requestContent and responseContent separated by a comma. The default is
	// none. When setting this value, carefully consider the type of information that is being passed in during deployment. By
	// logging information about the request or response, sensitive data that is
	// retrieved through the deployment operations could potentially be exposed.
	DetailLevel *string `json:"detailLevel,omitempty"`
}

// DenySettings - Defines how resources deployed by the deployment stack are locked.
type DenySettings struct {
	// REQUIRED; denySettings Mode.
	Mode *DenySettingsMode `json:"mode,omitempty"`

	// DenySettings will be applied to child scopes.
	ApplyToChildScopes *bool `json:"applyToChildScopes,omitempty"`

	// List of role-based management operations that are excluded from the denySettings. Up to 200 actions are permitted. If the
	// denySetting mode is set to 'denyWriteAndDelete', then the following actions
	// are automatically appended to 'excludedActions': '*/read' and 'Microsoft.Authorization/locks/delete'. If the denySetting
	// mode is set to 'denyDelete', then the following actions are automatically
	// appended to 'excludedActions': 'Microsoft.Authorization/locks/delete'. Duplicate actions will be removed.
	ExcludedActions []*string `json:"excludedActions,omitempty"`

	// List of AAD principal IDs excluded from the lock. Up to 5 principals are permitted.
	ExcludedPrincipals []*string `json:"excludedPrincipals,omitempty"`
}

// DeploymentStack - Deployment stack object.
type DeploymentStack struct {
	// The location of the deployment stack. It cannot be changed after creation. It must be one of the supported Azure locations.
	Location *string `json:"location,omitempty"`

	// Deployment stack properties.
	Properties *DeploymentStackProperties `json:"properties,omitempty"`

	// Deployment stack resource tags.
	Tags map[string]*string `json:"tags,omitempty"`

	// READ-ONLY; String Id used to locate any resource on Azure.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; Name of this resource.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData `json:"systemData,omitempty" azure:"ro"`

	// READ-ONLY; Type of this resource.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// DeploymentStackListResult - List of deployment stacks.
type DeploymentStackListResult struct {
	// An array of deployment stacks.
	Value []*DeploymentStack `json:"value,omitempty"`

	// READ-ONLY; The URL to use for getting the next set of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// DeploymentStackProperties - Deployment stack properties.
type DeploymentStackProperties struct {
	// REQUIRED; Defines the behavior of resources that are not managed immediately after the stack is updated.
	ActionOnUnmanage *DeploymentStackPropertiesActionOnUnmanage `json:"actionOnUnmanage,omitempty"`

	// REQUIRED; Defines how resources deployed by the stack are locked.
	DenySettings *DenySettings `json:"denySettings,omitempty"`

	// The debug setting of the deployment.
	DebugSetting *DebugSetting `json:"debugSetting,omitempty"`

	// The scope at which the initial deployment should be created. If a scope is not specified, it will default to the scope
	// of the deployment stack. Valid scopes are: management group (format:
	// '/providers/Microsoft.Management/managementGroups/{managementGroupId}'), subscription (format: '/subscriptions/{subscriptionId}'),
	// resource group (format:
	// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}').
	DeploymentScope *string `json:"deploymentScope,omitempty"`

	// Deployment stack description.
	Description *string `json:"description,omitempty"`

	// Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows
	// the OData error response format.).
	Error *ErrorResponse `json:"error,omitempty"`

	// Name and value pairs that define the deployment parameters for the template. Use this element when providing the parameter
	// values directly in the request, rather than linking to an existing parameter
	// file. Use either the parametersLink property or the parameters property, but not both. It can be a JObject or a well formed
	// JSON string.
	Parameters interface{} `json:"parameters,omitempty"`

	// The URI of parameters file. Use this element to link to an existing parameters file. Use either the parametersLink property
	// or the parameters property, but not both.
	ParametersLink *ParametersLink `json:"parametersLink,omitempty"`

	// The template content. You use this element when you want to pass the template syntax directly in the request rather than
	// link to an existing template. It can be a JObject or well-formed JSON string.
	// Use either the templateLink property or the template property, but not both.
	Template interface{} `json:"template,omitempty"`

	// The URI of the template. Use either the templateLink property or the template property, but not both.
	TemplateLink *TemplateLink `json:"templateLink,omitempty"`

	// READ-ONLY; An array of resources that were deleted during the most recent update.
	DeletedResources []*ResourceReference `json:"deletedResources,omitempty" azure:"ro"`

	// READ-ONLY; The resourceId of the deployment resource created by the deployment stack.
	DeploymentID *string `json:"deploymentId,omitempty" azure:"ro"`

	// READ-ONLY; An array of resources that were detached during the most recent update.
	DetachedResources []*ResourceReference `json:"detachedResources,omitempty" azure:"ro"`

	// READ-ONLY; The duration of the deployment stack update.
	Duration *string `json:"duration,omitempty" azure:"ro"`

	// READ-ONLY; An array of resources that failed to reach goal state during the most recent update.
	FailedResources []*ResourceReferenceExtended `json:"failedResources,omitempty" azure:"ro"`

	// READ-ONLY; The outputs of the underlying deployment.
	Outputs interface{} `json:"outputs,omitempty" azure:"ro"`

	// READ-ONLY; State of the deployment stack.
	ProvisioningState *DeploymentStackProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; An array of resources currently managed by the deployment stack.
	Resources []*ManagedResourceReference `json:"resources,omitempty" azure:"ro"`
}

// DeploymentStackPropertiesActionOnUnmanage - Defines the behavior of resources that are not managed immediately after the
// stack is updated.
type DeploymentStackPropertiesActionOnUnmanage struct {
	// REQUIRED; Specifies the action that should be taken on the resource when the deployment stack is deleted. Delete will attempt
	// to delete the resource from Azure. Detach will leave the resource in it's current
	// state.
	Resources *DeploymentStacksDeleteDetachEnum `json:"resources,omitempty"`

	// Specifies the action that should be taken on the resource when the deployment stack is deleted. Delete will attempt to
	// delete the resource from Azure. Detach will leave the resource in it's current
	// state.
	ManagementGroups *DeploymentStacksDeleteDetachEnum `json:"managementGroups,omitempty"`

	// Specifies the action that should be taken on the resource when the deployment stack is deleted. Delete will attempt to
	// delete the resource from Azure. Detach will leave the resource in it's current
	// state.
	ResourceGroups *DeploymentStacksDeleteDetachEnum `json:"resourceGroups,omitempty"`
}

// DeploymentStackTemplateDefinition - Export Template specific properties of the Stack.
type DeploymentStackTemplateDefinition struct {
	// The template content. Use this element to pass the template syntax directly in the request rather than link to an existing
	// template. It can be a JObject or well-formed JSON string. Use either the
	// templateLink property or the template property, but not both.
	Template interface{} `json:"template,omitempty"`

	// The URI of the template. Use either the templateLink property or the template property, but not both.
	TemplateLink *TemplateLink `json:"templateLink,omitempty"`
}

// ErrorAdditionalInfo - The resource management error additional info.
type ErrorAdditionalInfo struct {
	// READ-ONLY; The additional info.
	Info interface{} `json:"info,omitempty" azure:"ro"`

	// READ-ONLY; The additional info type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// ErrorDetail - The error detail.
type ErrorDetail struct {
	// READ-ONLY; The error additional info.
	AdditionalInfo []*ErrorAdditionalInfo `json:"additionalInfo,omitempty" azure:"ro"`

	// READ-ONLY; The error code.
	Code *string `json:"code,omitempty" azure:"ro"`

	// READ-ONLY; The error details.
	Details []*ErrorDetail `json:"details,omitempty" azure:"ro"`

	// READ-ONLY; The error message.
	Message *string `json:"message,omitempty" azure:"ro"`

	// READ-ONLY; The error target.
	Target *string `json:"target,omitempty" azure:"ro"`
}

// ErrorResponse - Common error response for all Azure Resource Manager APIs to return error details for failed operations.
// (This also follows the OData error response format.).
type ErrorResponse struct {
	// The error object.
	Error *ErrorDetail `json:"error,omitempty"`
}

// ManagedResourceReference - The managed resource model.
type ManagedResourceReference struct {
	// denyAssignment settings applied to the resource.
	DenyStatus *DenyStatusMode `json:"denyStatus,omitempty"`

	// Current management state of the resource in the deployment stack.
	Status *ResourceStatusMode `json:"status,omitempty"`

	// READ-ONLY; The resourceId of a resource managed by the deployment stack.
	ID *string `json:"id,omitempty" azure:"ro"`
}

// ParametersLink - Entity representing the reference to the deployment parameters.
type ParametersLink struct {
	// REQUIRED; The URI of the parameters file.
	URI *string `json:"uri,omitempty"`

	// If included, must match the ContentVersion in the template.
	ContentVersion *string `json:"contentVersion,omitempty"`
}

// ResourceReference - The resource Id model.
type ResourceReference struct {
	// READ-ONLY; The resourceId of a resource managed by the deployment stack.
	ID *string `json:"id,omitempty" azure:"ro"`
}

// ResourceReferenceExtended - The resource Id extended model.
type ResourceReferenceExtended struct {
	// Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows
	// the OData error response format.).
	Error *ErrorResponse `json:"error,omitempty"`

	// READ-ONLY; The resourceId of a resource managed by the deployment stack.
	ID *string `json:"id,omitempty" azure:"ro"`
}

// SystemData - Metadata pertaining to creation and last modification of the resource.
type SystemData struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// The identity that created the resource.
	CreatedBy *string `json:"createdBy,omitempty"`

	// The type of identity that created the resource.
	CreatedByType *CreatedByType `json:"createdByType,omitempty"`

	// The timestamp of resource last modification (UTC)
	LastModifiedAt *time.Time `json:"lastModifiedAt,omitempty"`

	// The identity that last modified the resource.
	LastModifiedBy *string `json:"lastModifiedBy,omitempty"`

	// The type of identity that last modified the resource.
	LastModifiedByType *CreatedByType `json:"lastModifiedByType,omitempty"`
}

// TemplateLink - Entity representing the reference to the template.
type TemplateLink struct {
	// If included, must match the ContentVersion in the template.
	ContentVersion *string `json:"contentVersion,omitempty"`

	// The resource id of a Template Spec. Use either the id or uri property, but not both.
	ID *string `json:"id,omitempty"`

	// The query string (for example, a SAS token) to be used with the templateLink URI.
	QueryString *string `json:"queryString,omitempty"`

	// The relativePath property can be used to deploy a linked template at a location relative to the parent. If the parent template
	// was linked with a TemplateSpec, this will reference an artifact in the
	// TemplateSpec. If the parent was linked with a URI, the child deployment will be a combination of the parent and relativePath
	// URIs
	RelativePath *string `json:"relativePath,omitempty"`

	// The URI of the template to deploy. Use either the uri or id property, but not both.
	URI *string `json:"uri,omitempty"`
}

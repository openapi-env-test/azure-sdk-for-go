//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package armapimanagement

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/cloud"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// PolicyRestrictionClient contains the methods for the PolicyRestriction group.
// Don't use this type directly, use NewPolicyRestrictionClient() instead.
type PolicyRestrictionClient struct {
	host           string
	subscriptionID string
	pl             runtime.Pipeline
}

// NewPolicyRestrictionClient creates a new instance of PolicyRestrictionClient with the specified values.
// subscriptionID - The ID of the target subscription. The value must be an UUID.
// credential - used to authorize requests. Usually a credential from azidentity.
// options - pass nil to accept the default values.
func NewPolicyRestrictionClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*PolicyRestrictionClient, error) {
	if options == nil {
		options = &arm.ClientOptions{}
	}
	ep := cloud.AzurePublic.Services[cloud.ResourceManager].Endpoint
	if c, ok := options.Cloud.Services[cloud.ResourceManager]; ok {
		ep = c.Endpoint
	}
	pl, err := armruntime.NewPipeline(moduleName, moduleVersion, credential, runtime.PipelineOptions{}, options)
	if err != nil {
		return nil, err
	}
	client := &PolicyRestrictionClient{
		subscriptionID: subscriptionID,
		host:           ep,
		pl:             pl,
	}
	return client, nil
}

// CreateOrUpdate - Creates or updates the policy restriction configuration of the Api Management service.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2023-05-01-preview
// resourceGroupName - The name of the resource group. The name is case insensitive.
// serviceName - The name of the API Management service.
// policyRestrictionID - Policy restrictions after an entity level
// parameters - The policy restriction to apply.
// options - PolicyRestrictionClientCreateOrUpdateOptions contains the optional parameters for the PolicyRestrictionClient.CreateOrUpdate
// method.
func (client *PolicyRestrictionClient) CreateOrUpdate(ctx context.Context, resourceGroupName string, serviceName string, policyRestrictionID string, parameters PolicyRestrictionContract, options *PolicyRestrictionClientCreateOrUpdateOptions) (PolicyRestrictionClientCreateOrUpdateResponse, error) {
	req, err := client.createOrUpdateCreateRequest(ctx, resourceGroupName, serviceName, policyRestrictionID, parameters, options)
	if err != nil {
		return PolicyRestrictionClientCreateOrUpdateResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PolicyRestrictionClientCreateOrUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusCreated) {
		return PolicyRestrictionClientCreateOrUpdateResponse{}, runtime.NewResponseError(resp)
	}
	return client.createOrUpdateHandleResponse(resp)
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *PolicyRestrictionClient) createOrUpdateCreateRequest(ctx context.Context, resourceGroupName string, serviceName string, policyRestrictionID string, parameters PolicyRestrictionContract, options *PolicyRestrictionClientCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/policyRestrictions/{policyRestrictionId}"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if serviceName == "" {
		return nil, errors.New("parameter serviceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{serviceName}", url.PathEscape(serviceName))
	if policyRestrictionID == "" {
		return nil, errors.New("parameter policyRestrictionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{policyRestrictionId}", url.PathEscape(policyRestrictionID))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	if options != nil && options.IfMatch != nil {
		req.Raw().Header["If-Match"] = []string{*options.IfMatch}
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, parameters)
}

// createOrUpdateHandleResponse handles the CreateOrUpdate response.
func (client *PolicyRestrictionClient) createOrUpdateHandleResponse(resp *http.Response) (PolicyRestrictionClientCreateOrUpdateResponse, error) {
	result := PolicyRestrictionClientCreateOrUpdateResponse{}
	if val := resp.Header.Get("ETag"); val != "" {
		result.ETag = &val
	}
	if err := runtime.UnmarshalAsJSON(resp, &result.PolicyRestrictionContract); err != nil {
		return PolicyRestrictionClientCreateOrUpdateResponse{}, err
	}
	return result, nil
}

// Delete - Deletes the policy restriction configuration of the Api Management Service.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2023-05-01-preview
// resourceGroupName - The name of the resource group. The name is case insensitive.
// serviceName - The name of the API Management service.
// policyRestrictionID - Policy restrictions after an entity level
// options - PolicyRestrictionClientDeleteOptions contains the optional parameters for the PolicyRestrictionClient.Delete
// method.
func (client *PolicyRestrictionClient) Delete(ctx context.Context, resourceGroupName string, serviceName string, policyRestrictionID string, options *PolicyRestrictionClientDeleteOptions) (PolicyRestrictionClientDeleteResponse, error) {
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, serviceName, policyRestrictionID, options)
	if err != nil {
		return PolicyRestrictionClientDeleteResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PolicyRestrictionClientDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusNoContent) {
		return PolicyRestrictionClientDeleteResponse{}, runtime.NewResponseError(resp)
	}
	return PolicyRestrictionClientDeleteResponse{}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *PolicyRestrictionClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, serviceName string, policyRestrictionID string, options *PolicyRestrictionClientDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/policyRestrictions/{policyRestrictionId}"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if serviceName == "" {
		return nil, errors.New("parameter serviceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{serviceName}", url.PathEscape(serviceName))
	if policyRestrictionID == "" {
		return nil, errors.New("parameter policyRestrictionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{policyRestrictionId}", url.PathEscape(policyRestrictionID))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	if options != nil && options.IfMatch != nil {
		req.Raw().Header["If-Match"] = []string{*options.IfMatch}
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Get the policy restriction of the Api Management service.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2023-05-01-preview
// resourceGroupName - The name of the resource group. The name is case insensitive.
// serviceName - The name of the API Management service.
// policyRestrictionID - Policy restrictions after an entity level
// options - PolicyRestrictionClientGetOptions contains the optional parameters for the PolicyRestrictionClient.Get method.
func (client *PolicyRestrictionClient) Get(ctx context.Context, resourceGroupName string, serviceName string, policyRestrictionID string, options *PolicyRestrictionClientGetOptions) (PolicyRestrictionClientGetResponse, error) {
	req, err := client.getCreateRequest(ctx, resourceGroupName, serviceName, policyRestrictionID, options)
	if err != nil {
		return PolicyRestrictionClientGetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PolicyRestrictionClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return PolicyRestrictionClientGetResponse{}, runtime.NewResponseError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *PolicyRestrictionClient) getCreateRequest(ctx context.Context, resourceGroupName string, serviceName string, policyRestrictionID string, options *PolicyRestrictionClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/policyRestrictions/{policyRestrictionId}"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if serviceName == "" {
		return nil, errors.New("parameter serviceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{serviceName}", url.PathEscape(serviceName))
	if policyRestrictionID == "" {
		return nil, errors.New("parameter policyRestrictionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{policyRestrictionId}", url.PathEscape(policyRestrictionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *PolicyRestrictionClient) getHandleResponse(resp *http.Response) (PolicyRestrictionClientGetResponse, error) {
	result := PolicyRestrictionClientGetResponse{}
	if val := resp.Header.Get("ETag"); val != "" {
		result.ETag = &val
	}
	if err := runtime.UnmarshalAsJSON(resp, &result.PolicyRestrictionContract); err != nil {
		return PolicyRestrictionClientGetResponse{}, err
	}
	return result, nil
}

// GetEntityTag - Gets the entity state (Etag) version of the policy restriction in the Api Management service.
// Generated from API version 2023-05-01-preview
// resourceGroupName - The name of the resource group. The name is case insensitive.
// serviceName - The name of the API Management service.
// policyRestrictionID - Policy restrictions after an entity level
// options - PolicyRestrictionClientGetEntityTagOptions contains the optional parameters for the PolicyRestrictionClient.GetEntityTag
// method.
func (client *PolicyRestrictionClient) GetEntityTag(ctx context.Context, resourceGroupName string, serviceName string, policyRestrictionID string, options *PolicyRestrictionClientGetEntityTagOptions) (PolicyRestrictionClientGetEntityTagResponse, error) {
	req, err := client.getEntityTagCreateRequest(ctx, resourceGroupName, serviceName, policyRestrictionID, options)
	if err != nil {
		return PolicyRestrictionClientGetEntityTagResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PolicyRestrictionClientGetEntityTagResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return PolicyRestrictionClientGetEntityTagResponse{}, runtime.NewResponseError(resp)
	}
	return client.getEntityTagHandleResponse(resp)
}

// getEntityTagCreateRequest creates the GetEntityTag request.
func (client *PolicyRestrictionClient) getEntityTagCreateRequest(ctx context.Context, resourceGroupName string, serviceName string, policyRestrictionID string, options *PolicyRestrictionClientGetEntityTagOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/policyRestrictions/{policyRestrictionId}"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if serviceName == "" {
		return nil, errors.New("parameter serviceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{serviceName}", url.PathEscape(serviceName))
	if policyRestrictionID == "" {
		return nil, errors.New("parameter policyRestrictionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{policyRestrictionId}", url.PathEscape(policyRestrictionID))
	req, err := runtime.NewRequest(ctx, http.MethodHead, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getEntityTagHandleResponse handles the GetEntityTag response.
func (client *PolicyRestrictionClient) getEntityTagHandleResponse(resp *http.Response) (PolicyRestrictionClientGetEntityTagResponse, error) {
	result := PolicyRestrictionClientGetEntityTagResponse{}
	if val := resp.Header.Get("ETag"); val != "" {
		result.ETag = &val
	}
	result.Success = resp.StatusCode >= 200 && resp.StatusCode < 300
	return result, nil
}

// NewListByServicePager - Gets all policy restrictions of API Management services.
// Generated from API version 2023-05-01-preview
// resourceGroupName - The name of the resource group. The name is case insensitive.
// serviceName - The name of the API Management service.
// options - PolicyRestrictionClientListByServiceOptions contains the optional parameters for the PolicyRestrictionClient.ListByService
// method.
func (client *PolicyRestrictionClient) NewListByServicePager(resourceGroupName string, serviceName string, options *PolicyRestrictionClientListByServiceOptions) *runtime.Pager[PolicyRestrictionClientListByServiceResponse] {
	return runtime.NewPager(runtime.PagingHandler[PolicyRestrictionClientListByServiceResponse]{
		More: func(page PolicyRestrictionClientListByServiceResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *PolicyRestrictionClientListByServiceResponse) (PolicyRestrictionClientListByServiceResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.listByServiceCreateRequest(ctx, resourceGroupName, serviceName, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return PolicyRestrictionClientListByServiceResponse{}, err
			}
			resp, err := client.pl.Do(req)
			if err != nil {
				return PolicyRestrictionClientListByServiceResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return PolicyRestrictionClientListByServiceResponse{}, runtime.NewResponseError(resp)
			}
			return client.listByServiceHandleResponse(resp)
		},
	})
}

// listByServiceCreateRequest creates the ListByService request.
func (client *PolicyRestrictionClient) listByServiceCreateRequest(ctx context.Context, resourceGroupName string, serviceName string, options *PolicyRestrictionClientListByServiceOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/policyRestrictions"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if serviceName == "" {
		return nil, errors.New("parameter serviceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{serviceName}", url.PathEscape(serviceName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByServiceHandleResponse handles the ListByService response.
func (client *PolicyRestrictionClient) listByServiceHandleResponse(resp *http.Response) (PolicyRestrictionClientListByServiceResponse, error) {
	result := PolicyRestrictionClientListByServiceResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PolicyRestrictionCollection); err != nil {
		return PolicyRestrictionClientListByServiceResponse{}, err
	}
	return result, nil
}

// Update - Updates the policy restriction configuration of the Api Management service.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2023-05-01-preview
// resourceGroupName - The name of the resource group. The name is case insensitive.
// serviceName - The name of the API Management service.
// policyRestrictionID - Policy restrictions after an entity level
// ifMatch - ETag of the Entity. ETag should match the current entity state from the header response of the GET request or
// it should be * for unconditional update.
// parameters - The policy restriction to apply.
// options - PolicyRestrictionClientUpdateOptions contains the optional parameters for the PolicyRestrictionClient.Update
// method.
func (client *PolicyRestrictionClient) Update(ctx context.Context, resourceGroupName string, serviceName string, policyRestrictionID string, ifMatch string, parameters PolicyRestrictionUpdateContract, options *PolicyRestrictionClientUpdateOptions) (PolicyRestrictionClientUpdateResponse, error) {
	req, err := client.updateCreateRequest(ctx, resourceGroupName, serviceName, policyRestrictionID, ifMatch, parameters, options)
	if err != nil {
		return PolicyRestrictionClientUpdateResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PolicyRestrictionClientUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return PolicyRestrictionClientUpdateResponse{}, runtime.NewResponseError(resp)
	}
	return client.updateHandleResponse(resp)
}

// updateCreateRequest creates the Update request.
func (client *PolicyRestrictionClient) updateCreateRequest(ctx context.Context, resourceGroupName string, serviceName string, policyRestrictionID string, ifMatch string, parameters PolicyRestrictionUpdateContract, options *PolicyRestrictionClientUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/policyRestrictions/{policyRestrictionId}"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if serviceName == "" {
		return nil, errors.New("parameter serviceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{serviceName}", url.PathEscape(serviceName))
	if policyRestrictionID == "" {
		return nil, errors.New("parameter policyRestrictionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{policyRestrictionId}", url.PathEscape(policyRestrictionID))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["If-Match"] = []string{ifMatch}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, parameters)
}

// updateHandleResponse handles the Update response.
func (client *PolicyRestrictionClient) updateHandleResponse(resp *http.Response) (PolicyRestrictionClientUpdateResponse, error) {
	result := PolicyRestrictionClientUpdateResponse{}
	if val := resp.Header.Get("ETag"); val != "" {
		result.ETag = &val
	}
	if err := runtime.UnmarshalAsJSON(resp, &result.PolicyRestrictionContract); err != nil {
		return PolicyRestrictionClientUpdateResponse{}, err
	}
	return result, nil
}

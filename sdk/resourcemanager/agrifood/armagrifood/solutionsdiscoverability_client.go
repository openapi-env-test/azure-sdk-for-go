//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package armagrifood

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/cloud"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

// SolutionsDiscoverabilityClient contains the methods for the SolutionsDiscoverability group.
// Don't use this type directly, use NewSolutionsDiscoverabilityClient() instead.
type SolutionsDiscoverabilityClient struct {
	host string
	pl   runtime.Pipeline
}

// NewSolutionsDiscoverabilityClient creates a new instance of SolutionsDiscoverabilityClient with the specified values.
// credential - used to authorize requests. Usually a credential from azidentity.
// options - pass nil to accept the default values.
func NewSolutionsDiscoverabilityClient(credential azcore.TokenCredential, options *arm.ClientOptions) (*SolutionsDiscoverabilityClient, error) {
	if options == nil {
		options = &arm.ClientOptions{}
	}
	ep := cloud.AzurePublic.Services[cloud.ResourceManager].Endpoint
	if c, ok := options.Cloud.Services[cloud.ResourceManager]; ok {
		ep = c.Endpoint
	}
	pl, err := armruntime.NewPipeline(moduleName, moduleVersion, credential, runtime.PipelineOptions{}, options)
	if err != nil {
		return nil, err
	}
	client := &SolutionsDiscoverabilityClient{
		host: ep,
		pl:   pl,
	}
	return client, nil
}

// Get - Get Data Manager For Agriculture solution by id.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2023-06-01-preview
// dataManagerForAgricultureSolutionID - dataManagerForAgricultureSolutionId to be queried.
// options - SolutionsDiscoverabilityClientGetOptions contains the optional parameters for the SolutionsDiscoverabilityClient.Get
// method.
func (client *SolutionsDiscoverabilityClient) Get(ctx context.Context, dataManagerForAgricultureSolutionID string, options *SolutionsDiscoverabilityClientGetOptions) (SolutionsDiscoverabilityClientGetResponse, error) {
	req, err := client.getCreateRequest(ctx, dataManagerForAgricultureSolutionID, options)
	if err != nil {
		return SolutionsDiscoverabilityClientGetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return SolutionsDiscoverabilityClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return SolutionsDiscoverabilityClientGetResponse{}, runtime.NewResponseError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *SolutionsDiscoverabilityClient) getCreateRequest(ctx context.Context, dataManagerForAgricultureSolutionID string, options *SolutionsDiscoverabilityClientGetOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.AgFoodPlatform/farmBeatsSolutionDefinitions/{dataManagerForAgricultureSolutionId}"
	if dataManagerForAgricultureSolutionID == "" {
		return nil, errors.New("parameter dataManagerForAgricultureSolutionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{dataManagerForAgricultureSolutionId}", url.PathEscape(dataManagerForAgricultureSolutionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *SolutionsDiscoverabilityClient) getHandleResponse(resp *http.Response) (SolutionsDiscoverabilityClientGetResponse, error) {
	result := SolutionsDiscoverabilityClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.DataManagerForAgricultureSolution); err != nil {
		return SolutionsDiscoverabilityClientGetResponse{}, err
	}
	return result, nil
}

// NewListPager - Get list of Data Manager For Agriculture solutions.
// Generated from API version 2023-06-01-preview
// options - SolutionsDiscoverabilityClientListOptions contains the optional parameters for the SolutionsDiscoverabilityClient.List
// method.
func (client *SolutionsDiscoverabilityClient) NewListPager(options *SolutionsDiscoverabilityClientListOptions) *runtime.Pager[SolutionsDiscoverabilityClientListResponse] {
	return runtime.NewPager(runtime.PagingHandler[SolutionsDiscoverabilityClientListResponse]{
		More: func(page SolutionsDiscoverabilityClientListResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *SolutionsDiscoverabilityClientListResponse) (SolutionsDiscoverabilityClientListResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.listCreateRequest(ctx, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return SolutionsDiscoverabilityClientListResponse{}, err
			}
			resp, err := client.pl.Do(req)
			if err != nil {
				return SolutionsDiscoverabilityClientListResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return SolutionsDiscoverabilityClientListResponse{}, runtime.NewResponseError(resp)
			}
			return client.listHandleResponse(resp)
		},
	})
}

// listCreateRequest creates the List request.
func (client *SolutionsDiscoverabilityClient) listCreateRequest(ctx context.Context, options *SolutionsDiscoverabilityClientListOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.AgFoodPlatform/farmBeatsSolutionDefinitions"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.FarmBeatsSolutionIDs != nil {
		for _, qv := range options.FarmBeatsSolutionIDs {
			reqQP.Add("farmBeatsSolutionIds", qv)
		}
	}
	if options != nil && options.FarmBeatsSolutionNames != nil {
		for _, qv := range options.FarmBeatsSolutionNames {
			reqQP.Add("farmBeatsSolutionNames", qv)
		}
	}
	if options != nil && options.MaxPageSize != nil {
		reqQP.Set("$maxPageSize", strconv.FormatInt(int64(*options.MaxPageSize), 10))
	}
	reqQP.Set("api-version", "2023-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listHandleResponse handles the List response.
func (client *SolutionsDiscoverabilityClient) listHandleResponse(resp *http.Response) (SolutionsDiscoverabilityClientListResponse, error) {
	result := SolutionsDiscoverabilityClientListResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.DataManagerForAgricultureSolutionListResponse); err != nil {
		return SolutionsDiscoverabilityClientListResponse{}, err
	}
	return result, nil
}

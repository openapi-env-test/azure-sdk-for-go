//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/agrifood/armagrifood"
	"net/http"
	"net/url"
	"reflect"
	"regexp"
	"strconv"
	"time"
)

// SolutionsServer is a fake server for instances of the armagrifood.SolutionsClient type.
type SolutionsServer struct {
	// CreateOrUpdate is the fake for method SolutionsClient.CreateOrUpdate
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated
	CreateOrUpdate func(ctx context.Context, resourceGroupName string, dataManagerForAgricultureResourceName string, solutionID string, options *armagrifood.SolutionsClientCreateOrUpdateOptions) (resp azfake.Responder[armagrifood.SolutionsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder)

	// Delete is the fake for method SolutionsClient.Delete
	// HTTP status codes to indicate success: http.StatusOK, http.StatusNoContent
	Delete func(ctx context.Context, resourceGroupName string, dataManagerForAgricultureResourceName string, solutionID string, options *armagrifood.SolutionsClientDeleteOptions) (resp azfake.Responder[armagrifood.SolutionsClientDeleteResponse], errResp azfake.ErrorResponder)

	// Get is the fake for method SolutionsClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, resourceGroupName string, dataManagerForAgricultureResourceName string, solutionID string, options *armagrifood.SolutionsClientGetOptions) (resp azfake.Responder[armagrifood.SolutionsClientGetResponse], errResp azfake.ErrorResponder)

	// NewListPager is the fake for method SolutionsClient.NewListPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListPager func(resourceGroupName string, dataManagerForAgricultureResourceName string, options *armagrifood.SolutionsClientListOptions) (resp azfake.PagerResponder[armagrifood.SolutionsClientListResponse])
}

// NewSolutionsServerTransport creates a new instance of SolutionsServerTransport with the provided implementation.
// The returned SolutionsServerTransport instance is connected to an instance of armagrifood.SolutionsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewSolutionsServerTransport(srv *SolutionsServer) *SolutionsServerTransport {
	return &SolutionsServerTransport{
		srv:          srv,
		newListPager: newTracker[azfake.PagerResponder[armagrifood.SolutionsClientListResponse]](),
	}
}

// SolutionsServerTransport connects instances of armagrifood.SolutionsClient to instances of SolutionsServer.
// Don't use this type directly, use NewSolutionsServerTransport instead.
type SolutionsServerTransport struct {
	srv          *SolutionsServer
	newListPager *tracker[azfake.PagerResponder[armagrifood.SolutionsClientListResponse]]
}

// Do implements the policy.Transporter interface for SolutionsServerTransport.
func (s *SolutionsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "SolutionsClient.CreateOrUpdate":
		resp, err = s.dispatchCreateOrUpdate(req)
	case "SolutionsClient.Delete":
		resp, err = s.dispatchDelete(req)
	case "SolutionsClient.Get":
		resp, err = s.dispatchGet(req)
	case "SolutionsClient.NewListPager":
		resp, err = s.dispatchNewListPager(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (s *SolutionsServerTransport) dispatchCreateOrUpdate(req *http.Request) (*http.Response, error) {
	if s.srv.CreateOrUpdate == nil {
		return nil, &nonRetriableError{errors.New("fake for method CreateOrUpdate not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AgFoodPlatform/farmBeats/(?P<dataManagerForAgricultureResourceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/solutions/(?P<solutionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armagrifood.Solution](req)
	if err != nil {
		return nil, err
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	dataManagerForAgricultureResourceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("dataManagerForAgricultureResourceName")])
	if err != nil {
		return nil, err
	}
	solutionIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("solutionId")])
	if err != nil {
		return nil, err
	}
	var options *armagrifood.SolutionsClientCreateOrUpdateOptions
	if !reflect.ValueOf(body).IsZero() {
		options = &armagrifood.SolutionsClientCreateOrUpdateOptions{
			RequestBody: &body,
		}
	}
	respr, errRespr := s.srv.CreateOrUpdate(req.Context(), resourceGroupNameParam, dataManagerForAgricultureResourceNameParam, solutionIDParam, options)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK, http.StatusCreated}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Solution, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SolutionsServerTransport) dispatchDelete(req *http.Request) (*http.Response, error) {
	if s.srv.Delete == nil {
		return nil, &nonRetriableError{errors.New("fake for method Delete not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AgFoodPlatform/farmBeats/(?P<dataManagerForAgricultureResourceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/solutions/(?P<solutionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	dataManagerForAgricultureResourceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("dataManagerForAgricultureResourceName")])
	if err != nil {
		return nil, err
	}
	solutionIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("solutionId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.Delete(req.Context(), resourceGroupNameParam, dataManagerForAgricultureResourceNameParam, solutionIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK, http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SolutionsServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if s.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AgFoodPlatform/farmBeats/(?P<dataManagerForAgricultureResourceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/solutions/(?P<solutionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	dataManagerForAgricultureResourceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("dataManagerForAgricultureResourceName")])
	if err != nil {
		return nil, err
	}
	solutionIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("solutionId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.Get(req.Context(), resourceGroupNameParam, dataManagerForAgricultureResourceNameParam, solutionIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Solution, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SolutionsServerTransport) dispatchNewListPager(req *http.Request) (*http.Response, error) {
	if s.srv.NewListPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListPager not implemented")}
	}
	newListPager := s.newListPager.get(req)
	if newListPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AgFoodPlatform/farmBeats/(?P<dataManagerForAgricultureResourceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/solutions`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		dataManagerForAgricultureResourceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("dataManagerForAgricultureResourceName")])
		if err != nil {
			return nil, err
		}
		solutionIDsEscaped := qp["solutionIds"]
		solutionIDsParam := make([]string, len(solutionIDsEscaped))
		for i, v := range solutionIDsEscaped {
			u, unescapeErr := url.QueryUnescape(v)
			if unescapeErr != nil {
				return nil, unescapeErr
			}
			solutionIDsParam[i] = u
		}
		iDsEscaped := qp["ids"]
		iDsParam := make([]string, len(iDsEscaped))
		for i, v := range iDsEscaped {
			u, unescapeErr := url.QueryUnescape(v)
			if unescapeErr != nil {
				return nil, unescapeErr
			}
			iDsParam[i] = u
		}
		namesEscaped := qp["names"]
		namesParam := make([]string, len(namesEscaped))
		for i, v := range namesEscaped {
			u, unescapeErr := url.QueryUnescape(v)
			if unescapeErr != nil {
				return nil, unescapeErr
			}
			namesParam[i] = u
		}
		propertyFiltersEscaped := qp["propertyFilters"]
		propertyFiltersParam := make([]string, len(propertyFiltersEscaped))
		for i, v := range propertyFiltersEscaped {
			u, unescapeErr := url.QueryUnescape(v)
			if unescapeErr != nil {
				return nil, unescapeErr
			}
			propertyFiltersParam[i] = u
		}
		statusesEscaped := qp["statuses"]
		statusesParam := make([]string, len(statusesEscaped))
		for i, v := range statusesEscaped {
			u, unescapeErr := url.QueryUnescape(v)
			if unescapeErr != nil {
				return nil, unescapeErr
			}
			statusesParam[i] = u
		}
		minCreatedDateTimeUnescaped, err := url.QueryUnescape(qp.Get("minCreatedDateTime"))
		if err != nil {
			return nil, err
		}
		minCreatedDateTimeParam, err := parseOptional(minCreatedDateTimeUnescaped, func(v string) (time.Time, error) { return time.Parse(time.RFC3339Nano, v) })
		if err != nil {
			return nil, err
		}
		maxCreatedDateTimeUnescaped, err := url.QueryUnescape(qp.Get("maxCreatedDateTime"))
		if err != nil {
			return nil, err
		}
		maxCreatedDateTimeParam, err := parseOptional(maxCreatedDateTimeUnescaped, func(v string) (time.Time, error) { return time.Parse(time.RFC3339Nano, v) })
		if err != nil {
			return nil, err
		}
		minLastModifiedDateTimeUnescaped, err := url.QueryUnescape(qp.Get("minLastModifiedDateTime"))
		if err != nil {
			return nil, err
		}
		minLastModifiedDateTimeParam, err := parseOptional(minLastModifiedDateTimeUnescaped, func(v string) (time.Time, error) { return time.Parse(time.RFC3339Nano, v) })
		if err != nil {
			return nil, err
		}
		maxLastModifiedDateTimeUnescaped, err := url.QueryUnescape(qp.Get("maxLastModifiedDateTime"))
		if err != nil {
			return nil, err
		}
		maxLastModifiedDateTimeParam, err := parseOptional(maxLastModifiedDateTimeUnescaped, func(v string) (time.Time, error) { return time.Parse(time.RFC3339Nano, v) })
		if err != nil {
			return nil, err
		}
		maxPageSizeUnescaped, err := url.QueryUnescape(qp.Get("$maxPageSize"))
		if err != nil {
			return nil, err
		}
		maxPageSizeParam, err := parseOptional(maxPageSizeUnescaped, func(v string) (int32, error) {
			p, parseErr := strconv.ParseInt(v, 10, 32)
			if parseErr != nil {
				return 0, parseErr
			}
			return int32(p), nil
		})
		if err != nil {
			return nil, err
		}
		skipTokenUnescaped, err := url.QueryUnescape(qp.Get("$skipToken"))
		if err != nil {
			return nil, err
		}
		skipTokenParam := getOptional(skipTokenUnescaped)
		var options *armagrifood.SolutionsClientListOptions
		if len(solutionIDsParam) > 0 || len(iDsParam) > 0 || len(namesParam) > 0 || len(propertyFiltersParam) > 0 || len(statusesParam) > 0 || minCreatedDateTimeParam != nil || maxCreatedDateTimeParam != nil || minLastModifiedDateTimeParam != nil || maxLastModifiedDateTimeParam != nil || maxPageSizeParam != nil || skipTokenParam != nil {
			options = &armagrifood.SolutionsClientListOptions{
				SolutionIDs:             solutionIDsParam,
				IDs:                     iDsParam,
				Names:                   namesParam,
				PropertyFilters:         propertyFiltersParam,
				Statuses:                statusesParam,
				MinCreatedDateTime:      minCreatedDateTimeParam,
				MaxCreatedDateTime:      maxCreatedDateTimeParam,
				MinLastModifiedDateTime: minLastModifiedDateTimeParam,
				MaxLastModifiedDateTime: maxLastModifiedDateTimeParam,
				MaxPageSize:             maxPageSizeParam,
				SkipToken:               skipTokenParam,
			}
		}
		resp := s.srv.NewListPager(resourceGroupNameParam, dataManagerForAgricultureResourceNameParam, options)
		newListPager = &resp
		s.newListPager.add(req, newListPager)
		server.PagerResponderInjectNextLinks(newListPager, req, func(page *armagrifood.SolutionsClientListResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		s.newListPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListPager) {
		s.newListPager.remove(req)
	}
	return resp, nil
}

//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strings"
	"sync"
)

// ServerFactory is a fake server for instances of the armagrifood.ClientFactory type.
type ServerFactory struct {
	CheckNameAvailabilityServer               CheckNameAvailabilityServer
	DataConnectorsServer                      DataConnectorsServer
	DataManagerForAgricultureExtensionsServer DataManagerForAgricultureExtensionsServer
	DataManagerForAgricultureResourcesServer  DataManagerForAgricultureResourcesServer
	ExtensionsServer                          ExtensionsServer
	OperationResultsServer                    OperationResultsServer
	OperationsServer                          OperationsServer
	PrivateEndpointConnectionsServer          PrivateEndpointConnectionsServer
	PrivateLinkResourcesServer                PrivateLinkResourcesServer
	SolutionsServer                           SolutionsServer
	SolutionsDiscoverabilityServer            SolutionsDiscoverabilityServer
}

// NewServerFactoryTransport creates a new instance of ServerFactoryTransport with the provided implementation.
// The returned ServerFactoryTransport instance is connected to an instance of armagrifood.ClientFactory via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewServerFactoryTransport(srv *ServerFactory) *ServerFactoryTransport {
	return &ServerFactoryTransport{
		srv: srv,
	}
}

// ServerFactoryTransport connects instances of armagrifood.ClientFactory to instances of ServerFactory.
// Don't use this type directly, use NewServerFactoryTransport instead.
type ServerFactoryTransport struct {
	srv                                         *ServerFactory
	trMu                                        sync.Mutex
	trCheckNameAvailabilityServer               *CheckNameAvailabilityServerTransport
	trDataConnectorsServer                      *DataConnectorsServerTransport
	trDataManagerForAgricultureExtensionsServer *DataManagerForAgricultureExtensionsServerTransport
	trDataManagerForAgricultureResourcesServer  *DataManagerForAgricultureResourcesServerTransport
	trExtensionsServer                          *ExtensionsServerTransport
	trOperationResultsServer                    *OperationResultsServerTransport
	trOperationsServer                          *OperationsServerTransport
	trPrivateEndpointConnectionsServer          *PrivateEndpointConnectionsServerTransport
	trPrivateLinkResourcesServer                *PrivateLinkResourcesServerTransport
	trSolutionsServer                           *SolutionsServerTransport
	trSolutionsDiscoverabilityServer            *SolutionsDiscoverabilityServerTransport
}

// Do implements the policy.Transporter interface for ServerFactoryTransport.
func (s *ServerFactoryTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	client := method[:strings.Index(method, ".")]
	var resp *http.Response
	var err error

	switch client {
	case "CheckNameAvailabilityClient":
		initServer(s, &s.trCheckNameAvailabilityServer, func() *CheckNameAvailabilityServerTransport {
			return NewCheckNameAvailabilityServerTransport(&s.srv.CheckNameAvailabilityServer)
		})
		resp, err = s.trCheckNameAvailabilityServer.Do(req)
	case "DataConnectorsClient":
		initServer(s, &s.trDataConnectorsServer, func() *DataConnectorsServerTransport {
			return NewDataConnectorsServerTransport(&s.srv.DataConnectorsServer)
		})
		resp, err = s.trDataConnectorsServer.Do(req)
	case "DataManagerForAgricultureExtensionsClient":
		initServer(s, &s.trDataManagerForAgricultureExtensionsServer, func() *DataManagerForAgricultureExtensionsServerTransport {
			return NewDataManagerForAgricultureExtensionsServerTransport(&s.srv.DataManagerForAgricultureExtensionsServer)
		})
		resp, err = s.trDataManagerForAgricultureExtensionsServer.Do(req)
	case "DataManagerForAgricultureResourcesClient":
		initServer(s, &s.trDataManagerForAgricultureResourcesServer, func() *DataManagerForAgricultureResourcesServerTransport {
			return NewDataManagerForAgricultureResourcesServerTransport(&s.srv.DataManagerForAgricultureResourcesServer)
		})
		resp, err = s.trDataManagerForAgricultureResourcesServer.Do(req)
	case "ExtensionsClient":
		initServer(s, &s.trExtensionsServer, func() *ExtensionsServerTransport { return NewExtensionsServerTransport(&s.srv.ExtensionsServer) })
		resp, err = s.trExtensionsServer.Do(req)
	case "OperationResultsClient":
		initServer(s, &s.trOperationResultsServer, func() *OperationResultsServerTransport {
			return NewOperationResultsServerTransport(&s.srv.OperationResultsServer)
		})
		resp, err = s.trOperationResultsServer.Do(req)
	case "OperationsClient":
		initServer(s, &s.trOperationsServer, func() *OperationsServerTransport { return NewOperationsServerTransport(&s.srv.OperationsServer) })
		resp, err = s.trOperationsServer.Do(req)
	case "PrivateEndpointConnectionsClient":
		initServer(s, &s.trPrivateEndpointConnectionsServer, func() *PrivateEndpointConnectionsServerTransport {
			return NewPrivateEndpointConnectionsServerTransport(&s.srv.PrivateEndpointConnectionsServer)
		})
		resp, err = s.trPrivateEndpointConnectionsServer.Do(req)
	case "PrivateLinkResourcesClient":
		initServer(s, &s.trPrivateLinkResourcesServer, func() *PrivateLinkResourcesServerTransport {
			return NewPrivateLinkResourcesServerTransport(&s.srv.PrivateLinkResourcesServer)
		})
		resp, err = s.trPrivateLinkResourcesServer.Do(req)
	case "SolutionsClient":
		initServer(s, &s.trSolutionsServer, func() *SolutionsServerTransport { return NewSolutionsServerTransport(&s.srv.SolutionsServer) })
		resp, err = s.trSolutionsServer.Do(req)
	case "SolutionsDiscoverabilityClient":
		initServer(s, &s.trSolutionsDiscoverabilityServer, func() *SolutionsDiscoverabilityServerTransport {
			return NewSolutionsDiscoverabilityServerTransport(&s.srv.SolutionsDiscoverabilityServer)
		})
		resp, err = s.trSolutionsDiscoverabilityServer.Do(req)
	default:
		err = fmt.Errorf("unhandled client %s", client)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func initServer[T any](s *ServerFactoryTransport, dst **T, src func() *T) {
	s.trMu.Lock()
	if *dst == nil {
		*dst = src()
	}
	s.trMu.Unlock()
}

//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armadvisor

import (
	"encoding/json"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"reflect"
	"time"
)

// OperationDisplayInfo - The operation supported by Advisor.
type OperationDisplayInfo struct {
	// The description of the operation.
	Description *string `json:"description,omitempty"`

	// The action that users can perform, based on their permission level.
	Operation *string `json:"operation,omitempty"`

	// Service provider: Microsoft Advisor.
	Provider *string `json:"provider,omitempty"`

	// Resource on which the operation is performed.
	Resource *string `json:"resource,omitempty"`
}

// OperationEntity - The operation supported by Advisor.
type OperationEntity struct {
	// The operation supported by Advisor.
	Display *OperationDisplayInfo `json:"display,omitempty"`

	// Operation name: {provider}/{resource}/{operation}.
	Name *string `json:"name,omitempty"`
}

// OperationEntityListResult - The list of Advisor operations.
type OperationEntityListResult struct {
	// The link used to get the next page of operations.
	NextLink *string `json:"nextLink,omitempty"`

	// The list of operations.
	Value []*OperationEntity `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type OperationEntityListResult.
func (o OperationEntityListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", o.NextLink)
	populate(objectMap, "value", o.Value)
	return json.Marshal(objectMap)
}

// OperationsClientListOptions contains the optional parameters for the OperationsClient.List method.
type OperationsClientListOptions struct {
	// placeholder for future optional parameters
}

// RecommendationProperties - The properties of the recommendation.
type RecommendationProperties struct {
	// The category of the recommendation.
	Category *Category `json:"category,omitempty"`

	// The business impact of the recommendation.
	Impact *Impact `json:"impact,omitempty"`

	// The resource type identified by Advisor.
	ImpactedField *string `json:"impactedField,omitempty"`

	// The resource identified by Advisor.
	ImpactedValue *string `json:"impactedValue,omitempty"`

	// The most recent time that Advisor checked the validity of the recommendation.
	LastUpdated *time.Time `json:"lastUpdated,omitempty"`

	// The recommendation metadata.
	Metadata map[string]map[string]interface{} `json:"metadata,omitempty"`

	// The recommendation-type GUID.
	RecommendationTypeID *string `json:"recommendationTypeId,omitempty"`

	// The potential risk of not implementing the recommendation.
	Risk *Risk `json:"risk,omitempty"`

	// A summary of the recommendation.
	ShortDescription *ShortDescription `json:"shortDescription,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type RecommendationProperties.
func (r RecommendationProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "category", r.Category)
	populate(objectMap, "impact", r.Impact)
	populate(objectMap, "impactedField", r.ImpactedField)
	populate(objectMap, "impactedValue", r.ImpactedValue)
	populateTimeRFC3339(objectMap, "lastUpdated", r.LastUpdated)
	populate(objectMap, "metadata", r.Metadata)
	populate(objectMap, "recommendationTypeId", r.RecommendationTypeID)
	populate(objectMap, "risk", r.Risk)
	populate(objectMap, "shortDescription", r.ShortDescription)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type RecommendationProperties.
func (r *RecommendationProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "category":
			err = unpopulate(val, &r.Category)
			delete(rawMsg, key)
		case "impact":
			err = unpopulate(val, &r.Impact)
			delete(rawMsg, key)
		case "impactedField":
			err = unpopulate(val, &r.ImpactedField)
			delete(rawMsg, key)
		case "impactedValue":
			err = unpopulate(val, &r.ImpactedValue)
			delete(rawMsg, key)
		case "lastUpdated":
			err = unpopulateTimeRFC3339(val, &r.LastUpdated)
			delete(rawMsg, key)
		case "metadata":
			err = unpopulate(val, &r.Metadata)
			delete(rawMsg, key)
		case "recommendationTypeId":
			err = unpopulate(val, &r.RecommendationTypeID)
			delete(rawMsg, key)
		case "risk":
			err = unpopulate(val, &r.Risk)
			delete(rawMsg, key)
		case "shortDescription":
			err = unpopulate(val, &r.ShortDescription)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// RecommendationsClientGenerateOptions contains the optional parameters for the RecommendationsClient.Generate method.
type RecommendationsClientGenerateOptions struct {
	// placeholder for future optional parameters
}

// RecommendationsClientGetGenerateRecommendationsStatusOptions contains the optional parameters for the RecommendationsClient.GetGenerateRecommendationsStatus
// method.
type RecommendationsClientGetGenerateRecommendationsStatusOptions struct {
	// placeholder for future optional parameters
}

// RecommendationsClientGetOptions contains the optional parameters for the RecommendationsClient.Get method.
type RecommendationsClientGetOptions struct {
	// placeholder for future optional parameters
}

// RecommendationsClientListOptions contains the optional parameters for the RecommendationsClient.List method.
type RecommendationsClientListOptions struct {
	// The filter to apply to the recommendations.
	Filter *string
	// The page-continuation token to use with a paged version of this API.
	SkipToken *string
	// The number of recommendations per page if a paged version of this API is being used.
	Top *int32
}

// Resource - An Azure resource.
type Resource struct {
	// The location of the resource. This cannot be changed after the resource is created.
	Location *string `json:"location,omitempty"`

	// The tags of the resource.
	Tags map[string]*string `json:"tags,omitempty"`

	// READ-ONLY; The resource ID.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The name of the resource.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The type of the resource.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type Resource.
func (r Resource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", r.ID)
	populate(objectMap, "location", r.Location)
	populate(objectMap, "name", r.Name)
	populate(objectMap, "tags", r.Tags)
	populate(objectMap, "type", r.Type)
	return json.Marshal(objectMap)
}

// ResourceRecommendationBase - Advisor Recommendation.
type ResourceRecommendationBase struct {
	// The fully qualified recommendation ID, for example
	// /subscriptions/subscriptionId/resourceGroups/resourceGroup1/providers/Microsoft.ClassicCompute/virtualMachines/vm1/providers/Microsoft.Advisor/recommendations/recommendationGUID.
	ID *string `json:"id,omitempty"`

	// The name of recommendation.
	Name *string `json:"name,omitempty"`

	// The properties of the recommendation.
	Properties *RecommendationProperties `json:"properties,omitempty"`

	// The list of snoozed and dismissed rules for the recommendation.
	SuppressionIDs []*string `json:"suppressionIds,omitempty"`

	// The recommendation type: Microsoft.Advisor/recommendations.
	Type *string `json:"type,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ResourceRecommendationBase.
func (r ResourceRecommendationBase) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", r.ID)
	populate(objectMap, "name", r.Name)
	populate(objectMap, "properties", r.Properties)
	populate(objectMap, "suppressionIds", r.SuppressionIDs)
	populate(objectMap, "type", r.Type)
	return json.Marshal(objectMap)
}

// ResourceRecommendationBaseListResult - The list of Advisor recommendations.
type ResourceRecommendationBaseListResult struct {
	// The link used to get the next page of recommendations.
	NextLink *string `json:"nextLink,omitempty"`

	// The list of recommendations.
	Value []*ResourceRecommendationBase `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ResourceRecommendationBaseListResult.
func (r ResourceRecommendationBaseListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", r.NextLink)
	populate(objectMap, "value", r.Value)
	return json.Marshal(objectMap)
}

// ShortDescription - A summary of the recommendation.
type ShortDescription struct {
	// The issue or opportunity identified by the recommendation.
	Problem *string `json:"problem,omitempty"`

	// The remediation action suggested by the recommendation.
	Solution *string `json:"solution,omitempty"`
}

// SuppressionContract - The details of the snoozed or dismissed rule; for example, the duration, name, and GUID associated
// with the rule.
type SuppressionContract struct {
	// The location of the resource. This cannot be changed after the resource is created.
	Location *string `json:"location,omitempty"`

	// The GUID of the suppression.
	SuppressionID *string `json:"suppressionId,omitempty"`

	// The duration for which the suppression is valid.
	TTL *string `json:"ttl,omitempty"`

	// The tags of the resource.
	Tags map[string]*string `json:"tags,omitempty"`

	// READ-ONLY; The resource ID.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The name of the resource.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The type of the resource.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type SuppressionContract.
func (s SuppressionContract) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", s.ID)
	populate(objectMap, "location", s.Location)
	populate(objectMap, "name", s.Name)
	populate(objectMap, "suppressionId", s.SuppressionID)
	populate(objectMap, "ttl", s.TTL)
	populate(objectMap, "tags", s.Tags)
	populate(objectMap, "type", s.Type)
	return json.Marshal(objectMap)
}

// SuppressionsClientCreateOptions contains the optional parameters for the SuppressionsClient.Create method.
type SuppressionsClientCreateOptions struct {
	// placeholder for future optional parameters
}

// SuppressionsClientDeleteOptions contains the optional parameters for the SuppressionsClient.Delete method.
type SuppressionsClientDeleteOptions struct {
	// placeholder for future optional parameters
}

// SuppressionsClientGetOptions contains the optional parameters for the SuppressionsClient.Get method.
type SuppressionsClientGetOptions struct {
	// placeholder for future optional parameters
}

// SuppressionsClientListOptions contains the optional parameters for the SuppressionsClient.List method.
type SuppressionsClientListOptions struct {
	// placeholder for future optional parameters
}

func populate(m map[string]interface{}, k string, v interface{}) {
	if v == nil {
		return
	} else if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}

func unpopulate(data json.RawMessage, v interface{}) error {
	if data == nil {
		return nil
	}
	return json.Unmarshal(data, v)
}

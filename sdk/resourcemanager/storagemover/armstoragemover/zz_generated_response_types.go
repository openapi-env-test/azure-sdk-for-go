//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armstoragemover

import (
	"context"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"net/http"
	"time"
)

// AgentsClientCreateOrUpdateResponse contains the response from method AgentsClient.CreateOrUpdate.
type AgentsClientCreateOrUpdateResponse struct {
	AgentsClientCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AgentsClientCreateOrUpdateResult contains the result from method AgentsClient.CreateOrUpdate.
type AgentsClientCreateOrUpdateResult struct {
	Agent
}

// AgentsClientDeletePollerResponse contains the response from method AgentsClient.Delete.
type AgentsClientDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *AgentsClientDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l AgentsClientDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (AgentsClientDeleteResponse, error) {
	respType := AgentsClientDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a AgentsClientDeletePollerResponse from the provided client and resume token.
func (l *AgentsClientDeletePollerResponse) Resume(ctx context.Context, client *AgentsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("AgentsClient.Delete", token, client.pl)
	if err != nil {
		return err
	}
	poller := &AgentsClientDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// AgentsClientDeleteResponse contains the response from method AgentsClient.Delete.
type AgentsClientDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AgentsClientGetResponse contains the response from method AgentsClient.Get.
type AgentsClientGetResponse struct {
	AgentsClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AgentsClientGetResult contains the result from method AgentsClient.Get.
type AgentsClientGetResult struct {
	Agent
}

// AgentsClientListResponse contains the response from method AgentsClient.List.
type AgentsClientListResponse struct {
	AgentsClientListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AgentsClientListResult contains the result from method AgentsClient.List.
type AgentsClientListResult struct {
	AgentList
}

// AgentsClientUpdateResponse contains the response from method AgentsClient.Update.
type AgentsClientUpdateResponse struct {
	AgentsClientUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AgentsClientUpdateResult contains the result from method AgentsClient.Update.
type AgentsClientUpdateResult struct {
	Agent
}

// EndpointsClientCreateOrUpdateResponse contains the response from method EndpointsClient.CreateOrUpdate.
type EndpointsClientCreateOrUpdateResponse struct {
	EndpointsClientCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// EndpointsClientCreateOrUpdateResult contains the result from method EndpointsClient.CreateOrUpdate.
type EndpointsClientCreateOrUpdateResult struct {
	Endpoint
}

// EndpointsClientDeletePollerResponse contains the response from method EndpointsClient.Delete.
type EndpointsClientDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *EndpointsClientDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l EndpointsClientDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (EndpointsClientDeleteResponse, error) {
	respType := EndpointsClientDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a EndpointsClientDeletePollerResponse from the provided client and resume token.
func (l *EndpointsClientDeletePollerResponse) Resume(ctx context.Context, client *EndpointsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("EndpointsClient.Delete", token, client.pl)
	if err != nil {
		return err
	}
	poller := &EndpointsClientDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// EndpointsClientDeleteResponse contains the response from method EndpointsClient.Delete.
type EndpointsClientDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// EndpointsClientGetResponse contains the response from method EndpointsClient.Get.
type EndpointsClientGetResponse struct {
	EndpointsClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// EndpointsClientGetResult contains the result from method EndpointsClient.Get.
type EndpointsClientGetResult struct {
	Endpoint
}

// EndpointsClientListResponse contains the response from method EndpointsClient.List.
type EndpointsClientListResponse struct {
	EndpointsClientListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// EndpointsClientListResult contains the result from method EndpointsClient.List.
type EndpointsClientListResult struct {
	EndpointList
}

// EndpointsClientUpdateResponse contains the response from method EndpointsClient.Update.
type EndpointsClientUpdateResponse struct {
	EndpointsClientUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// EndpointsClientUpdateResult contains the result from method EndpointsClient.Update.
type EndpointsClientUpdateResult struct {
	Endpoint
}

// JobDefinitionsClientCreateOrUpdateResponse contains the response from method JobDefinitionsClient.CreateOrUpdate.
type JobDefinitionsClientCreateOrUpdateResponse struct {
	JobDefinitionsClientCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// JobDefinitionsClientCreateOrUpdateResult contains the result from method JobDefinitionsClient.CreateOrUpdate.
type JobDefinitionsClientCreateOrUpdateResult struct {
	JobDefinition
}

// JobDefinitionsClientDeletePollerResponse contains the response from method JobDefinitionsClient.Delete.
type JobDefinitionsClientDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *JobDefinitionsClientDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l JobDefinitionsClientDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (JobDefinitionsClientDeleteResponse, error) {
	respType := JobDefinitionsClientDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a JobDefinitionsClientDeletePollerResponse from the provided client and resume token.
func (l *JobDefinitionsClientDeletePollerResponse) Resume(ctx context.Context, client *JobDefinitionsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("JobDefinitionsClient.Delete", token, client.pl)
	if err != nil {
		return err
	}
	poller := &JobDefinitionsClientDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// JobDefinitionsClientDeleteResponse contains the response from method JobDefinitionsClient.Delete.
type JobDefinitionsClientDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// JobDefinitionsClientGetResponse contains the response from method JobDefinitionsClient.Get.
type JobDefinitionsClientGetResponse struct {
	JobDefinitionsClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// JobDefinitionsClientGetResult contains the result from method JobDefinitionsClient.Get.
type JobDefinitionsClientGetResult struct {
	JobDefinition
}

// JobDefinitionsClientListResponse contains the response from method JobDefinitionsClient.List.
type JobDefinitionsClientListResponse struct {
	JobDefinitionsClientListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// JobDefinitionsClientListResult contains the result from method JobDefinitionsClient.List.
type JobDefinitionsClientListResult struct {
	JobDefinitionList
}

// JobDefinitionsClientStartJobResponse contains the response from method JobDefinitionsClient.StartJob.
type JobDefinitionsClientStartJobResponse struct {
	JobDefinitionsClientStartJobResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// JobDefinitionsClientStartJobResult contains the result from method JobDefinitionsClient.StartJob.
type JobDefinitionsClientStartJobResult struct {
	JobRunResourceID
}

// JobDefinitionsClientStopJobResponse contains the response from method JobDefinitionsClient.StopJob.
type JobDefinitionsClientStopJobResponse struct {
	JobDefinitionsClientStopJobResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// JobDefinitionsClientStopJobResult contains the result from method JobDefinitionsClient.StopJob.
type JobDefinitionsClientStopJobResult struct {
	JobRunResourceID
}

// JobDefinitionsClientUpdateResponse contains the response from method JobDefinitionsClient.Update.
type JobDefinitionsClientUpdateResponse struct {
	JobDefinitionsClientUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// JobDefinitionsClientUpdateResult contains the result from method JobDefinitionsClient.Update.
type JobDefinitionsClientUpdateResult struct {
	JobDefinition
}

// JobRunsClientGetResponse contains the response from method JobRunsClient.Get.
type JobRunsClientGetResponse struct {
	JobRunsClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// JobRunsClientGetResult contains the result from method JobRunsClient.Get.
type JobRunsClientGetResult struct {
	JobRun
}

// JobRunsClientListResponse contains the response from method JobRunsClient.List.
type JobRunsClientListResponse struct {
	JobRunsClientListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// JobRunsClientListResult contains the result from method JobRunsClient.List.
type JobRunsClientListResult struct {
	JobRunList
}

// OperationsClientListResponse contains the response from method OperationsClient.List.
type OperationsClientListResponse struct {
	OperationsClientListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// OperationsClientListResult contains the result from method OperationsClient.List.
type OperationsClientListResult struct {
	OperationListResult
}

// ProjectsClientCreateOrUpdateResponse contains the response from method ProjectsClient.CreateOrUpdate.
type ProjectsClientCreateOrUpdateResponse struct {
	ProjectsClientCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ProjectsClientCreateOrUpdateResult contains the result from method ProjectsClient.CreateOrUpdate.
type ProjectsClientCreateOrUpdateResult struct {
	Project
}

// ProjectsClientDeletePollerResponse contains the response from method ProjectsClient.Delete.
type ProjectsClientDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ProjectsClientDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l ProjectsClientDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ProjectsClientDeleteResponse, error) {
	respType := ProjectsClientDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a ProjectsClientDeletePollerResponse from the provided client and resume token.
func (l *ProjectsClientDeletePollerResponse) Resume(ctx context.Context, client *ProjectsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("ProjectsClient.Delete", token, client.pl)
	if err != nil {
		return err
	}
	poller := &ProjectsClientDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// ProjectsClientDeleteResponse contains the response from method ProjectsClient.Delete.
type ProjectsClientDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ProjectsClientGetResponse contains the response from method ProjectsClient.Get.
type ProjectsClientGetResponse struct {
	ProjectsClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ProjectsClientGetResult contains the result from method ProjectsClient.Get.
type ProjectsClientGetResult struct {
	Project
}

// ProjectsClientListResponse contains the response from method ProjectsClient.List.
type ProjectsClientListResponse struct {
	ProjectsClientListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ProjectsClientListResult contains the result from method ProjectsClient.List.
type ProjectsClientListResult struct {
	ProjectList
}

// ProjectsClientUpdateResponse contains the response from method ProjectsClient.Update.
type ProjectsClientUpdateResponse struct {
	ProjectsClientUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ProjectsClientUpdateResult contains the result from method ProjectsClient.Update.
type ProjectsClientUpdateResult struct {
	Project
}

// StorageMoversClientCreateOrUpdateResponse contains the response from method StorageMoversClient.CreateOrUpdate.
type StorageMoversClientCreateOrUpdateResponse struct {
	StorageMoversClientCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// StorageMoversClientCreateOrUpdateResult contains the result from method StorageMoversClient.CreateOrUpdate.
type StorageMoversClientCreateOrUpdateResult struct {
	StorageMover
}

// StorageMoversClientDeletePollerResponse contains the response from method StorageMoversClient.Delete.
type StorageMoversClientDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *StorageMoversClientDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l StorageMoversClientDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (StorageMoversClientDeleteResponse, error) {
	respType := StorageMoversClientDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a StorageMoversClientDeletePollerResponse from the provided client and resume token.
func (l *StorageMoversClientDeletePollerResponse) Resume(ctx context.Context, client *StorageMoversClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("StorageMoversClient.Delete", token, client.pl)
	if err != nil {
		return err
	}
	poller := &StorageMoversClientDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// StorageMoversClientDeleteResponse contains the response from method StorageMoversClient.Delete.
type StorageMoversClientDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// StorageMoversClientGetResponse contains the response from method StorageMoversClient.Get.
type StorageMoversClientGetResponse struct {
	StorageMoversClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// StorageMoversClientGetResult contains the result from method StorageMoversClient.Get.
type StorageMoversClientGetResult struct {
	StorageMover
}

// StorageMoversClientListBySubscriptionResponse contains the response from method StorageMoversClient.ListBySubscription.
type StorageMoversClientListBySubscriptionResponse struct {
	StorageMoversClientListBySubscriptionResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// StorageMoversClientListBySubscriptionResult contains the result from method StorageMoversClient.ListBySubscription.
type StorageMoversClientListBySubscriptionResult struct {
	List
}

// StorageMoversClientListResponse contains the response from method StorageMoversClient.List.
type StorageMoversClientListResponse struct {
	StorageMoversClientListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// StorageMoversClientListResult contains the result from method StorageMoversClient.List.
type StorageMoversClientListResult struct {
	List
}

// StorageMoversClientUpdateResponse contains the response from method StorageMoversClient.Update.
type StorageMoversClientUpdateResponse struct {
	StorageMoversClientUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// StorageMoversClientUpdateResult contains the result from method StorageMoversClient.Update.
type StorageMoversClientUpdateResult struct {
	StorageMover
}

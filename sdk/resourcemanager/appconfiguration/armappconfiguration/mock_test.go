//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armappconfiguration_test

import (
	"context"
	"net/http"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/cloud"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/appconfiguration/armappconfiguration/v2"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/internal/testutil"
	"github.com/stretchr/testify/suite"
	"golang.org/x/net/http2"
)

type MockTestSuite struct {
	suite.Suite

	cred    azcore.TokenCredential
	options arm.ClientOptions
}

func (testsuite *MockTestSuite) SetupSuite() {
	mockHost := testutil.GetEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	err := http2.ConfigureTransport(tr)
	testsuite.Require().NoError(err, "Failed to configure http2 transport")
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	testsuite.cred = &testutil.FakeCredential{}

	testsuite.options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
			Cloud: cloud.Configuration{
				Services: map[cloud.ServiceName]cloud.ServiceConfiguration{
					cloud.ResourceManager: {
						Audience: mockHost,
						Endpoint: mockHost,
					},
				},
			},
		},
	}
}

func TestMockTest(t *testing.T) {
	suite.Run(t, new(MockTestSuite))
}

func (testsuite *MockTestSuite) TestConfigurationStores_List() {
	ctx := context.Background()
	// From example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/ConfigurationStoresList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ConfigurationStores_List"},
	})
	client, err := armappconfiguration.NewConfigurationStoresClient("c80fb759-c965-4c6a-9110-9b2b2d038882", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListPager(&armappconfiguration.ConfigurationStoresClientListOptions{SkipToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/ConfigurationStoresList.json")
		// Response check
		pagerExampleRes := armappconfiguration.ConfigurationStoreListResult{
			Value: []*armappconfiguration.ConfigurationStore{
				{
					Name:     to.Ptr("contoso"),
					Type:     to.Ptr("Microsoft.AppConfiguration/configurationStores"),
					ID:       to.Ptr("/subscriptions/c80fb759-c965-4c6a-9110-9b2b2d038882/resourceGroups/myResourceGroup/providers/Microsoft.AppConfiguration/configurationStores/contoso"),
					Location: to.Ptr("westus"),
					Tags:     map[string]*string{},
					Identity: &armappconfiguration.ResourceIdentity{
						Type:        to.Ptr(armappconfiguration.IdentityTypeSystemAssigned),
						PrincipalID: to.Ptr("AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA"),
						TenantID:    to.Ptr("BBBBBBBB-BBBB-BBBB-BBBB-BBBBBBBBBBBB"),
					},
					Properties: &armappconfiguration.ConfigurationStoreProperties{
						CreationDate:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:55+00:00"); return t }()),
						DisableLocalAuth: to.Ptr(false),
						Encryption: &armappconfiguration.EncryptionProperties{
							KeyVaultProperties: &armappconfiguration.KeyVaultProperties{},
						},
						Endpoint:                   to.Ptr("https://contoso.azconfig.io"),
						PrivateEndpointConnections: []*armappconfiguration.PrivateEndpointConnectionReference{},
						ProvisioningState:          to.Ptr(armappconfiguration.ProvisioningStateSucceeded),
						PublicNetworkAccess:        to.Ptr(armappconfiguration.PublicNetworkAccessDisabled),
					},
					SKU: &armappconfiguration.SKU{
						Name: to.Ptr("Standard"),
					},
					SystemData: &armappconfiguration.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:55+00:00"); return t }()),
						CreatedBy:          to.Ptr("foo@contoso.com"),
						CreatedByType:      to.Ptr(armappconfiguration.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:55+00:00"); return t }()),
						LastModifiedBy:     to.Ptr("foo@contoso.com"),
						LastModifiedByType: to.Ptr(armappconfiguration.CreatedByTypeUser),
					},
				},
				{
					Name:     to.Ptr("contoso2"),
					Type:     to.Ptr("Microsoft.AppConfiguration/configurationStores"),
					ID:       to.Ptr("/subscriptions/c80fb759-c965-4c6a-9110-9b2b2d038882/resourceGroups/myResourceGroup/providers/Microsoft.AppConfiguration/configurationStores/contoso2"),
					Location: to.Ptr("westus"),
					Tags:     map[string]*string{},
					Identity: &armappconfiguration.ResourceIdentity{
						Type:        to.Ptr(armappconfiguration.IdentityTypeSystemAssigned),
						PrincipalID: to.Ptr("CCCCCCCC-CCCC-CCCC-CCCC-CCCCCCCCCCCC"),
						TenantID:    to.Ptr("BBBBBBBB-BBBB-BBBB-BBBB-BBBBBBBBBBBB"),
					},
					Properties: &armappconfiguration.ConfigurationStoreProperties{
						CreationDate:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T23:06:59+00:00"); return t }()),
						DisableLocalAuth: to.Ptr(false),
						Encryption: &armappconfiguration.EncryptionProperties{
							KeyVaultProperties: &armappconfiguration.KeyVaultProperties{},
						},
						Endpoint:                   to.Ptr("https://contoso2.azconfig.io"),
						PrivateEndpointConnections: []*armappconfiguration.PrivateEndpointConnectionReference{},
						ProvisioningState:          to.Ptr(armappconfiguration.ProvisioningStateSucceeded),
						PublicNetworkAccess:        to.Ptr(armappconfiguration.PublicNetworkAccessDisabled),
					},
					SKU: &armappconfiguration.SKU{
						Name: to.Ptr("Standard"),
					},
					SystemData: &armappconfiguration.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:55+00:00"); return t }()),
						CreatedBy:          to.Ptr("foo@contoso.com"),
						CreatedByType:      to.Ptr(armappconfiguration.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:55+00:00"); return t }()),
						LastModifiedBy:     to.Ptr("foo@contoso.com"),
						LastModifiedByType: to.Ptr(armappconfiguration.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ConfigurationStoreListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ConfigurationStoreListResult)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/ConfigurationStoresList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestConfigurationStores_ListByResourceGroup() {
	ctx := context.Background()
	// From example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/ConfigurationStoresListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ConfigurationStores_ListByResourceGroup"},
	})
	client, err := armappconfiguration.NewConfigurationStoresClient("c80fb759-c965-4c6a-9110-9b2b2d038882", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListByResourceGroupPager("myResourceGroup", &armappconfiguration.ConfigurationStoresClientListByResourceGroupOptions{SkipToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/ConfigurationStoresListByResourceGroup.json")
		// Response check
		pagerExampleRes := armappconfiguration.ConfigurationStoreListResult{
			Value: []*armappconfiguration.ConfigurationStore{
				{
					Name:     to.Ptr("contoso"),
					Type:     to.Ptr("Microsoft.AppConfiguration/configurationStores"),
					ID:       to.Ptr("/subscriptions/c80fb759-c965-4c6a-9110-9b2b2d038882/resourceGroups/myResourceGroup/providers/Microsoft.AppConfiguration/configurationStores/contoso"),
					Location: to.Ptr("westus"),
					Tags:     map[string]*string{},
					Properties: &armappconfiguration.ConfigurationStoreProperties{
						CreationDate:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:55+00:00"); return t }()),
						DisableLocalAuth: to.Ptr(false),
						Encryption: &armappconfiguration.EncryptionProperties{
							KeyVaultProperties: &armappconfiguration.KeyVaultProperties{},
						},
						Endpoint:                   to.Ptr("https://contoso.azconfig.io"),
						PrivateEndpointConnections: []*armappconfiguration.PrivateEndpointConnectionReference{},
						ProvisioningState:          to.Ptr(armappconfiguration.ProvisioningStateSucceeded),
						PublicNetworkAccess:        to.Ptr(armappconfiguration.PublicNetworkAccessDisabled),
					},
					SKU: &armappconfiguration.SKU{
						Name: to.Ptr("Standard"),
					},
					SystemData: &armappconfiguration.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:55+00:00"); return t }()),
						CreatedBy:          to.Ptr("foo@contoso.com"),
						CreatedByType:      to.Ptr(armappconfiguration.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:55+00:00"); return t }()),
						LastModifiedBy:     to.Ptr("foo@contoso.com"),
						LastModifiedByType: to.Ptr(armappconfiguration.CreatedByTypeUser),
					},
				},
				{
					Name:     to.Ptr("contoso2"),
					Type:     to.Ptr("Microsoft.AppConfiguration/configurationStores"),
					ID:       to.Ptr("/subscriptions/c80fb759-c965-4c6a-9110-9b2b2d038882/resourceGroups/myResourceGroup/providers/Microsoft.AppConfiguration/configurationStores/contoso2"),
					Location: to.Ptr("westus"),
					Tags:     map[string]*string{},
					Properties: &armappconfiguration.ConfigurationStoreProperties{
						CreationDate:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T23:06:59+00:00"); return t }()),
						DisableLocalAuth: to.Ptr(false),
						Encryption: &armappconfiguration.EncryptionProperties{
							KeyVaultProperties: &armappconfiguration.KeyVaultProperties{},
						},
						Endpoint:                   to.Ptr("https://contoso2.azconfig.io"),
						PrivateEndpointConnections: []*armappconfiguration.PrivateEndpointConnectionReference{},
						ProvisioningState:          to.Ptr(armappconfiguration.ProvisioningStateSucceeded),
						PublicNetworkAccess:        to.Ptr(armappconfiguration.PublicNetworkAccessDisabled),
					},
					SKU: &armappconfiguration.SKU{
						Name: to.Ptr("Standard"),
					},
					SystemData: &armappconfiguration.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:55+00:00"); return t }()),
						CreatedBy:          to.Ptr("foo@contoso.com"),
						CreatedByType:      to.Ptr(armappconfiguration.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:55+00:00"); return t }()),
						LastModifiedBy:     to.Ptr("foo@contoso.com"),
						LastModifiedByType: to.Ptr(armappconfiguration.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ConfigurationStoreListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ConfigurationStoreListResult)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/ConfigurationStoresListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestConfigurationStores_Get() {
	ctx := context.Background()
	// From example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/ConfigurationStoresGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ConfigurationStores_Get"},
	})
	client, err := armappconfiguration.NewConfigurationStoresClient("c80fb759-c965-4c6a-9110-9b2b2d038882", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.Get(ctx, "myResourceGroup", "contoso", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/ConfigurationStoresGet.json")
	// Response check
	exampleRes := armappconfiguration.ConfigurationStore{
		Name:     to.Ptr("contoso"),
		Type:     to.Ptr("Microsoft.AppConfiguration/configurationStores"),
		ID:       to.Ptr("/subscriptions/c80fb759-c965-4c6a-9110-9b2b2d038882/resourceGroups/myResourceGroup/providers/Microsoft.AppConfiguration/configurationStores/contoso"),
		Location: to.Ptr("westus"),
		Tags:     map[string]*string{},
		Identity: &armappconfiguration.ResourceIdentity{
			Type:        to.Ptr(armappconfiguration.IdentityTypeSystemAssigned),
			PrincipalID: to.Ptr("AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA"),
			TenantID:    to.Ptr("BBBBBBBB-BBBB-BBBB-BBBB-BBBBBBBBBBBB"),
		},
		Properties: &armappconfiguration.ConfigurationStoreProperties{
			CreationDate:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:55+00:00"); return t }()),
			DisableLocalAuth: to.Ptr(false),
			Encryption: &armappconfiguration.EncryptionProperties{
				KeyVaultProperties: &armappconfiguration.KeyVaultProperties{},
			},
			Endpoint:                   to.Ptr("https://contoso.azconfig.io"),
			PrivateEndpointConnections: []*armappconfiguration.PrivateEndpointConnectionReference{},
			ProvisioningState:          to.Ptr(armappconfiguration.ProvisioningStateSucceeded),
			PublicNetworkAccess:        to.Ptr(armappconfiguration.PublicNetworkAccessDisabled),
		},
		SKU: &armappconfiguration.SKU{
			Name: to.Ptr("Standard"),
		},
		SystemData: &armappconfiguration.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:55+00:00"); return t }()),
			CreatedBy:          to.Ptr("foo@contoso.com"),
			CreatedByType:      to.Ptr(armappconfiguration.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:55+00:00"); return t }()),
			LastModifiedBy:     to.Ptr("foo@contoso.com"),
			LastModifiedByType: to.Ptr(armappconfiguration.CreatedByTypeUser),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.ConfigurationStore) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.ConfigurationStore)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/ConfigurationStoresGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestConfigurationStores_Create() {
	ctx := context.Background()
	// From example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/ConfigurationStoresCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ConfigurationStores_Create"},
	})
	client, err := armappconfiguration.NewConfigurationStoresClient("c80fb759-c965-4c6a-9110-9b2b2d038882", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginCreate(ctx, "myResourceGroup", "contoso", armappconfiguration.ConfigurationStore{
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"myTag": to.Ptr("myTagValue"),
		},
		SKU: &armappconfiguration.SKU{
			Name: to.Ptr("Standard"),
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/ConfigurationStoresCreate.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/ConfigurationStoresCreate.json")
	// Response check
	exampleRes := armappconfiguration.ConfigurationStore{
		Name:     to.Ptr("contoso"),
		Type:     to.Ptr("Microsoft.AppConfiguration/configurationStores"),
		ID:       to.Ptr("/subscriptions/c80fb759-c965-4c6a-9110-9b2b2d038882/resourceGroups/myResourceGroup/providers/Microsoft.AppConfiguration/configurationStores/contoso"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"myTag": to.Ptr("myTagValue"),
		},
		Properties: &armappconfiguration.ConfigurationStoreProperties{
			CreationDate:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:55+00:00"); return t }()),
			DisableLocalAuth:      to.Ptr(false),
			EnablePurgeProtection: to.Ptr(false),
			Encryption: &armappconfiguration.EncryptionProperties{
				KeyVaultProperties: &armappconfiguration.KeyVaultProperties{},
			},
			Endpoint:                   to.Ptr("https://contoso.azconfig.io"),
			PrivateEndpointConnections: []*armappconfiguration.PrivateEndpointConnectionReference{},
			ProvisioningState:          to.Ptr(armappconfiguration.ProvisioningStateSucceeded),
			SoftDeleteRetentionInDays:  to.Ptr[int32](30),
		},
		SKU: &armappconfiguration.SKU{
			Name: to.Ptr("Standard"),
		},
		SystemData: &armappconfiguration.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:55+00:00"); return t }()),
			CreatedBy:          to.Ptr("foo@contoso.com"),
			CreatedByType:      to.Ptr(armappconfiguration.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:55+00:00"); return t }()),
			LastModifiedBy:     to.Ptr("foo@contoso.com"),
			LastModifiedByType: to.Ptr(armappconfiguration.CreatedByTypeUser),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.ConfigurationStore) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.ConfigurationStore)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/ConfigurationStoresCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/ConfigurationStoresCreateWithIdentity.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ConfigurationStores_Create_With_Identity"},
	})
	client, err = armappconfiguration.NewConfigurationStoresClient("c80fb759-c965-4c6a-9110-9b2b2d038882", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreate(ctx, "myResourceGroup", "contoso", armappconfiguration.ConfigurationStore{
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"myTag": to.Ptr("myTagValue"),
		},
		Identity: &armappconfiguration.ResourceIdentity{
			Type: to.Ptr(armappconfiguration.IdentityTypeSystemAssignedUserAssigned),
			UserAssignedIdentities: map[string]*armappconfiguration.UserIdentity{
				"/subscriptions/c80fb759-c965-4c6a-9110-9b2b2d038882/resourcegroups/myResourceGroup1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity2": {},
			},
		},
		SKU: &armappconfiguration.SKU{
			Name: to.Ptr("Standard"),
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/ConfigurationStoresCreateWithIdentity.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/ConfigurationStoresCreateWithIdentity.json")
	// Response check
	exampleRes = armappconfiguration.ConfigurationStore{
		Name:     to.Ptr("contoso"),
		Type:     to.Ptr("Microsoft.AppConfiguration/configurationStores"),
		ID:       to.Ptr("/subscriptions/c80fb759-c965-4c6a-9110-9b2b2d038882/resourceGroups/myResourceGroup/providers/Microsoft.AppConfiguration/configurationStores/contoso"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"myTag": to.Ptr("myTagValue"),
		},
		Identity: &armappconfiguration.ResourceIdentity{
			Type:        to.Ptr(armappconfiguration.IdentityTypeSystemAssignedUserAssigned),
			PrincipalID: to.Ptr("AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA"),
			TenantID:    to.Ptr("BBBBBBBB-BBBB-BBBB-BBBB-BBBBBBBBBBBB"),
			UserAssignedIdentities: map[string]*armappconfiguration.UserIdentity{
				"/subscriptions/c80fb759-c965-4c6a-9110-9b2b2d038882/resourcegroups/myResourceGroup1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity2": {
					ClientID:    to.Ptr("CCCCCCCC-CCCC-CCCC-CCCC-CCCCCCCCCCCC"),
					PrincipalID: to.Ptr("DDDDDDDD-DDDD-DDDD-DDDD-DDDDDDDDDDDD"),
				},
			},
		},
		Properties: &armappconfiguration.ConfigurationStoreProperties{
			CreationDate:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:55+00:00"); return t }()),
			DisableLocalAuth: to.Ptr(false),
			Encryption: &armappconfiguration.EncryptionProperties{
				KeyVaultProperties: &armappconfiguration.KeyVaultProperties{},
			},
			Endpoint:                   to.Ptr("https://contoso.azconfig.io"),
			PrivateEndpointConnections: []*armappconfiguration.PrivateEndpointConnectionReference{},
			ProvisioningState:          to.Ptr(armappconfiguration.ProvisioningStateSucceeded),
		},
		SKU: &armappconfiguration.SKU{
			Name: to.Ptr("Standard"),
		},
		SystemData: &armappconfiguration.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:55+00:00"); return t }()),
			CreatedBy:          to.Ptr("foo@contoso.com"),
			CreatedByType:      to.Ptr(armappconfiguration.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:55+00:00"); return t }()),
			LastModifiedBy:     to.Ptr("foo@contoso.com"),
			LastModifiedByType: to.Ptr(armappconfiguration.CreatedByTypeUser),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.ConfigurationStore) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.ConfigurationStore)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/ConfigurationStoresCreateWithIdentity.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/ConfigurationStoresCreateWithLocalAuthDisabled.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ConfigurationStores_Create_With_Local_Auth_Disabled"},
	})
	client, err = armappconfiguration.NewConfigurationStoresClient("c80fb759-c965-4c6a-9110-9b2b2d038882", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreate(ctx, "myResourceGroup", "contoso", armappconfiguration.ConfigurationStore{
		Location: to.Ptr("westus"),
		Properties: &armappconfiguration.ConfigurationStoreProperties{
			DisableLocalAuth: to.Ptr(true),
		},
		SKU: &armappconfiguration.SKU{
			Name: to.Ptr("Standard"),
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/ConfigurationStoresCreateWithLocalAuthDisabled.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/ConfigurationStoresCreateWithLocalAuthDisabled.json")
	// Response check
	exampleRes = armappconfiguration.ConfigurationStore{
		Name:     to.Ptr("contoso"),
		Type:     to.Ptr("Microsoft.AppConfiguration/configurationStores"),
		ID:       to.Ptr("/subscriptions/c80fb759-c965-4c6a-9110-9b2b2d038882/resourceGroups/myResourceGroup/providers/Microsoft.AppConfiguration/configurationStores/contoso"),
		Location: to.Ptr("westus"),
		Tags:     map[string]*string{},
		Properties: &armappconfiguration.ConfigurationStoreProperties{
			CreationDate:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:55+00:00"); return t }()),
			DisableLocalAuth: to.Ptr(true),
			Encryption: &armappconfiguration.EncryptionProperties{
				KeyVaultProperties: &armappconfiguration.KeyVaultProperties{},
			},
			Endpoint:                   to.Ptr("https://contoso.azconfig.io"),
			PrivateEndpointConnections: []*armappconfiguration.PrivateEndpointConnectionReference{},
			ProvisioningState:          to.Ptr(armappconfiguration.ProvisioningStateSucceeded),
		},
		SKU: &armappconfiguration.SKU{
			Name: to.Ptr("Standard"),
		},
		SystemData: &armappconfiguration.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:55+00:00"); return t }()),
			CreatedBy:          to.Ptr("foo@contoso.com"),
			CreatedByType:      to.Ptr(armappconfiguration.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:55+00:00"); return t }()),
			LastModifiedBy:     to.Ptr("foo@contoso.com"),
			LastModifiedByType: to.Ptr(armappconfiguration.CreatedByTypeUser),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.ConfigurationStore) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.ConfigurationStore)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/ConfigurationStoresCreateWithLocalAuthDisabled.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestConfigurationStores_Delete() {
	ctx := context.Background()
	// From example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/ConfigurationStoresDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ConfigurationStores_Delete"},
	})
	client, err := armappconfiguration.NewConfigurationStoresClient("c80fb759-c965-4c6a-9110-9b2b2d038882", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginDelete(ctx, "myResourceGroup", "contoso", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/ConfigurationStoresDelete.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/ConfigurationStoresDelete.json")
}

func (testsuite *MockTestSuite) TestConfigurationStores_Update() {
	ctx := context.Background()
	// From example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/ConfigurationStoresUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ConfigurationStores_Update"},
	})
	client, err := armappconfiguration.NewConfigurationStoresClient("c80fb759-c965-4c6a-9110-9b2b2d038882", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginUpdate(ctx, "myResourceGroup", "contoso", armappconfiguration.ConfigurationStoreUpdateParameters{
		SKU: &armappconfiguration.SKU{
			Name: to.Ptr("Standard"),
		},
		Tags: map[string]*string{
			"Category": to.Ptr("Marketing"),
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/ConfigurationStoresUpdate.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/ConfigurationStoresUpdate.json")
	// Response check
	exampleRes := armappconfiguration.ConfigurationStore{
		Name:     to.Ptr("contoso"),
		Type:     to.Ptr("Microsoft.AppConfiguration/configurationStores"),
		ID:       to.Ptr("/subscriptions/c80fb759-c965-4c6a-9110-9b2b2d038882/resourceGroups/myResourceGroup/providers/Microsoft.AppConfiguration/configurationStores/contoso"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"Category": to.Ptr("Marketing"),
		},
		Properties: &armappconfiguration.ConfigurationStoreProperties{
			CreationDate:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:55+00:00"); return t }()),
			DisableLocalAuth: to.Ptr(false),
			Encryption: &armappconfiguration.EncryptionProperties{
				KeyVaultProperties: &armappconfiguration.KeyVaultProperties{},
			},
			Endpoint:                   to.Ptr("https://contoso.azconfig.io"),
			PrivateEndpointConnections: []*armappconfiguration.PrivateEndpointConnectionReference{},
			ProvisioningState:          to.Ptr(armappconfiguration.ProvisioningStateSucceeded),
			PublicNetworkAccess:        to.Ptr(armappconfiguration.PublicNetworkAccessDisabled),
		},
		SKU: &armappconfiguration.SKU{
			Name: to.Ptr("Standard"),
		},
		SystemData: &armappconfiguration.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:55+00:00"); return t }()),
			CreatedBy:          to.Ptr("foo@contoso.com"),
			CreatedByType:      to.Ptr(armappconfiguration.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:55+00:00"); return t }()),
			LastModifiedBy:     to.Ptr("foo@contoso.com"),
			LastModifiedByType: to.Ptr(armappconfiguration.CreatedByTypeUser),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.ConfigurationStore) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.ConfigurationStore)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/ConfigurationStoresUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/ConfigurationStoresUpdateDisableLocalAuth.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ConfigurationStores_Update_Disable_Local_Auth"},
	})
	client, err = armappconfiguration.NewConfigurationStoresClient("c80fb759-c965-4c6a-9110-9b2b2d038882", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginUpdate(ctx, "myResourceGroup", "contoso", armappconfiguration.ConfigurationStoreUpdateParameters{
		Properties: &armappconfiguration.ConfigurationStorePropertiesUpdateParameters{
			DisableLocalAuth: to.Ptr(true),
		},
		SKU: &armappconfiguration.SKU{
			Name: to.Ptr("Standard"),
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/ConfigurationStoresUpdateDisableLocalAuth.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/ConfigurationStoresUpdateDisableLocalAuth.json")
	// Response check
	exampleRes = armappconfiguration.ConfigurationStore{
		Name:     to.Ptr("contoso"),
		Type:     to.Ptr("Microsoft.AppConfiguration/configurationStores"),
		ID:       to.Ptr("/subscriptions/c80fb759-c965-4c6a-9110-9b2b2d038882/resourceGroups/myResourceGroup/providers/Microsoft.AppConfiguration/configurationStores/contoso"),
		Location: to.Ptr("westus"),
		Tags:     map[string]*string{},
		Properties: &armappconfiguration.ConfigurationStoreProperties{
			CreationDate:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:55+00:00"); return t }()),
			DisableLocalAuth: to.Ptr(true),
			Encryption: &armappconfiguration.EncryptionProperties{
				KeyVaultProperties: &armappconfiguration.KeyVaultProperties{},
			},
			Endpoint:                   to.Ptr("https://contoso.azconfig.io"),
			PrivateEndpointConnections: []*armappconfiguration.PrivateEndpointConnectionReference{},
			ProvisioningState:          to.Ptr(armappconfiguration.ProvisioningStateSucceeded),
			PublicNetworkAccess:        to.Ptr(armappconfiguration.PublicNetworkAccessDisabled),
		},
		SKU: &armappconfiguration.SKU{
			Name: to.Ptr("Standard"),
		},
		SystemData: &armappconfiguration.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:55+00:00"); return t }()),
			CreatedBy:          to.Ptr("foo@contoso.com"),
			CreatedByType:      to.Ptr(armappconfiguration.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:55+00:00"); return t }()),
			LastModifiedBy:     to.Ptr("foo@contoso.com"),
			LastModifiedByType: to.Ptr(armappconfiguration.CreatedByTypeUser),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.ConfigurationStore) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.ConfigurationStore)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/ConfigurationStoresUpdateDisableLocalAuth.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/ConfigurationStoresUpdateWithIdentity.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ConfigurationStores_Update_With_Identity"},
	})
	client, err = armappconfiguration.NewConfigurationStoresClient("c80fb759-c965-4c6a-9110-9b2b2d038882", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginUpdate(ctx, "myResourceGroup", "contoso", armappconfiguration.ConfigurationStoreUpdateParameters{
		Identity: &armappconfiguration.ResourceIdentity{
			Type: to.Ptr(armappconfiguration.IdentityTypeSystemAssignedUserAssigned),
			UserAssignedIdentities: map[string]*armappconfiguration.UserIdentity{
				"/subscriptions/c80fb759-c965-4c6a-9110-9b2b2d038882/resourcegroups/myResourceGroup1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity2": {},
			},
		},
		SKU: &armappconfiguration.SKU{
			Name: to.Ptr("Standard"),
		},
		Tags: map[string]*string{
			"Category": to.Ptr("Marketing"),
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/ConfigurationStoresUpdateWithIdentity.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/ConfigurationStoresUpdateWithIdentity.json")
	// Response check
	exampleRes = armappconfiguration.ConfigurationStore{
		Name:     to.Ptr("contoso"),
		Type:     to.Ptr("Microsoft.AppConfiguration/configurationStores"),
		ID:       to.Ptr("/subscriptions/c80fb759-c965-4c6a-9110-9b2b2d038882/resourceGroups/myResourceGroup/providers/Microsoft.AppConfiguration/configurationStores/contoso"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"Category": to.Ptr("Marketing"),
		},
		Identity: &armappconfiguration.ResourceIdentity{
			Type:        to.Ptr(armappconfiguration.IdentityTypeSystemAssignedUserAssigned),
			PrincipalID: to.Ptr("AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA"),
			TenantID:    to.Ptr("BBBBBBBB-BBBB-BBBB-BBBB-BBBBBBBBBBBB"),
			UserAssignedIdentities: map[string]*armappconfiguration.UserIdentity{
				"/subscriptions/c80fb759-c965-4c6a-9110-9b2b2d038882/resourcegroups/myResourceGroup1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity2": {
					ClientID:    to.Ptr("CCCCCCCC-CCCC-CCCC-CCCC-CCCCCCCCCCCC"),
					PrincipalID: to.Ptr("DDDDDDDD-DDDD-DDDD-DDDD-DDDDDDDDDDDD"),
				},
			},
		},
		Properties: &armappconfiguration.ConfigurationStoreProperties{
			CreationDate:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:55+00:00"); return t }()),
			DisableLocalAuth: to.Ptr(false),
			Encryption: &armappconfiguration.EncryptionProperties{
				KeyVaultProperties: &armappconfiguration.KeyVaultProperties{},
			},
			Endpoint:                   to.Ptr("https://contoso.azconfig.io"),
			PrivateEndpointConnections: []*armappconfiguration.PrivateEndpointConnectionReference{},
			ProvisioningState:          to.Ptr(armappconfiguration.ProvisioningStateSucceeded),
			PublicNetworkAccess:        to.Ptr(armappconfiguration.PublicNetworkAccessDisabled),
		},
		SKU: &armappconfiguration.SKU{
			Name: to.Ptr("Standard"),
		},
		SystemData: &armappconfiguration.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:55+00:00"); return t }()),
			CreatedBy:          to.Ptr("foo@contoso.com"),
			CreatedByType:      to.Ptr(armappconfiguration.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:55+00:00"); return t }()),
			LastModifiedBy:     to.Ptr("foo@contoso.com"),
			LastModifiedByType: to.Ptr(armappconfiguration.CreatedByTypeUser),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.ConfigurationStore) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.ConfigurationStore)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/ConfigurationStoresUpdateWithIdentity.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestConfigurationStores_ListKeys() {
	ctx := context.Background()
	// From example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/ConfigurationStoresListKeys.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ConfigurationStores_ListKeys"},
	})
	client, err := armappconfiguration.NewConfigurationStoresClient("c80fb759-c965-4c6a-9110-9b2b2d038882", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListKeysPager("myResourceGroup", "contoso", &armappconfiguration.ConfigurationStoresClientListKeysOptions{SkipToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/ConfigurationStoresListKeys.json")
		// Response check
		pagerExampleRes := armappconfiguration.APIKeyListResult{
			Value: []*armappconfiguration.APIKey{
				{
					Name:             to.Ptr("Primary"),
					ConnectionString: to.Ptr("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"),
					ID:               to.Ptr("439AD01B4BE67DB1"),
					LastModified:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:54+00:00"); return t }()),
					ReadOnly:         to.Ptr(false),
					Value:            to.Ptr("000000000000000000000000000000000000000000000000000000"),
				},
				{
					Name:             to.Ptr("Secondary"),
					ConnectionString: to.Ptr("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"),
					ID:               to.Ptr("CB45E100456857B9"),
					LastModified:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:54+00:00"); return t }()),
					ReadOnly:         to.Ptr(false),
					Value:            to.Ptr("000000000000000000000000000000000000000000000000000000"),
				},
				{
					Name:             to.Ptr("Primary Read Only"),
					ConnectionString: to.Ptr("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"),
					ID:               to.Ptr("B3AC55B7E71431A9"),
					LastModified:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:54+00:00"); return t }()),
					ReadOnly:         to.Ptr(true),
					Value:            to.Ptr("000000000000000000000000000000000000000000000000000000"),
				},
				{
					Name:             to.Ptr("Secondary Read Only"),
					ConnectionString: to.Ptr("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"),
					ID:               to.Ptr("E2AF6A9A89DCC177"),
					LastModified:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:54+00:00"); return t }()),
					ReadOnly:         to.Ptr(true),
					Value:            to.Ptr("000000000000000000000000000000000000000000000000000000"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.APIKeyListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.APIKeyListResult)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/ConfigurationStoresListKeys.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestConfigurationStores_RegenerateKey() {
	ctx := context.Background()
	// From example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/ConfigurationStoresRegenerateKey.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ConfigurationStores_RegenerateKey"},
	})
	client, err := armappconfiguration.NewConfigurationStoresClient("c80fb759-c965-4c6a-9110-9b2b2d038882", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.RegenerateKey(ctx, "myResourceGroup", "contoso", armappconfiguration.RegenerateKeyParameters{
		ID: to.Ptr("439AD01B4BE67DB1"),
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/ConfigurationStoresRegenerateKey.json")
	// Response check
	exampleRes := armappconfiguration.APIKey{
		Name:             to.Ptr("Primary"),
		ConnectionString: to.Ptr("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"),
		ID:               to.Ptr("439AD01B4BE67DB1"),
		LastModified:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-26T22:59:24.2370906+00:00"); return t }()),
		ReadOnly:         to.Ptr(false),
		Value:            to.Ptr("000000000000000000000000000000000000000000000000000000"),
	}
	if !reflect.DeepEqual(exampleRes, res.APIKey) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.APIKey)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/ConfigurationStoresRegenerateKey.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestConfigurationStores_ListDeleted() {
	ctx := context.Background()
	// From example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/DeletedConfigurationStoresList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DeletedConfigurationStores_List"},
	})
	client, err := armappconfiguration.NewConfigurationStoresClient("c80fb759-c965-4c6a-9110-9b2b2d038882", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListDeletedPager(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/DeletedConfigurationStoresList.json")
		// Response check
		pagerExampleRes := armappconfiguration.DeletedConfigurationStoreListResult{
			Value: []*armappconfiguration.DeletedConfigurationStore{
				{
					Name: to.Ptr("contoso"),
					Type: to.Ptr("Microsoft.AppConfiguration/deletedConfigurationStores"),
					ID:   to.Ptr("/subscriptions/c80fb759-c965-4c6a-9110-9b2b2d038882/providers/Microsoft.AppConfiguration/locations/westus/deletedConfigurationStores/contoso"),
					Properties: &armappconfiguration.DeletedConfigurationStoreProperties{
						ConfigurationStoreID:   to.Ptr("/subscriptions/c80fb759-c965-4c6a-9110-9b2b2d038882/resourceGroups/myResourceGroup/providers/Microsoft.AppConfiguration/configurationStores/contoso"),
						DeletionDate:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-01-01T00:00:59Z"); return t }()),
						Location:               to.Ptr("westus"),
						PurgeProtectionEnabled: to.Ptr(true),
						ScheduledPurgeDate:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T00:00:59Z"); return t }()),
						Tags:                   map[string]*string{},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DeletedConfigurationStoreListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DeletedConfigurationStoreListResult)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/DeletedConfigurationStoresList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestConfigurationStores_GetDeleted() {
	ctx := context.Background()
	// From example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/DeletedConfigurationStoresGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DeletedConfigurationStores_Get"},
	})
	client, err := armappconfiguration.NewConfigurationStoresClient("c80fb759-c965-4c6a-9110-9b2b2d038882", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.GetDeleted(ctx, "westus", "contoso", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/DeletedConfigurationStoresGet.json")
	// Response check
	exampleRes := armappconfiguration.DeletedConfigurationStore{
		Name: to.Ptr("contoso"),
		Type: to.Ptr("Microsoft.AppConfiguration/deletedConfigurationStores"),
		ID:   to.Ptr("/subscriptions/c80fb759-c965-4c6a-9110-9b2b2d038882/providers/Microsoft.AppConfiguration/locations/westus/deletedConfigurationStores/contoso"),
		Properties: &armappconfiguration.DeletedConfigurationStoreProperties{
			ConfigurationStoreID:   to.Ptr("/subscriptions/c80fb759-c965-4c6a-9110-9b2b2d038882/resourceGroups/myResourceGroup/providers/Microsoft.AppConfiguration/configurationStores/contoso"),
			DeletionDate:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-01-01T00:00:59Z"); return t }()),
			Location:               to.Ptr("westus"),
			PurgeProtectionEnabled: to.Ptr(true),
			ScheduledPurgeDate:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T00:00:59Z"); return t }()),
			Tags:                   map[string]*string{},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.DeletedConfigurationStore) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.DeletedConfigurationStore)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/DeletedConfigurationStoresGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestConfigurationStores_PurgeDeleted() {
	ctx := context.Background()
	// From example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/DeletedConfigurationStoresPurge.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Purge a deleted configuration store"},
	})
	client, err := armappconfiguration.NewConfigurationStoresClient("c80fb759-c965-4c6a-9110-9b2b2d038882", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginPurgeDeleted(ctx, "westus", "contoso", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/DeletedConfigurationStoresPurge.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/DeletedConfigurationStoresPurge.json")
}

func (testsuite *MockTestSuite) TestOperations_CheckNameAvailability() {
	ctx := context.Background()
	// From example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/CheckNameAvailable.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ConfigurationStores_CheckNameAvailable"},
	})
	client, err := armappconfiguration.NewOperationsClient("c80fb759-c965-4c6a-9110-9b2b2d038882", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.CheckNameAvailability(ctx, armappconfiguration.CheckNameAvailabilityParameters{
		Name: to.Ptr("contoso"),
		Type: to.Ptr(armappconfiguration.ConfigurationResourceTypeMicrosoftAppConfigurationConfigurationStores),
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/CheckNameAvailable.json")
	// Response check
	exampleRes := armappconfiguration.NameAvailabilityStatus{
		Message:       to.Ptr("The specified name is available."),
		NameAvailable: to.Ptr(true),
	}
	if !reflect.DeepEqual(exampleRes, res.NameAvailabilityStatus) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.NameAvailabilityStatus)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/CheckNameAvailable.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/CheckNameNotAvailable.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ConfigurationStores_CheckNameNotAvailable"},
	})
	client, err = armappconfiguration.NewOperationsClient("c80fb759-c965-4c6a-9110-9b2b2d038882", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err = client.CheckNameAvailability(ctx, armappconfiguration.CheckNameAvailabilityParameters{
		Name: to.Ptr("contoso"),
		Type: to.Ptr(armappconfiguration.ConfigurationResourceTypeMicrosoftAppConfigurationConfigurationStores),
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/CheckNameNotAvailable.json")
	// Response check
	exampleRes = armappconfiguration.NameAvailabilityStatus{
		Message:       to.Ptr("The specified name is already in use."),
		NameAvailable: to.Ptr(false),
		Reason:        to.Ptr("AlreadyExists"),
	}
	if !reflect.DeepEqual(exampleRes, res.NameAvailabilityStatus) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.NameAvailabilityStatus)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/CheckNameNotAvailable.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestOperations_List() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestOperations_RegionalCheckNameAvailability() {
	ctx := context.Background()
	// From example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/RegionalCheckNameAvailable.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ConfigurationStores_CheckNameAvailable"},
	})
	client, err := armappconfiguration.NewOperationsClient("c80fb759-c965-4c6a-9110-9b2b2d038882", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.RegionalCheckNameAvailability(ctx, "westus", armappconfiguration.CheckNameAvailabilityParameters{
		Name: to.Ptr("contoso"),
		Type: to.Ptr(armappconfiguration.ConfigurationResourceTypeMicrosoftAppConfigurationConfigurationStores),
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/RegionalCheckNameAvailable.json")
	// Response check
	exampleRes := armappconfiguration.NameAvailabilityStatus{
		Message:       to.Ptr("The specified name is available."),
		NameAvailable: to.Ptr(true),
	}
	if !reflect.DeepEqual(exampleRes, res.NameAvailabilityStatus) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.NameAvailabilityStatus)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/RegionalCheckNameAvailable.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/RegionalCheckNameNotAvailable.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ConfigurationStores_CheckNameNotAvailable"},
	})
	client, err = armappconfiguration.NewOperationsClient("c80fb759-c965-4c6a-9110-9b2b2d038882", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err = client.RegionalCheckNameAvailability(ctx, "westus", armappconfiguration.CheckNameAvailabilityParameters{
		Name: to.Ptr("contoso"),
		Type: to.Ptr(armappconfiguration.ConfigurationResourceTypeMicrosoftAppConfigurationConfigurationStores),
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/RegionalCheckNameNotAvailable.json")
	// Response check
	exampleRes = armappconfiguration.NameAvailabilityStatus{
		Message:       to.Ptr("The specified name is already in use."),
		NameAvailable: to.Ptr(false),
		Reason:        to.Ptr("AlreadyExists"),
	}
	if !reflect.DeepEqual(exampleRes, res.NameAvailabilityStatus) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.NameAvailabilityStatus)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/RegionalCheckNameNotAvailable.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestPrivateEndpointConnections_ListByConfigurationStore() {
	ctx := context.Background()
	// From example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/ConfigurationStoresListPrivateEndpointConnections.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnection_List"},
	})
	client, err := armappconfiguration.NewPrivateEndpointConnectionsClient("c80fb759-c965-4c6a-9110-9b2b2d038882", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListByConfigurationStorePager("myResourceGroup", "contoso", nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/ConfigurationStoresListPrivateEndpointConnections.json")
		// Response check
		pagerExampleRes := armappconfiguration.PrivateEndpointConnectionListResult{
			Value: []*armappconfiguration.PrivateEndpointConnection{
				{
					Name: to.Ptr("myConnection"),
					Type: to.Ptr("Microsoft.AppConfiguration/configurationStores/privateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/c80fb759-c965-4c6a-9110-9b2b2d038882/resourceGroups/myResourceGroup/providers/Microsoft.AppConfiguration/configurationStores/contoso/privateEndpointConnections/myConnection"),
					Properties: &armappconfiguration.PrivateEndpointConnectionProperties{
						PrivateEndpoint: &armappconfiguration.PrivateEndpoint{
							ID: to.Ptr("/subscriptions/c80fb759-c965-4c6a-9110-9b2b2d038882/resourceGroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/peexample01"),
						},
						PrivateLinkServiceConnectionState: &armappconfiguration.PrivateLinkServiceConnectionState{
							Description:     to.Ptr("Auto-Approved"),
							ActionsRequired: to.Ptr(armappconfiguration.ActionsRequiredNone),
							Status:          to.Ptr(armappconfiguration.ConnectionStatusApproved),
						},
						ProvisioningState: to.Ptr(armappconfiguration.ProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateEndpointConnectionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateEndpointConnectionListResult)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/ConfigurationStoresListPrivateEndpointConnections.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestPrivateEndpointConnections_Get() {
	ctx := context.Background()
	// From example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/ConfigurationStoresGetPrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnection_GetConnection"},
	})
	client, err := armappconfiguration.NewPrivateEndpointConnectionsClient("c80fb759-c965-4c6a-9110-9b2b2d038882", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.Get(ctx, "myResourceGroup", "contoso", "myConnection", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/ConfigurationStoresGetPrivateEndpointConnection.json")
	// Response check
	exampleRes := armappconfiguration.PrivateEndpointConnection{
		Name: to.Ptr("myConnection"),
		Type: to.Ptr("Microsoft.AppConfiguration/configurationStores/privateEndpointConnections"),
		ID:   to.Ptr("/subscriptions/c80fb759-c965-4c6a-9110-9b2b2d038882/resourceGroups/myResourceGroup/providers/Microsoft.AppConfiguration/configurationStores/contoso/privateEndpointConnections/myConnection"),
		Properties: &armappconfiguration.PrivateEndpointConnectionProperties{
			PrivateEndpoint: &armappconfiguration.PrivateEndpoint{
				ID: to.Ptr("/subscriptions/c80fb759-c965-4c6a-9110-9b2b2d038882/resourceGroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/peexample01"),
			},
			PrivateLinkServiceConnectionState: &armappconfiguration.PrivateLinkServiceConnectionState{
				Description:     to.Ptr("Auto-Approved"),
				ActionsRequired: to.Ptr(armappconfiguration.ActionsRequiredNone),
				Status:          to.Ptr(armappconfiguration.ConnectionStatusApproved),
			},
			ProvisioningState: to.Ptr(armappconfiguration.ProvisioningStateSucceeded),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/ConfigurationStoresGetPrivateEndpointConnection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestPrivateEndpointConnections_CreateOrUpdate() {
	ctx := context.Background()
	// From example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/ConfigurationStoresCreatePrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnection_CreateOrUpdate"},
	})
	client, err := armappconfiguration.NewPrivateEndpointConnectionsClient("c80fb759-c965-4c6a-9110-9b2b2d038882", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginCreateOrUpdate(ctx, "myResourceGroup", "contoso", "myConnection", armappconfiguration.PrivateEndpointConnection{
		Properties: &armappconfiguration.PrivateEndpointConnectionProperties{
			PrivateLinkServiceConnectionState: &armappconfiguration.PrivateLinkServiceConnectionState{
				Description: to.Ptr("Auto-Approved"),
				Status:      to.Ptr(armappconfiguration.ConnectionStatusApproved),
			},
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/ConfigurationStoresCreatePrivateEndpointConnection.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/ConfigurationStoresCreatePrivateEndpointConnection.json")
	// Response check
	exampleRes := armappconfiguration.PrivateEndpointConnection{
		Name: to.Ptr("myConnection"),
		Type: to.Ptr("Microsoft.AppConfiguration/configurationStores/privateEndpointConnections"),
		ID:   to.Ptr("/subscriptions/c80fb759-c965-4c6a-9110-9b2b2d038882/resourceGroups/myResourceGroup/providers/Microsoft.AppConfiguration/configurationStores/contoso/privateEndpointConnections/myConnection"),
		Properties: &armappconfiguration.PrivateEndpointConnectionProperties{
			PrivateEndpoint: &armappconfiguration.PrivateEndpoint{
				ID: to.Ptr("/subscriptions/c80fb759-c965-4c6a-9110-9b2b2d038882/resourceGroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/peexample01"),
			},
			PrivateLinkServiceConnectionState: &armappconfiguration.PrivateLinkServiceConnectionState{
				Description:     to.Ptr("Auto-Approved"),
				ActionsRequired: to.Ptr(armappconfiguration.ActionsRequiredNone),
				Status:          to.Ptr(armappconfiguration.ConnectionStatusApproved),
			},
			ProvisioningState: to.Ptr(armappconfiguration.ProvisioningStateSucceeded),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/ConfigurationStoresCreatePrivateEndpointConnection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestPrivateEndpointConnections_Delete() {
	ctx := context.Background()
	// From example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/ConfigurationStoresDeletePrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnections_Delete"},
	})
	client, err := armappconfiguration.NewPrivateEndpointConnectionsClient("c80fb759-c965-4c6a-9110-9b2b2d038882", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginDelete(ctx, "myResourceGroup", "contoso", "myConnection", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/ConfigurationStoresDeletePrivateEndpointConnection.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/ConfigurationStoresDeletePrivateEndpointConnection.json")
}

func (testsuite *MockTestSuite) TestPrivateLinkResources_ListByConfigurationStore() {
	ctx := context.Background()
	// From example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/PrivateLinkResourcesListByConfigurationStore.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateLinkResources_ListGroupIds"},
	})
	client, err := armappconfiguration.NewPrivateLinkResourcesClient("c80fb759-c965-4c6a-9110-9b2b2d038882", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListByConfigurationStorePager("myResourceGroup", "contoso", nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/PrivateLinkResourcesListByConfigurationStore.json")
		// Response check
		pagerExampleRes := armappconfiguration.PrivateLinkResourceListResult{
			Value: []*armappconfiguration.PrivateLinkResource{
				{
					Name: to.Ptr("configurationStores"),
					Type: to.Ptr("Microsoft.AppConfiguraiton/configurationStores/privateLinkResources"),
					ID:   to.Ptr("/subscriptions/c80fb759-c965-4c6a-9110-9b2b2d038882/resourceGroups/myResourceGroup/providers/Microsoft.AppConfiguration/configurationStores/contoso/privateLinkResources/configurationStores"),
					Properties: &armappconfiguration.PrivateLinkResourceProperties{
						GroupID: to.Ptr("configurationStores"),
						RequiredMembers: []*string{
							to.Ptr("configurationStores")},
						RequiredZoneNames: []*string{
							to.Ptr("privatelink.azconfig.io")},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateLinkResourceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateLinkResourceListResult)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/PrivateLinkResourcesListByConfigurationStore.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestPrivateLinkResources_Get() {
	ctx := context.Background()
	// From example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/PrivateLinkResourceGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateLinkResources_Get"},
	})
	client, err := armappconfiguration.NewPrivateLinkResourcesClient("c80fb759-c965-4c6a-9110-9b2b2d038882", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.Get(ctx, "myResourceGroup", "contoso", "configurationStores", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/PrivateLinkResourceGet.json")
	// Response check
	exampleRes := armappconfiguration.PrivateLinkResource{
		Name: to.Ptr("configurationStores"),
		Type: to.Ptr("Microsoft.AppConfiguraiton/configurationStores/privateLinkResources"),
		ID:   to.Ptr("/subscriptions/c80fb759-c965-4c6a-9110-9b2b2d038882/resourceGroups/myResourceGroup/providers/Microsoft.AppConfiguration/configurationStores/contoso/privateLinkResources/configurationStores"),
		Properties: &armappconfiguration.PrivateLinkResourceProperties{
			GroupID: to.Ptr("configurationStores"),
			RequiredMembers: []*string{
				to.Ptr("configurationStores")},
			RequiredZoneNames: []*string{
				to.Ptr("privatelink.azconfig.io")},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.PrivateLinkResource) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.PrivateLinkResource)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/PrivateLinkResourceGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestKeyValues_ListByConfigurationStore() {
	ctx := context.Background()
	// From example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/ConfigurationStoresListKeyValues.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KeyValues_ListByConfigurationStore"},
	})
	client, err := armappconfiguration.NewKeyValuesClient("c80fb759-c965-4c6a-9110-9b2b2d038882", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListByConfigurationStorePager("myResourceGroup", "contoso", &armappconfiguration.KeyValuesClientListByConfigurationStoreOptions{SkipToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/ConfigurationStoresListKeyValues.json")
		// Response check
		pagerExampleRes := armappconfiguration.KeyValueListResult{
			Value: []*armappconfiguration.KeyValue{
				{
					Name: to.Ptr("myKey$myLabel"),
					Type: to.Ptr("Microsoft.AppConfiguration/configurationStores/keyValues"),
					ID:   to.Ptr("/subscriptions/c80fb759-c965-4c6a-9110-9b2b2d038882/resourceGroups/myResourceGroup/providers/Microsoft.AppConfiguration/configurationStores/contoso/keyValues/myKey$myLabel"),
					Properties: &armappconfiguration.KeyValueProperties{
						ContentType:  to.Ptr(""),
						ETag:         to.Ptr("IhDxoa8VkXxPsYsemBlxvV0d5fp"),
						Key:          to.Ptr("myKey"),
						Label:        to.Ptr("myLabel"),
						LastModified: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-23T06:42:24+00:00"); return t }()),
						Locked:       to.Ptr(false),
						Tags: map[string]*string{
							"tag1": to.Ptr("tagValue1"),
							"tag2": to.Ptr("tagValue2"),
						},
						Value: to.Ptr("myValue"),
					},
				},
				{
					Name: to.Ptr("myKey2$myLabel2"),
					Type: to.Ptr("Microsoft.AppConfiguration/configurationStores/keyValues"),
					ID:   to.Ptr("/subscriptions/c80fb759-c965-4c6a-9110-9b2b2d038882/resourceGroups/myResourceGroup/providers/Microsoft.AppConfiguration/configurationStores/contoso/keyValues/myKey2$myLabel2"),
					Properties: &armappconfiguration.KeyValueProperties{
						ContentType:  to.Ptr(""),
						ETag:         to.Ptr("IfDxoa8VkXxPsYsemBlxvV0d5fp"),
						Key:          to.Ptr("myKey2"),
						Label:        to.Ptr("myLabel2"),
						LastModified: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-23T06:42:24+00:00"); return t }()),
						Locked:       to.Ptr(false),
						Tags: map[string]*string{
							"tag1": to.Ptr("tagValue1"),
							"tag2": to.Ptr("tagValue2"),
						},
						Value: to.Ptr("myValue"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.KeyValueListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.KeyValueListResult)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/ConfigurationStoresListKeyValues.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestKeyValues_Get() {
	ctx := context.Background()
	// From example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/ConfigurationStoresGetKeyValue.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KeyValues_Get"},
	})
	client, err := armappconfiguration.NewKeyValuesClient("c80fb759-c965-4c6a-9110-9b2b2d038882", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.Get(ctx, "myResourceGroup", "contoso", "myKey$myLabel", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/ConfigurationStoresGetKeyValue.json")
	// Response check
	exampleRes := armappconfiguration.KeyValue{
		Name: to.Ptr("myKey$myLabel"),
		Type: to.Ptr("Microsoft.AppConfiguration/configurationStores/keyValues"),
		ID:   to.Ptr("/subscriptions/c80fb759-c965-4c6a-9110-9b2b2d038882/resourceGroups/myResourceGroup/providers/Microsoft.AppConfiguration/configurationStores/contoso/keyValues/myKey$myLabel"),
		Properties: &armappconfiguration.KeyValueProperties{
			ContentType:  to.Ptr(""),
			ETag:         to.Ptr("IhDxoa8VkXxPsYsemBlxvV0d5fp"),
			Key:          to.Ptr("myKey"),
			Label:        to.Ptr("myLabel"),
			LastModified: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-23T06:42:24+00:00"); return t }()),
			Locked:       to.Ptr(false),
			Tags: map[string]*string{
				"tag1": to.Ptr("tagValue1"),
				"tag2": to.Ptr("tagValue2"),
			},
			Value: to.Ptr("myValue"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.KeyValue) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.KeyValue)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/ConfigurationStoresGetKeyValue.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestKeyValues_CreateOrUpdate() {
	ctx := context.Background()
	// From example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/ConfigurationStoresCreateKeyValue.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KeyValues_CreateOrUpdate"},
	})
	client, err := armappconfiguration.NewKeyValuesClient("c80fb759-c965-4c6a-9110-9b2b2d038882", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.CreateOrUpdate(ctx, "myResourceGroup", "contoso", "myKey$myLabel", armappconfiguration.KeyValue{
		Properties: &armappconfiguration.KeyValueProperties{
			Tags: map[string]*string{
				"tag1": to.Ptr("tagValue1"),
				"tag2": to.Ptr("tagValue2"),
			},
			Value: to.Ptr("myValue"),
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/ConfigurationStoresCreateKeyValue.json")
	// Response check
	exampleRes := armappconfiguration.KeyValue{
		Name: to.Ptr("myKey$myLabel"),
		Type: to.Ptr("Microsoft.AppConfiguration/configurationStores/keyValues"),
		ID:   to.Ptr("/subscriptions/c80fb759-c965-4c6a-9110-9b2b2d038882/resourceGroups/myResourceGroup/providers/Microsoft.AppConfiguration/configurationStores/contoso/keyValues/myKey$myLabel"),
		Properties: &armappconfiguration.KeyValueProperties{
			ContentType:  to.Ptr(""),
			ETag:         to.Ptr("IhDxoa8VkXxPsYsemBlxvV0d5fp"),
			Key:          to.Ptr("myKey"),
			Label:        to.Ptr("myLabel"),
			LastModified: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-23T06:42:24+00:00"); return t }()),
			Locked:       to.Ptr(false),
			Tags: map[string]*string{
				"tag1": to.Ptr("tagValue1"),
				"tag2": to.Ptr("tagValue2"),
			},
			Value: to.Ptr("myValue"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.KeyValue) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.KeyValue)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/ConfigurationStoresCreateKeyValue.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestKeyValues_Delete() {
	ctx := context.Background()
	// From example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/ConfigurationStoresDeleteKeyValue.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KeyValues_Delete"},
	})
	client, err := armappconfiguration.NewKeyValuesClient("c80fb759-c965-4c6a-9110-9b2b2d038882", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginDelete(ctx, "myResourceGroup", "contoso", "myKey$myLabel", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/ConfigurationStoresDeleteKeyValue.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2022-05-01/examples/ConfigurationStoresDeleteKeyValue.json")
}

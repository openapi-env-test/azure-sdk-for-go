//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armsingularity

import "encoding/json"

func unmarshalAdlsMountOptionsBaseClassification(rawMsg json.RawMessage) (AdlsMountOptionsBaseClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var m map[string]interface{}
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b AdlsMountOptionsBaseClassification
	switch m["kind"] {
	case string(MountOptionsKindFuse):
		b = &AdlsFuseMountOptions{}
	case string(MountOptionsKindInterception):
		b = &AdlsInterceptionMountOptions{}
	default:
		b = &AdlsMountOptionsBase{}
	}
	return b, json.Unmarshal(rawMsg, b)
}

func unmarshalBlobMountOptionsBaseClassification(rawMsg json.RawMessage) (BlobMountOptionsBaseClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var m map[string]interface{}
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b BlobMountOptionsBaseClassification
	switch m["kind"] {
	case string(MountOptionsKindFuse):
		b = &BlobFuseMountOptions{}
	case string(MountOptionsKindInterception):
		b = &BlobInterceptionMountOptions{}
	default:
		b = &BlobMountOptionsBase{}
	}
	return b, json.Unmarshal(rawMsg, b)
}

func unmarshalContainerImageBaseClassification(rawMsg json.RawMessage) (ContainerImageBaseClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var m map[string]interface{}
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b ContainerImageBaseClassification
	switch m["kind"] {
	case string(ContainerImageKindCustom):
		b = &CustomContainerImage{}
	case string(ContainerImageKindPlatform):
		b = &PlatformContainerImage{}
	default:
		b = &ContainerImageBase{}
	}
	return b, json.Unmarshal(rawMsg, b)
}

func unmarshalNetworkPropertiesBaseClassification(rawMsg json.RawMessage) (NetworkPropertiesBaseClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var m map[string]interface{}
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b NetworkPropertiesBaseClassification
	switch m["kind"] {
	case string(NetworkKindDelegatedSubnet):
		b = &DelegatedSubnetProperties{}
	default:
		b = &NetworkPropertiesBase{}
	}
	return b, json.Unmarshal(rawMsg, b)
}

func unmarshalProbeSettingClassification(rawMsg json.RawMessage) (ProbeSettingClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var m map[string]interface{}
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b ProbeSettingClassification
	switch m["kind"] {
	case string(ProbeSettingKindExec):
		b = &ExecProbeSetting{}
	case string(ProbeSettingKindHTTP):
		b = &HTTPProbeSetting{}
	default:
		b = &ProbeSetting{}
	}
	return b, json.Unmarshal(rawMsg, b)
}

func unmarshalStorageCachePropertiesBaseClassification(rawMsg json.RawMessage) (StorageCachePropertiesBaseClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var m map[string]interface{}
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b StorageCachePropertiesBaseClassification
	switch m["kind"] {
	case string(StorageCacheKindADLS):
		b = &AdlsStorageCacheProperties{}
	case string(StorageCacheKindBlob):
		b = &BlobStorageCacheProperties{}
	case string(StorageCacheKindNFS):
		b = &NfsStorageCacheProperties{}
	default:
		b = &StorageCachePropertiesBase{}
	}
	return b, json.Unmarshal(rawMsg, b)
}

func unmarshalStorageSourceBaseClassification(rawMsg json.RawMessage) (StorageSourceBaseClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var m map[string]interface{}
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b StorageSourceBaseClassification
	switch m["kind"] {
	case string(StorageSourceKindAzureAISupercomputerStorage):
		b = &StorageSourceAzureAISupercomputerStorage{}
	case string(StorageSourceKindAzureBlobStorage):
		b = &StorageSourceAzureBlob{}
	default:
		b = &StorageSourceBase{}
	}
	return b, json.Unmarshal(rawMsg, b)
}

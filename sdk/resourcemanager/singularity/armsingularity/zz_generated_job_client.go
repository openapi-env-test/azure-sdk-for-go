//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armsingularity

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// JobClient contains the methods for the Job group.
// Don't use this type directly, use NewJobClient() instead.
type JobClient struct {
	host           string
	subscriptionID string
	pl             runtime.Pipeline
}

// NewJobClient creates a new instance of JobClient with the specified values.
// subscriptionID - The customer subscription identifier.
// credential - used to authorize requests. Usually a credential from azidentity.
// options - pass nil to accept the default values.
func NewJobClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) *JobClient {
	cp := arm.ClientOptions{}
	if options != nil {
		cp = *options
	}
	if len(cp.Endpoint) == 0 {
		cp.Endpoint = arm.AzurePublicCloud
	}
	client := &JobClient{
		subscriptionID: subscriptionID,
		host:           string(cp.Endpoint),
		pl:             armruntime.NewPipeline(moduleName, moduleVersion, credential, runtime.PipelineOptions{}, &cp),
	}
	return client
}

// BeginApprove - This action can be used by the account admin to approve a job manually, which is otherwise blocked by insufficient
// user-level quota (represented by Group Policy).
// If the operation fails it returns an *azcore.ResponseError type.
// resourceGroupName - The name of the resource group within the user's subscription.
// accountName - The name of the Singularity account.
// jobName - The name of the Singularity job.
// options - JobClientBeginApproveOptions contains the optional parameters for the JobClient.BeginApprove method.
func (client *JobClient) BeginApprove(ctx context.Context, resourceGroupName string, accountName string, jobName string, options *JobClientBeginApproveOptions) (JobClientApprovePollerResponse, error) {
	resp, err := client.approve(ctx, resourceGroupName, accountName, jobName, options)
	if err != nil {
		return JobClientApprovePollerResponse{}, err
	}
	result := JobClientApprovePollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("JobClient.Approve", "", resp, client.pl)
	if err != nil {
		return JobClientApprovePollerResponse{}, err
	}
	result.Poller = &JobClientApprovePoller{
		pt: pt,
	}
	return result, nil
}

// Approve - This action can be used by the account admin to approve a job manually, which is otherwise blocked by insufficient
// user-level quota (represented by Group Policy).
// If the operation fails it returns an *azcore.ResponseError type.
func (client *JobClient) approve(ctx context.Context, resourceGroupName string, accountName string, jobName string, options *JobClientBeginApproveOptions) (*http.Response, error) {
	req, err := client.approveCreateRequest(ctx, resourceGroupName, accountName, jobName, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// approveCreateRequest creates the Approve request.
func (client *JobClient) approveCreateRequest(ctx context.Context, resourceGroupName string, accountName string, jobName string, options *JobClientBeginApproveOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Singularity/accounts/{accountName}/jobs/{jobName}/approve"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", resourceGroupName)
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", accountName)
	urlPath = strings.ReplaceAll(urlPath, "{jobName}", jobName)
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	if options != nil && options.Body != nil {
		return req, runtime.MarshalAsJSON(req, *options.Body)
	}
	return req, nil
}

// BeginCancel - Cancel the job operation without deleting the resource.
// If the operation fails it returns an *azcore.ResponseError type.
// resourceGroupName - The name of the resource group within the user's subscription.
// accountName - The name of the Singularity account.
// jobName - The name of the Singularity job.
// options - JobClientBeginCancelOptions contains the optional parameters for the JobClient.BeginCancel method.
func (client *JobClient) BeginCancel(ctx context.Context, resourceGroupName string, accountName string, jobName string, options *JobClientBeginCancelOptions) (JobClientCancelPollerResponse, error) {
	resp, err := client.cancel(ctx, resourceGroupName, accountName, jobName, options)
	if err != nil {
		return JobClientCancelPollerResponse{}, err
	}
	result := JobClientCancelPollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("JobClient.Cancel", "", resp, client.pl)
	if err != nil {
		return JobClientCancelPollerResponse{}, err
	}
	result.Poller = &JobClientCancelPoller{
		pt: pt,
	}
	return result, nil
}

// Cancel - Cancel the job operation without deleting the resource.
// If the operation fails it returns an *azcore.ResponseError type.
func (client *JobClient) cancel(ctx context.Context, resourceGroupName string, accountName string, jobName string, options *JobClientBeginCancelOptions) (*http.Response, error) {
	req, err := client.cancelCreateRequest(ctx, resourceGroupName, accountName, jobName, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// cancelCreateRequest creates the Cancel request.
func (client *JobClient) cancelCreateRequest(ctx context.Context, resourceGroupName string, accountName string, jobName string, options *JobClientBeginCancelOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Singularity/accounts/{accountName}/jobs/{jobName}/cancel"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", resourceGroupName)
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", accountName)
	urlPath = strings.ReplaceAll(urlPath, "{jobName}", jobName)
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	if options != nil && options.Body != nil {
		return req, runtime.MarshalAsJSON(req, *options.Body)
	}
	return req, nil
}

// BeginCreateOrUpdate - Creates a job resource with the specified name, description and properties. If a job with the same
// name exists, then it is updated with the specified description and properties.
// If the operation fails it returns an *azcore.ResponseError type.
// resourceGroupName - The name of the resource group within the user's subscription.
// accountName - The name of the Singularity account.
// jobName - The name of the Singularity job.
// body - Singularity job information.
// options - JobClientBeginCreateOrUpdateOptions contains the optional parameters for the JobClient.BeginCreateOrUpdate method.
func (client *JobClient) BeginCreateOrUpdate(ctx context.Context, resourceGroupName string, accountName string, jobName string, body JobResourceDescription, options *JobClientBeginCreateOrUpdateOptions) (JobClientCreateOrUpdatePollerResponse, error) {
	resp, err := client.createOrUpdate(ctx, resourceGroupName, accountName, jobName, body, options)
	if err != nil {
		return JobClientCreateOrUpdatePollerResponse{}, err
	}
	result := JobClientCreateOrUpdatePollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("JobClient.CreateOrUpdate", "", resp, client.pl)
	if err != nil {
		return JobClientCreateOrUpdatePollerResponse{}, err
	}
	result.Poller = &JobClientCreateOrUpdatePoller{
		pt: pt,
	}
	return result, nil
}

// CreateOrUpdate - Creates a job resource with the specified name, description and properties. If a job with the same name
// exists, then it is updated with the specified description and properties.
// If the operation fails it returns an *azcore.ResponseError type.
func (client *JobClient) createOrUpdate(ctx context.Context, resourceGroupName string, accountName string, jobName string, body JobResourceDescription, options *JobClientBeginCreateOrUpdateOptions) (*http.Response, error) {
	req, err := client.createOrUpdateCreateRequest(ctx, resourceGroupName, accountName, jobName, body, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusCreated, http.StatusAccepted) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *JobClient) createOrUpdateCreateRequest(ctx context.Context, resourceGroupName string, accountName string, jobName string, body JobResourceDescription, options *JobClientBeginCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Singularity/accounts/{accountName}/jobs/{jobName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", resourceGroupName)
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", accountName)
	urlPath = strings.ReplaceAll(urlPath, "{jobName}", jobName)
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, body)
}

// BeginCreateSasToken - Creates a Shared Access Signature (SAS) token, that can be used for accessing job resource with the
// protocol specified in the description.
// If the operation fails it returns an *azcore.ResponseError type.
// resourceGroupName - The name of the resource group within the user's subscription.
// accountName - The name of the Singularity account.
// jobName - The name of the Singularity job.
// options - JobClientBeginCreateSasTokenOptions contains the optional parameters for the JobClient.BeginCreateSasToken method.
func (client *JobClient) BeginCreateSasToken(ctx context.Context, resourceGroupName string, accountName string, jobName string, options *JobClientBeginCreateSasTokenOptions) (JobClientCreateSasTokenPollerResponse, error) {
	resp, err := client.createSasToken(ctx, resourceGroupName, accountName, jobName, options)
	if err != nil {
		return JobClientCreateSasTokenPollerResponse{}, err
	}
	result := JobClientCreateSasTokenPollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("JobClient.CreateSasToken", "", resp, client.pl)
	if err != nil {
		return JobClientCreateSasTokenPollerResponse{}, err
	}
	result.Poller = &JobClientCreateSasTokenPoller{
		pt: pt,
	}
	return result, nil
}

// CreateSasToken - Creates a Shared Access Signature (SAS) token, that can be used for accessing job resource with the protocol
// specified in the description.
// If the operation fails it returns an *azcore.ResponseError type.
func (client *JobClient) createSasToken(ctx context.Context, resourceGroupName string, accountName string, jobName string, options *JobClientBeginCreateSasTokenOptions) (*http.Response, error) {
	req, err := client.createSasTokenCreateRequest(ctx, resourceGroupName, accountName, jobName, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusCreated) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// createSasTokenCreateRequest creates the CreateSasToken request.
func (client *JobClient) createSasTokenCreateRequest(ctx context.Context, resourceGroupName string, accountName string, jobName string, options *JobClientBeginCreateSasTokenOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Singularity/accounts/{accountName}/jobs/{jobName}/createsastoken"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", resourceGroupName)
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", accountName)
	urlPath = strings.ReplaceAll(urlPath, "{jobName}", jobName)
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	if options != nil && options.Body != nil {
		return req, runtime.MarshalAsJSON(req, *options.Body)
	}
	return req, nil
}

// BeginDelete - Deletes the job resource identified by the name.
// If the operation fails it returns an *azcore.ResponseError type.
// resourceGroupName - The name of the resource group within the user's subscription.
// accountName - The name of the Singularity account.
// jobName - The name of the Singularity job.
// options - JobClientBeginDeleteOptions contains the optional parameters for the JobClient.BeginDelete method.
func (client *JobClient) BeginDelete(ctx context.Context, resourceGroupName string, accountName string, jobName string, options *JobClientBeginDeleteOptions) (JobClientDeletePollerResponse, error) {
	resp, err := client.deleteOperation(ctx, resourceGroupName, accountName, jobName, options)
	if err != nil {
		return JobClientDeletePollerResponse{}, err
	}
	result := JobClientDeletePollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("JobClient.Delete", "", resp, client.pl)
	if err != nil {
		return JobClientDeletePollerResponse{}, err
	}
	result.Poller = &JobClientDeletePoller{
		pt: pt,
	}
	return result, nil
}

// Delete - Deletes the job resource identified by the name.
// If the operation fails it returns an *azcore.ResponseError type.
func (client *JobClient) deleteOperation(ctx context.Context, resourceGroupName string, accountName string, jobName string, options *JobClientBeginDeleteOptions) (*http.Response, error) {
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, accountName, jobName, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *JobClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, accountName string, jobName string, options *JobClientBeginDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Singularity/accounts/{accountName}/jobs/{jobName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", resourceGroupName)
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", accountName)
	urlPath = strings.ReplaceAll(urlPath, "{jobName}", jobName)
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// Get - Gets the information about the job resource with the given name. The information include the description and other
// properties of the job.
// If the operation fails it returns an *azcore.ResponseError type.
// resourceGroupName - The name of the resource group within the user's subscription.
// accountName - The name of the Singularity account.
// jobName - The name of the Singularity job.
// options - JobClientGetOptions contains the optional parameters for the JobClient.Get method.
func (client *JobClient) Get(ctx context.Context, resourceGroupName string, accountName string, jobName string, options *JobClientGetOptions) (JobClientGetResponse, error) {
	req, err := client.getCreateRequest(ctx, resourceGroupName, accountName, jobName, options)
	if err != nil {
		return JobClientGetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return JobClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return JobClientGetResponse{}, runtime.NewResponseError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *JobClient) getCreateRequest(ctx context.Context, resourceGroupName string, accountName string, jobName string, options *JobClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Singularity/accounts/{accountName}/jobs/{jobName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", resourceGroupName)
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", accountName)
	urlPath = strings.ReplaceAll(urlPath, "{jobName}", jobName)
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *JobClient) getHandleResponse(resp *http.Response) (JobClientGetResponse, error) {
	result := JobClientGetResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.JobResourceDescription); err != nil {
		return JobClientGetResponse{}, err
	}
	return result, nil
}

// ListByAccount - Gets the information about all the job resources in a given account. The information include the description
// and other properties of the job.
// If the operation fails it returns an *azcore.ResponseError type.
// resourceGroupName - The name of the resource group within the user's subscription.
// accountName - The name of the Singularity account.
// options - JobClientListByAccountOptions contains the optional parameters for the JobClient.ListByAccount method.
func (client *JobClient) ListByAccount(resourceGroupName string, accountName string, options *JobClientListByAccountOptions) *JobClientListByAccountPager {
	return &JobClientListByAccountPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listByAccountCreateRequest(ctx, resourceGroupName, accountName, options)
		},
		advancer: func(ctx context.Context, resp JobClientListByAccountResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.JobResourceDescriptionList.NextLink)
		},
	}
}

// listByAccountCreateRequest creates the ListByAccount request.
func (client *JobClient) listByAccountCreateRequest(ctx context.Context, resourceGroupName string, accountName string, options *JobClientListByAccountOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Singularity/accounts/{accountName}/jobs"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", resourceGroupName)
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", accountName)
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	unencodedParams := []string{req.Raw().URL.RawQuery}
	if options != nil && options.ContinuationToken != nil {
		unencodedParams = append(unencodedParams, "continuationToken="+*options.ContinuationToken)
	}
	req.Raw().URL.RawQuery = strings.Join(unencodedParams, "&")
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listByAccountHandleResponse handles the ListByAccount response.
func (client *JobClient) listByAccountHandleResponse(resp *http.Response) (JobClientListByAccountResponse, error) {
	result := JobClientListByAccountResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.JobResourceDescriptionList); err != nil {
		return JobClientListByAccountResponse{}, err
	}
	return result, nil
}

// BeginRemove - Remove job operation is used to delete a job that is associated with a group policy.
// If the operation fails it returns an *azcore.ResponseError type.
// resourceGroupName - The name of the resource group within the user's subscription.
// accountName - The name of the Singularity account.
// jobName - The name of the Singularity job.
// options - JobClientBeginRemoveOptions contains the optional parameters for the JobClient.BeginRemove method.
func (client *JobClient) BeginRemove(ctx context.Context, resourceGroupName string, accountName string, jobName string, options *JobClientBeginRemoveOptions) (JobClientRemovePollerResponse, error) {
	resp, err := client.remove(ctx, resourceGroupName, accountName, jobName, options)
	if err != nil {
		return JobClientRemovePollerResponse{}, err
	}
	result := JobClientRemovePollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("JobClient.Remove", "", resp, client.pl)
	if err != nil {
		return JobClientRemovePollerResponse{}, err
	}
	result.Poller = &JobClientRemovePoller{
		pt: pt,
	}
	return result, nil
}

// Remove - Remove job operation is used to delete a job that is associated with a group policy.
// If the operation fails it returns an *azcore.ResponseError type.
func (client *JobClient) remove(ctx context.Context, resourceGroupName string, accountName string, jobName string, options *JobClientBeginRemoveOptions) (*http.Response, error) {
	req, err := client.removeCreateRequest(ctx, resourceGroupName, accountName, jobName, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// removeCreateRequest creates the Remove request.
func (client *JobClient) removeCreateRequest(ctx context.Context, resourceGroupName string, accountName string, jobName string, options *JobClientBeginRemoveOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Singularity/accounts/{accountName}/jobs/{jobName}/remove"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", resourceGroupName)
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", accountName)
	urlPath = strings.ReplaceAll(urlPath, "{jobName}", jobName)
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	if options != nil && options.Body != nil {
		return req, runtime.MarshalAsJSON(req, *options.Body)
	}
	return req, nil
}

// RenewKey - Renews to the Shared Access Signature (SAS) token singining key for the job. It invalidates all tokens generated
// prior to key rotation
// If the operation fails it returns an *azcore.ResponseError type.
// resourceGroupName - The name of the resource group within the user's subscription.
// accountName - The name of the Singularity account.
// jobName - The name of the Singularity job.
// options - JobClientRenewKeyOptions contains the optional parameters for the JobClient.RenewKey method.
func (client *JobClient) RenewKey(ctx context.Context, resourceGroupName string, accountName string, jobName string, options *JobClientRenewKeyOptions) (JobClientRenewKeyResponse, error) {
	req, err := client.renewKeyCreateRequest(ctx, resourceGroupName, accountName, jobName, options)
	if err != nil {
		return JobClientRenewKeyResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return JobClientRenewKeyResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusCreated) {
		return JobClientRenewKeyResponse{}, runtime.NewResponseError(resp)
	}
	return client.renewKeyHandleResponse(resp)
}

// renewKeyCreateRequest creates the RenewKey request.
func (client *JobClient) renewKeyCreateRequest(ctx context.Context, resourceGroupName string, accountName string, jobName string, options *JobClientRenewKeyOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Singularity/accounts/{accountName}/jobs/{jobName}/renewkey"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", resourceGroupName)
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", accountName)
	urlPath = strings.ReplaceAll(urlPath, "{jobName}", jobName)
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// renewKeyHandleResponse handles the RenewKey response.
func (client *JobClient) renewKeyHandleResponse(resp *http.Response) (JobClientRenewKeyResponse, error) {
	result := JobClientRenewKeyResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.JobSasTokenDescription); err != nil {
		return JobClientRenewKeyResponse{}, err
	}
	return result, nil
}

// BeginResume - Resuming a paused job will attempt to return the job into the running state by reserving quota and scheduling
// execution.
// If the operation fails it returns an *azcore.ResponseError type.
// resourceGroupName - The name of the resource group within the user's subscription.
// accountName - The name of the Singularity account.
// jobName - The name of the Singularity job.
// options - JobClientBeginResumeOptions contains the optional parameters for the JobClient.BeginResume method.
func (client *JobClient) BeginResume(ctx context.Context, resourceGroupName string, accountName string, jobName string, options *JobClientBeginResumeOptions) (JobClientResumePollerResponse, error) {
	resp, err := client.resume(ctx, resourceGroupName, accountName, jobName, options)
	if err != nil {
		return JobClientResumePollerResponse{}, err
	}
	result := JobClientResumePollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("JobClient.Resume", "", resp, client.pl)
	if err != nil {
		return JobClientResumePollerResponse{}, err
	}
	result.Poller = &JobClientResumePoller{
		pt: pt,
	}
	return result, nil
}

// Resume - Resuming a paused job will attempt to return the job into the running state by reserving quota and scheduling
// execution.
// If the operation fails it returns an *azcore.ResponseError type.
func (client *JobClient) resume(ctx context.Context, resourceGroupName string, accountName string, jobName string, options *JobClientBeginResumeOptions) (*http.Response, error) {
	req, err := client.resumeCreateRequest(ctx, resourceGroupName, accountName, jobName, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// resumeCreateRequest creates the Resume request.
func (client *JobClient) resumeCreateRequest(ctx context.Context, resourceGroupName string, accountName string, jobName string, options *JobClientBeginResumeOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Singularity/accounts/{accountName}/jobs/{jobName}/resume"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", resourceGroupName)
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", accountName)
	urlPath = strings.ReplaceAll(urlPath, "{jobName}", jobName)
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	if options != nil && options.Body != nil {
		return req, runtime.MarshalAsJSON(req, *options.Body)
	}
	return req, nil
}

// BeginSuspend - Suspending a job will stop the current execution and release any resources and quota reservations. The job
// will remain in the Suspended state until resumed or deleted.
// If the operation fails it returns an *azcore.ResponseError type.
// resourceGroupName - The name of the resource group within the user's subscription.
// accountName - The name of the Singularity account.
// jobName - The name of the Singularity job.
// options - JobClientBeginSuspendOptions contains the optional parameters for the JobClient.BeginSuspend method.
func (client *JobClient) BeginSuspend(ctx context.Context, resourceGroupName string, accountName string, jobName string, options *JobClientBeginSuspendOptions) (JobClientSuspendPollerResponse, error) {
	resp, err := client.suspend(ctx, resourceGroupName, accountName, jobName, options)
	if err != nil {
		return JobClientSuspendPollerResponse{}, err
	}
	result := JobClientSuspendPollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("JobClient.Suspend", "", resp, client.pl)
	if err != nil {
		return JobClientSuspendPollerResponse{}, err
	}
	result.Poller = &JobClientSuspendPoller{
		pt: pt,
	}
	return result, nil
}

// Suspend - Suspending a job will stop the current execution and release any resources and quota reservations. The job will
// remain in the Suspended state until resumed or deleted.
// If the operation fails it returns an *azcore.ResponseError type.
func (client *JobClient) suspend(ctx context.Context, resourceGroupName string, accountName string, jobName string, options *JobClientBeginSuspendOptions) (*http.Response, error) {
	req, err := client.suspendCreateRequest(ctx, resourceGroupName, accountName, jobName, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// suspendCreateRequest creates the Suspend request.
func (client *JobClient) suspendCreateRequest(ctx context.Context, resourceGroupName string, accountName string, jobName string, options *JobClientBeginSuspendOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Singularity/accounts/{accountName}/jobs/{jobName}/suspend"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", resourceGroupName)
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", accountName)
	urlPath = strings.ReplaceAll(urlPath, "{jobName}", jobName)
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	if options != nil && options.Body != nil {
		return req, runtime.MarshalAsJSON(req, *options.Body)
	}
	return req, nil
}

// BeginUpdate - Updates a job resource with the specified properties. If a job with the same name exists, then it is updated
// with the specified properties. If a job doesn't exist, then a no-content exception will be
// thrown
// If the operation fails it returns an *azcore.ResponseError type.
// resourceGroupName - The name of the resource group within the user's subscription.
// accountName - The name of the Singularity account.
// jobName - The name of the Singularity job.
// body - Singularity job information.
// options - JobClientBeginUpdateOptions contains the optional parameters for the JobClient.BeginUpdate method.
func (client *JobClient) BeginUpdate(ctx context.Context, resourceGroupName string, accountName string, jobName string, body JobResourcePatchDescription, options *JobClientBeginUpdateOptions) (JobClientUpdatePollerResponse, error) {
	resp, err := client.update(ctx, resourceGroupName, accountName, jobName, body, options)
	if err != nil {
		return JobClientUpdatePollerResponse{}, err
	}
	result := JobClientUpdatePollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("JobClient.Update", "", resp, client.pl)
	if err != nil {
		return JobClientUpdatePollerResponse{}, err
	}
	result.Poller = &JobClientUpdatePoller{
		pt: pt,
	}
	return result, nil
}

// Update - Updates a job resource with the specified properties. If a job with the same name exists, then it is updated with
// the specified properties. If a job doesn't exist, then a no-content exception will be
// thrown
// If the operation fails it returns an *azcore.ResponseError type.
func (client *JobClient) update(ctx context.Context, resourceGroupName string, accountName string, jobName string, body JobResourcePatchDescription, options *JobClientBeginUpdateOptions) (*http.Response, error) {
	req, err := client.updateCreateRequest(ctx, resourceGroupName, accountName, jobName, body, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusCreated, http.StatusAccepted) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// updateCreateRequest creates the Update request.
func (client *JobClient) updateCreateRequest(ctx context.Context, resourceGroupName string, accountName string, jobName string, body JobResourcePatchDescription, options *JobClientBeginUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Singularity/accounts/{accountName}/jobs/{jobName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", resourceGroupName)
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", accountName)
	urlPath = strings.ReplaceAll(urlPath, "{jobName}", jobName)
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, body)
}

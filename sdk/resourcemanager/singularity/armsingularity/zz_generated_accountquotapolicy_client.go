//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armsingularity

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// AccountQuotaPolicyClient contains the methods for the AccountQuotaPolicy group.
// Don't use this type directly, use NewAccountQuotaPolicyClient() instead.
type AccountQuotaPolicyClient struct {
	host           string
	subscriptionID string
	pl             runtime.Pipeline
}

// NewAccountQuotaPolicyClient creates a new instance of AccountQuotaPolicyClient with the specified values.
// subscriptionID - The customer subscription identifier.
// credential - used to authorize requests. Usually a credential from azidentity.
// options - pass nil to accept the default values.
func NewAccountQuotaPolicyClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) *AccountQuotaPolicyClient {
	cp := arm.ClientOptions{}
	if options != nil {
		cp = *options
	}
	if len(cp.Endpoint) == 0 {
		cp.Endpoint = arm.AzurePublicCloud
	}
	client := &AccountQuotaPolicyClient{
		subscriptionID: subscriptionID,
		host:           string(cp.Endpoint),
		pl:             armruntime.NewPipeline(moduleName, moduleVersion, credential, runtime.PipelineOptions{}, &cp),
	}
	return client
}

// BeginCreateOrUpdate - Creates an account resource with the specified name, description and properties. If an account resource
// with the same name exists, then it is updated with the specified description and properties.
// Currently the only supported policy name is 'AccountQuotaPolicy'
// If the operation fails it returns an *azcore.ResponseError type.
// resourceGroupName - The name of the resource group within the user's subscription.
// accountName - The name of the Singularity account.
// policyName - The name of the Singularity account quota policy. Should only be Default.
// body - Singularity AccountQuotaPolicy information.
// options - AccountQuotaPolicyClientBeginCreateOrUpdateOptions contains the optional parameters for the AccountQuotaPolicyClient.BeginCreateOrUpdate
// method.
func (client *AccountQuotaPolicyClient) BeginCreateOrUpdate(ctx context.Context, resourceGroupName string, accountName string, policyName string, body AccountQuotaPolicyResourceDescription, options *AccountQuotaPolicyClientBeginCreateOrUpdateOptions) (AccountQuotaPolicyClientCreateOrUpdatePollerResponse, error) {
	resp, err := client.createOrUpdate(ctx, resourceGroupName, accountName, policyName, body, options)
	if err != nil {
		return AccountQuotaPolicyClientCreateOrUpdatePollerResponse{}, err
	}
	result := AccountQuotaPolicyClientCreateOrUpdatePollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("AccountQuotaPolicyClient.CreateOrUpdate", "", resp, client.pl)
	if err != nil {
		return AccountQuotaPolicyClientCreateOrUpdatePollerResponse{}, err
	}
	result.Poller = &AccountQuotaPolicyClientCreateOrUpdatePoller{
		pt: pt,
	}
	return result, nil
}

// CreateOrUpdate - Creates an account resource with the specified name, description and properties. If an account resource
// with the same name exists, then it is updated with the specified description and properties.
// Currently the only supported policy name is 'AccountQuotaPolicy'
// If the operation fails it returns an *azcore.ResponseError type.
func (client *AccountQuotaPolicyClient) createOrUpdate(ctx context.Context, resourceGroupName string, accountName string, policyName string, body AccountQuotaPolicyResourceDescription, options *AccountQuotaPolicyClientBeginCreateOrUpdateOptions) (*http.Response, error) {
	req, err := client.createOrUpdateCreateRequest(ctx, resourceGroupName, accountName, policyName, body, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusCreated, http.StatusAccepted) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *AccountQuotaPolicyClient) createOrUpdateCreateRequest(ctx context.Context, resourceGroupName string, accountName string, policyName string, body AccountQuotaPolicyResourceDescription, options *AccountQuotaPolicyClientBeginCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Singularity/accounts/{accountName}/accountQuotaPolicies/{policyName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", resourceGroupName)
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", accountName)
	urlPath = strings.ReplaceAll(urlPath, "{policyName}", policyName)
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, body)
}

// Get - Gets the information about the account quota policy resource with the given name. The information include the description
// and other properties of the account quota policy.
// If the operation fails it returns an *azcore.ResponseError type.
// resourceGroupName - The name of the resource group within the user's subscription.
// accountName - The name of the Singularity account.
// policyName - The name of the Singularity account quota policy. Should only be Default.
// options - AccountQuotaPolicyClientGetOptions contains the optional parameters for the AccountQuotaPolicyClient.Get method.
func (client *AccountQuotaPolicyClient) Get(ctx context.Context, resourceGroupName string, accountName string, policyName string, options *AccountQuotaPolicyClientGetOptions) (AccountQuotaPolicyClientGetResponse, error) {
	req, err := client.getCreateRequest(ctx, resourceGroupName, accountName, policyName, options)
	if err != nil {
		return AccountQuotaPolicyClientGetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return AccountQuotaPolicyClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return AccountQuotaPolicyClientGetResponse{}, runtime.NewResponseError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *AccountQuotaPolicyClient) getCreateRequest(ctx context.Context, resourceGroupName string, accountName string, policyName string, options *AccountQuotaPolicyClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Singularity/accounts/{accountName}/accountQuotaPolicies/{policyName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", resourceGroupName)
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", accountName)
	urlPath = strings.ReplaceAll(urlPath, "{policyName}", policyName)
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *AccountQuotaPolicyClient) getHandleResponse(resp *http.Response) (AccountQuotaPolicyClientGetResponse, error) {
	result := AccountQuotaPolicyClientGetResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.AccountQuotaPolicyResourceDescription); err != nil {
		return AccountQuotaPolicyClientGetResponse{}, err
	}
	return result, nil
}

// ListByAccount - Gets the information about all account quota policy resources in a given account. The information include
// the description and other properties of the account quota policy.
// If the operation fails it returns an *azcore.ResponseError type.
// resourceGroupName - The name of the resource group within the user's subscription.
// accountName - The name of the Singularity account.
// options - AccountQuotaPolicyClientListByAccountOptions contains the optional parameters for the AccountQuotaPolicyClient.ListByAccount
// method.
func (client *AccountQuotaPolicyClient) ListByAccount(resourceGroupName string, accountName string, options *AccountQuotaPolicyClientListByAccountOptions) *AccountQuotaPolicyClientListByAccountPager {
	return &AccountQuotaPolicyClientListByAccountPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listByAccountCreateRequest(ctx, resourceGroupName, accountName, options)
		},
		advancer: func(ctx context.Context, resp AccountQuotaPolicyClientListByAccountResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.AccountQuotaPolicyResourceDescriptionList.NextLink)
		},
	}
}

// listByAccountCreateRequest creates the ListByAccount request.
func (client *AccountQuotaPolicyClient) listByAccountCreateRequest(ctx context.Context, resourceGroupName string, accountName string, options *AccountQuotaPolicyClientListByAccountOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Singularity/accounts/{accountName}/accountQuotaPolicies"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", resourceGroupName)
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", accountName)
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	unencodedParams := []string{req.Raw().URL.RawQuery}
	if options != nil && options.ContinuationToken != nil {
		unencodedParams = append(unencodedParams, "continuationToken="+*options.ContinuationToken)
	}
	req.Raw().URL.RawQuery = strings.Join(unencodedParams, "&")
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listByAccountHandleResponse handles the ListByAccount response.
func (client *AccountQuotaPolicyClient) listByAccountHandleResponse(resp *http.Response) (AccountQuotaPolicyClientListByAccountResponse, error) {
	result := AccountQuotaPolicyClientListByAccountResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.AccountQuotaPolicyResourceDescriptionList); err != nil {
		return AccountQuotaPolicyClientListByAccountResponse{}, err
	}
	return result, nil
}

// BeginUpdate - If an account resource with the same name exists, then it is updated with the specified description and properties.
// Currently the only supported policy name is 'AccountQuotaPolicy'
// If the operation fails it returns an *azcore.ResponseError type.
// resourceGroupName - The name of the resource group within the user's subscription.
// accountName - The name of the Singularity account.
// policyName - The name of the Singularity account quota policy. Should only be Default.
// body - Singularity AccountQuotaPolicy information.
// options - AccountQuotaPolicyClientBeginUpdateOptions contains the optional parameters for the AccountQuotaPolicyClient.BeginUpdate
// method.
func (client *AccountQuotaPolicyClient) BeginUpdate(ctx context.Context, resourceGroupName string, accountName string, policyName string, body AccountQuotaPolicyResourcePatchDescription, options *AccountQuotaPolicyClientBeginUpdateOptions) (AccountQuotaPolicyClientUpdatePollerResponse, error) {
	resp, err := client.update(ctx, resourceGroupName, accountName, policyName, body, options)
	if err != nil {
		return AccountQuotaPolicyClientUpdatePollerResponse{}, err
	}
	result := AccountQuotaPolicyClientUpdatePollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("AccountQuotaPolicyClient.Update", "", resp, client.pl)
	if err != nil {
		return AccountQuotaPolicyClientUpdatePollerResponse{}, err
	}
	result.Poller = &AccountQuotaPolicyClientUpdatePoller{
		pt: pt,
	}
	return result, nil
}

// Update - If an account resource with the same name exists, then it is updated with the specified description and properties.
// Currently the only supported policy name is 'AccountQuotaPolicy'
// If the operation fails it returns an *azcore.ResponseError type.
func (client *AccountQuotaPolicyClient) update(ctx context.Context, resourceGroupName string, accountName string, policyName string, body AccountQuotaPolicyResourcePatchDescription, options *AccountQuotaPolicyClientBeginUpdateOptions) (*http.Response, error) {
	req, err := client.updateCreateRequest(ctx, resourceGroupName, accountName, policyName, body, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusCreated, http.StatusAccepted) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// updateCreateRequest creates the Update request.
func (client *AccountQuotaPolicyClient) updateCreateRequest(ctx context.Context, resourceGroupName string, accountName string, policyName string, body AccountQuotaPolicyResourcePatchDescription, options *AccountQuotaPolicyClientBeginUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Singularity/accounts/{accountName}/accountQuotaPolicies/{policyName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", resourceGroupName)
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", accountName)
	urlPath = strings.ReplaceAll(urlPath, "{policyName}", policyName)
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, body)
}

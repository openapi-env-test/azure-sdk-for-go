//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armsingularity

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// StorageCacheClient contains the methods for the StorageCache group.
// Don't use this type directly, use NewStorageCacheClient() instead.
type StorageCacheClient struct {
	host           string
	subscriptionID string
	pl             runtime.Pipeline
}

// NewStorageCacheClient creates a new instance of StorageCacheClient with the specified values.
// subscriptionID - The customer subscription identifier.
// credential - used to authorize requests. Usually a credential from azidentity.
// options - pass nil to accept the default values.
func NewStorageCacheClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) *StorageCacheClient {
	cp := arm.ClientOptions{}
	if options != nil {
		cp = *options
	}
	if len(cp.Endpoint) == 0 {
		cp.Endpoint = arm.AzurePublicCloud
	}
	client := &StorageCacheClient{
		subscriptionID: subscriptionID,
		host:           string(cp.Endpoint),
		pl:             armruntime.NewPipeline(moduleName, moduleVersion, credential, runtime.PipelineOptions{}, &cp),
	}
	return client
}

// BeginCreateOrUpdate - Creates a storage cache resource with the specified name and properties. If a storage cache resource
// with the same name exists, then it is updated with the specified properties.
// If the operation fails it returns an *azcore.ResponseError type.
// resourceGroupName - The name of the resource group within the user's subscription.
// accountName - The name of the Singularity account.
// storageCacheResourceName - The name of the Singularity storage cache.
// body - Singularity storage cache information.
// options - StorageCacheClientBeginCreateOrUpdateOptions contains the optional parameters for the StorageCacheClient.BeginCreateOrUpdate
// method.
func (client *StorageCacheClient) BeginCreateOrUpdate(ctx context.Context, resourceGroupName string, accountName string, storageCacheResourceName string, body StorageCacheResourceDescription, options *StorageCacheClientBeginCreateOrUpdateOptions) (StorageCacheClientCreateOrUpdatePollerResponse, error) {
	resp, err := client.createOrUpdate(ctx, resourceGroupName, accountName, storageCacheResourceName, body, options)
	if err != nil {
		return StorageCacheClientCreateOrUpdatePollerResponse{}, err
	}
	result := StorageCacheClientCreateOrUpdatePollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("StorageCacheClient.CreateOrUpdate", "", resp, client.pl)
	if err != nil {
		return StorageCacheClientCreateOrUpdatePollerResponse{}, err
	}
	result.Poller = &StorageCacheClientCreateOrUpdatePoller{
		pt: pt,
	}
	return result, nil
}

// CreateOrUpdate - Creates a storage cache resource with the specified name and properties. If a storage cache resource with
// the same name exists, then it is updated with the specified properties.
// If the operation fails it returns an *azcore.ResponseError type.
func (client *StorageCacheClient) createOrUpdate(ctx context.Context, resourceGroupName string, accountName string, storageCacheResourceName string, body StorageCacheResourceDescription, options *StorageCacheClientBeginCreateOrUpdateOptions) (*http.Response, error) {
	req, err := client.createOrUpdateCreateRequest(ctx, resourceGroupName, accountName, storageCacheResourceName, body, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusCreated, http.StatusAccepted) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *StorageCacheClient) createOrUpdateCreateRequest(ctx context.Context, resourceGroupName string, accountName string, storageCacheResourceName string, body StorageCacheResourceDescription, options *StorageCacheClientBeginCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Singularity/accounts/{accountName}/storagecontainers/{storageCacheResourceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", resourceGroupName)
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", accountName)
	urlPath = strings.ReplaceAll(urlPath, "{storageCacheResourceName}", storageCacheResourceName)
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, body)
}

// BeginDelete - Deletes the storage cache resource identified by the name.
// If the operation fails it returns an *azcore.ResponseError type.
// resourceGroupName - The name of the resource group within the user's subscription.
// accountName - The name of the Singularity account.
// storageCacheResourceName - The name of the Singularity storage cache.
// options - StorageCacheClientBeginDeleteOptions contains the optional parameters for the StorageCacheClient.BeginDelete
// method.
func (client *StorageCacheClient) BeginDelete(ctx context.Context, resourceGroupName string, accountName string, storageCacheResourceName string, options *StorageCacheClientBeginDeleteOptions) (StorageCacheClientDeletePollerResponse, error) {
	resp, err := client.deleteOperation(ctx, resourceGroupName, accountName, storageCacheResourceName, options)
	if err != nil {
		return StorageCacheClientDeletePollerResponse{}, err
	}
	result := StorageCacheClientDeletePollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("StorageCacheClient.Delete", "", resp, client.pl)
	if err != nil {
		return StorageCacheClientDeletePollerResponse{}, err
	}
	result.Poller = &StorageCacheClientDeletePoller{
		pt: pt,
	}
	return result, nil
}

// Delete - Deletes the storage cache resource identified by the name.
// If the operation fails it returns an *azcore.ResponseError type.
func (client *StorageCacheClient) deleteOperation(ctx context.Context, resourceGroupName string, accountName string, storageCacheResourceName string, options *StorageCacheClientBeginDeleteOptions) (*http.Response, error) {
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, accountName, storageCacheResourceName, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *StorageCacheClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, accountName string, storageCacheResourceName string, options *StorageCacheClientBeginDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Singularity/accounts/{accountName}/storagecontainers/{storageCacheResourceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", resourceGroupName)
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", accountName)
	urlPath = strings.ReplaceAll(urlPath, "{storageCacheResourceName}", storageCacheResourceName)
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// Get - Gets information about the storage cache resource with the given name.
// If the operation fails it returns an *azcore.ResponseError type.
// resourceGroupName - The name of the resource group within the user's subscription.
// accountName - The name of the Singularity account.
// storageCacheResourceName - The name of the Singularity storage cache.
// options - StorageCacheClientGetOptions contains the optional parameters for the StorageCacheClient.Get method.
func (client *StorageCacheClient) Get(ctx context.Context, resourceGroupName string, accountName string, storageCacheResourceName string, options *StorageCacheClientGetOptions) (StorageCacheClientGetResponse, error) {
	req, err := client.getCreateRequest(ctx, resourceGroupName, accountName, storageCacheResourceName, options)
	if err != nil {
		return StorageCacheClientGetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return StorageCacheClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return StorageCacheClientGetResponse{}, runtime.NewResponseError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *StorageCacheClient) getCreateRequest(ctx context.Context, resourceGroupName string, accountName string, storageCacheResourceName string, options *StorageCacheClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Singularity/accounts/{accountName}/storagecontainers/{storageCacheResourceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", resourceGroupName)
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", accountName)
	urlPath = strings.ReplaceAll(urlPath, "{storageCacheResourceName}", storageCacheResourceName)
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *StorageCacheClient) getHandleResponse(resp *http.Response) (StorageCacheClientGetResponse, error) {
	result := StorageCacheClientGetResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.StorageCacheResourceDescription); err != nil {
		return StorageCacheClientGetResponse{}, err
	}
	return result, nil
}

// GetDiagnostics - Gets diagnostic information about the storage cache resource with the given name.
// If the operation fails it returns an *azcore.ResponseError type.
// resourceGroupName - The name of the resource group within the user's subscription.
// accountName - The name of the Singularity account.
// storageCacheResourceName - The name of the Singularity storage cache.
// options - StorageCacheClientGetDiagnosticsOptions contains the optional parameters for the StorageCacheClient.GetDiagnostics
// method.
func (client *StorageCacheClient) GetDiagnostics(ctx context.Context, resourceGroupName string, accountName string, storageCacheResourceName string, options *StorageCacheClientGetDiagnosticsOptions) (StorageCacheClientGetDiagnosticsResponse, error) {
	req, err := client.getDiagnosticsCreateRequest(ctx, resourceGroupName, accountName, storageCacheResourceName, options)
	if err != nil {
		return StorageCacheClientGetDiagnosticsResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return StorageCacheClientGetDiagnosticsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return StorageCacheClientGetDiagnosticsResponse{}, runtime.NewResponseError(resp)
	}
	return client.getDiagnosticsHandleResponse(resp)
}

// getDiagnosticsCreateRequest creates the GetDiagnostics request.
func (client *StorageCacheClient) getDiagnosticsCreateRequest(ctx context.Context, resourceGroupName string, accountName string, storageCacheResourceName string, options *StorageCacheClientGetDiagnosticsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Singularity/accounts/{accountName}/storagecontainers/{storageCacheResourceName}/diagnostics"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", resourceGroupName)
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", accountName)
	urlPath = strings.ReplaceAll(urlPath, "{storageCacheResourceName}", storageCacheResourceName)
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getDiagnosticsHandleResponse handles the GetDiagnostics response.
func (client *StorageCacheClient) getDiagnosticsHandleResponse(resp *http.Response) (StorageCacheClientGetDiagnosticsResponse, error) {
	result := StorageCacheClientGetDiagnosticsResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.StorageCacheResourceDiagnosticsInfo); err != nil {
		return StorageCacheClientGetDiagnosticsResponse{}, err
	}
	return result, nil
}

// ListByAccount - Gets information about all storage cache resources in a given account.
// If the operation fails it returns an *azcore.ResponseError type.
// resourceGroupName - The name of the resource group within the user's subscription.
// accountName - The name of the Singularity account.
// options - StorageCacheClientListByAccountOptions contains the optional parameters for the StorageCacheClient.ListByAccount
// method.
func (client *StorageCacheClient) ListByAccount(resourceGroupName string, accountName string, options *StorageCacheClientListByAccountOptions) *StorageCacheClientListByAccountPager {
	return &StorageCacheClientListByAccountPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listByAccountCreateRequest(ctx, resourceGroupName, accountName, options)
		},
		advancer: func(ctx context.Context, resp StorageCacheClientListByAccountResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.StorageCacheResourceDescriptionList.NextLink)
		},
	}
}

// listByAccountCreateRequest creates the ListByAccount request.
func (client *StorageCacheClient) listByAccountCreateRequest(ctx context.Context, resourceGroupName string, accountName string, options *StorageCacheClientListByAccountOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Singularity/accounts/{accountName}/storagecontainers"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", resourceGroupName)
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", accountName)
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	unencodedParams := []string{req.Raw().URL.RawQuery}
	if options != nil && options.ContinuationToken != nil {
		unencodedParams = append(unencodedParams, "continuationToken="+*options.ContinuationToken)
	}
	req.Raw().URL.RawQuery = strings.Join(unencodedParams, "&")
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listByAccountHandleResponse handles the ListByAccount response.
func (client *StorageCacheClient) listByAccountHandleResponse(resp *http.Response) (StorageCacheClientListByAccountResponse, error) {
	result := StorageCacheClientListByAccountResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.StorageCacheResourceDescriptionList); err != nil {
		return StorageCacheClientListByAccountResponse{}, err
	}
	return result, nil
}

// BeginResume - Resumes the storage cache resource identified by the name.
// If the operation fails it returns an *azcore.ResponseError type.
// resourceGroupName - The name of the resource group within the user's subscription.
// accountName - The name of the Singularity account.
// storageCacheResourceName - The name of the Singularity storage cache.
// options - StorageCacheClientBeginResumeOptions contains the optional parameters for the StorageCacheClient.BeginResume
// method.
func (client *StorageCacheClient) BeginResume(ctx context.Context, resourceGroupName string, accountName string, storageCacheResourceName string, options *StorageCacheClientBeginResumeOptions) (StorageCacheClientResumePollerResponse, error) {
	resp, err := client.resume(ctx, resourceGroupName, accountName, storageCacheResourceName, options)
	if err != nil {
		return StorageCacheClientResumePollerResponse{}, err
	}
	result := StorageCacheClientResumePollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("StorageCacheClient.Resume", "", resp, client.pl)
	if err != nil {
		return StorageCacheClientResumePollerResponse{}, err
	}
	result.Poller = &StorageCacheClientResumePoller{
		pt: pt,
	}
	return result, nil
}

// Resume - Resumes the storage cache resource identified by the name.
// If the operation fails it returns an *azcore.ResponseError type.
func (client *StorageCacheClient) resume(ctx context.Context, resourceGroupName string, accountName string, storageCacheResourceName string, options *StorageCacheClientBeginResumeOptions) (*http.Response, error) {
	req, err := client.resumeCreateRequest(ctx, resourceGroupName, accountName, storageCacheResourceName, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// resumeCreateRequest creates the Resume request.
func (client *StorageCacheClient) resumeCreateRequest(ctx context.Context, resourceGroupName string, accountName string, storageCacheResourceName string, options *StorageCacheClientBeginResumeOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Singularity/accounts/{accountName}/storagecontainers/{storageCacheResourceName}/resume"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", resourceGroupName)
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", accountName)
	urlPath = strings.ReplaceAll(urlPath, "{storageCacheResourceName}", storageCacheResourceName)
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// BeginSuspend - Suspends the storage cache resource identified by the name.
// If the operation fails it returns an *azcore.ResponseError type.
// resourceGroupName - The name of the resource group within the user's subscription.
// accountName - The name of the Singularity account.
// storageCacheResourceName - The name of the Singularity storage cache.
// options - StorageCacheClientBeginSuspendOptions contains the optional parameters for the StorageCacheClient.BeginSuspend
// method.
func (client *StorageCacheClient) BeginSuspend(ctx context.Context, resourceGroupName string, accountName string, storageCacheResourceName string, options *StorageCacheClientBeginSuspendOptions) (StorageCacheClientSuspendPollerResponse, error) {
	resp, err := client.suspend(ctx, resourceGroupName, accountName, storageCacheResourceName, options)
	if err != nil {
		return StorageCacheClientSuspendPollerResponse{}, err
	}
	result := StorageCacheClientSuspendPollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("StorageCacheClient.Suspend", "", resp, client.pl)
	if err != nil {
		return StorageCacheClientSuspendPollerResponse{}, err
	}
	result.Poller = &StorageCacheClientSuspendPoller{
		pt: pt,
	}
	return result, nil
}

// Suspend - Suspends the storage cache resource identified by the name.
// If the operation fails it returns an *azcore.ResponseError type.
func (client *StorageCacheClient) suspend(ctx context.Context, resourceGroupName string, accountName string, storageCacheResourceName string, options *StorageCacheClientBeginSuspendOptions) (*http.Response, error) {
	req, err := client.suspendCreateRequest(ctx, resourceGroupName, accountName, storageCacheResourceName, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// suspendCreateRequest creates the Suspend request.
func (client *StorageCacheClient) suspendCreateRequest(ctx context.Context, resourceGroupName string, accountName string, storageCacheResourceName string, options *StorageCacheClientBeginSuspendOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Singularity/accounts/{accountName}/storagecontainers/{storageCacheResourceName}/suspend"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", resourceGroupName)
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", accountName)
	urlPath = strings.ReplaceAll(urlPath, "{storageCacheResourceName}", storageCacheResourceName)
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// BeginUpdate - If a storage cache resource with the same name exists, then it is updated with the specified properties.
// If the operation fails it returns an *azcore.ResponseError type.
// resourceGroupName - The name of the resource group within the user's subscription.
// accountName - The name of the Singularity account.
// storageCacheResourceName - The name of the Singularity storage cache.
// body - Singularity storage cache information.
// options - StorageCacheClientBeginUpdateOptions contains the optional parameters for the StorageCacheClient.BeginUpdate
// method.
func (client *StorageCacheClient) BeginUpdate(ctx context.Context, resourceGroupName string, accountName string, storageCacheResourceName string, body StorageCacheResourceDescription, options *StorageCacheClientBeginUpdateOptions) (StorageCacheClientUpdatePollerResponse, error) {
	resp, err := client.update(ctx, resourceGroupName, accountName, storageCacheResourceName, body, options)
	if err != nil {
		return StorageCacheClientUpdatePollerResponse{}, err
	}
	result := StorageCacheClientUpdatePollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("StorageCacheClient.Update", "", resp, client.pl)
	if err != nil {
		return StorageCacheClientUpdatePollerResponse{}, err
	}
	result.Poller = &StorageCacheClientUpdatePoller{
		pt: pt,
	}
	return result, nil
}

// Update - If a storage cache resource with the same name exists, then it is updated with the specified properties.
// If the operation fails it returns an *azcore.ResponseError type.
func (client *StorageCacheClient) update(ctx context.Context, resourceGroupName string, accountName string, storageCacheResourceName string, body StorageCacheResourceDescription, options *StorageCacheClientBeginUpdateOptions) (*http.Response, error) {
	req, err := client.updateCreateRequest(ctx, resourceGroupName, accountName, storageCacheResourceName, body, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusCreated, http.StatusAccepted) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// updateCreateRequest creates the Update request.
func (client *StorageCacheClient) updateCreateRequest(ctx context.Context, resourceGroupName string, accountName string, storageCacheResourceName string, body StorageCacheResourceDescription, options *StorageCacheClientBeginUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Singularity/accounts/{accountName}/storagecontainers/{storageCacheResourceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", resourceGroupName)
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", accountName)
	urlPath = strings.ReplaceAll(urlPath, "{storageCacheResourceName}", storageCacheResourceName)
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, body)
}

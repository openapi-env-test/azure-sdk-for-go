//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armsingularity

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"reflect"
)

// AccountClientListByResourceGroupPager provides operations for iterating over paged responses.
type AccountClientListByResourceGroupPager struct {
	client    *AccountClient
	current   AccountClientListByResourceGroupResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, AccountClientListByResourceGroupResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *AccountClientListByResourceGroupPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *AccountClientListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AccountResourceDescriptionList.NextLink == nil || len(*p.current.AccountResourceDescriptionList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current AccountClientListByResourceGroupResponse page.
func (p *AccountClientListByResourceGroupPager) PageResponse() AccountClientListByResourceGroupResponse {
	return p.current
}

// AccountClientListBySubscriptionPager provides operations for iterating over paged responses.
type AccountClientListBySubscriptionPager struct {
	client    *AccountClient
	current   AccountClientListBySubscriptionResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, AccountClientListBySubscriptionResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *AccountClientListBySubscriptionPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *AccountClientListBySubscriptionPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AccountResourceDescriptionList.NextLink == nil || len(*p.current.AccountResourceDescriptionList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listBySubscriptionHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current AccountClientListBySubscriptionResponse page.
func (p *AccountClientListBySubscriptionPager) PageResponse() AccountClientListBySubscriptionResponse {
	return p.current
}

// AccountQuotaPolicyClientListByAccountPager provides operations for iterating over paged responses.
type AccountQuotaPolicyClientListByAccountPager struct {
	client    *AccountQuotaPolicyClient
	current   AccountQuotaPolicyClientListByAccountResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, AccountQuotaPolicyClientListByAccountResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *AccountQuotaPolicyClientListByAccountPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *AccountQuotaPolicyClientListByAccountPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AccountQuotaPolicyResourceDescriptionList.NextLink == nil || len(*p.current.AccountQuotaPolicyResourceDescriptionList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listByAccountHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current AccountQuotaPolicyClientListByAccountResponse page.
func (p *AccountQuotaPolicyClientListByAccountPager) PageResponse() AccountQuotaPolicyClientListByAccountResponse {
	return p.current
}

// GroupPolicyClientListByAccountPager provides operations for iterating over paged responses.
type GroupPolicyClientListByAccountPager struct {
	client    *GroupPolicyClient
	current   GroupPolicyClientListByAccountResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, GroupPolicyClientListByAccountResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *GroupPolicyClientListByAccountPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *GroupPolicyClientListByAccountPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.GroupPolicyResourceDescriptionList.NextLink == nil || len(*p.current.GroupPolicyResourceDescriptionList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listByAccountHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current GroupPolicyClientListByAccountResponse page.
func (p *GroupPolicyClientListByAccountPager) PageResponse() GroupPolicyClientListByAccountResponse {
	return p.current
}

// ImagesClientListPager provides operations for iterating over paged responses.
type ImagesClientListPager struct {
	client    *ImagesClient
	current   ImagesClientListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ImagesClientListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ImagesClientListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ImagesClientListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AvailablePlatformImageDescriptionList.NextLink == nil || len(*p.current.AvailablePlatformImageDescriptionList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ImagesClientListResponse page.
func (p *ImagesClientListPager) PageResponse() ImagesClientListResponse {
	return p.current
}

// InstanceTypeSeriesClientListInstanceTypePager provides operations for iterating over paged responses.
type InstanceTypeSeriesClientListInstanceTypePager struct {
	client    *InstanceTypeSeriesClient
	current   InstanceTypeSeriesClientListInstanceTypeResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, InstanceTypeSeriesClientListInstanceTypeResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *InstanceTypeSeriesClientListInstanceTypePager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *InstanceTypeSeriesClientListInstanceTypePager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AvailableInstanceTypeDescriptionList.NextLink == nil || len(*p.current.AvailableInstanceTypeDescriptionList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listInstanceTypeHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current InstanceTypeSeriesClientListInstanceTypeResponse page.
func (p *InstanceTypeSeriesClientListInstanceTypePager) PageResponse() InstanceTypeSeriesClientListInstanceTypeResponse {
	return p.current
}

// InstanceTypeSeriesClientListPager provides operations for iterating over paged responses.
type InstanceTypeSeriesClientListPager struct {
	client    *InstanceTypeSeriesClient
	current   InstanceTypeSeriesClientListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, InstanceTypeSeriesClientListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *InstanceTypeSeriesClientListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *InstanceTypeSeriesClientListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AvailableInstanceTypeSeriesDescriptionList.NextLink == nil || len(*p.current.AvailableInstanceTypeSeriesDescriptionList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current InstanceTypeSeriesClientListResponse page.
func (p *InstanceTypeSeriesClientListPager) PageResponse() InstanceTypeSeriesClientListResponse {
	return p.current
}

// JobClientListByAccountPager provides operations for iterating over paged responses.
type JobClientListByAccountPager struct {
	client    *JobClient
	current   JobClientListByAccountResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, JobClientListByAccountResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *JobClientListByAccountPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *JobClientListByAccountPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.JobResourceDescriptionList.NextLink == nil || len(*p.current.JobResourceDescriptionList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listByAccountHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current JobClientListByAccountResponse page.
func (p *JobClientListByAccountPager) PageResponse() JobClientListByAccountResponse {
	return p.current
}

// ModelClientListByAccountPager provides operations for iterating over paged responses.
type ModelClientListByAccountPager struct {
	client    *ModelClient
	current   ModelClientListByAccountResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ModelClientListByAccountResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ModelClientListByAccountPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ModelClientListByAccountPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ModelResourceDescriptionList.NextLink == nil || len(*p.current.ModelResourceDescriptionList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listByAccountHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ModelClientListByAccountResponse page.
func (p *ModelClientListByAccountPager) PageResponse() ModelClientListByAccountResponse {
	return p.current
}

// NetworkClientListByAccountPager provides operations for iterating over paged responses.
type NetworkClientListByAccountPager struct {
	client    *NetworkClient
	current   NetworkClientListByAccountResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, NetworkClientListByAccountResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *NetworkClientListByAccountPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *NetworkClientListByAccountPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.NetworkResourceDescriptionList.NextLink == nil || len(*p.current.NetworkResourceDescriptionList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listByAccountHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current NetworkClientListByAccountResponse page.
func (p *NetworkClientListByAccountPager) PageResponse() NetworkClientListByAccountResponse {
	return p.current
}

// OperationsClientListPager provides operations for iterating over paged responses.
type OperationsClientListPager struct {
	client    *OperationsClient
	current   OperationsClientListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, OperationsClientListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *OperationsClientListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *OperationsClientListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OperationListResult.NextLink == nil || len(*p.current.OperationListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current OperationsClientListResponse page.
func (p *OperationsClientListPager) PageResponse() OperationsClientListResponse {
	return p.current
}

// StorageCacheClientListByAccountPager provides operations for iterating over paged responses.
type StorageCacheClientListByAccountPager struct {
	client    *StorageCacheClient
	current   StorageCacheClientListByAccountResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, StorageCacheClientListByAccountResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *StorageCacheClientListByAccountPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *StorageCacheClientListByAccountPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.StorageCacheResourceDescriptionList.NextLink == nil || len(*p.current.StorageCacheResourceDescriptionList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listByAccountHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current StorageCacheClientListByAccountResponse page.
func (p *StorageCacheClientListByAccountPager) PageResponse() StorageCacheClientListByAccountResponse {
	return p.current
}

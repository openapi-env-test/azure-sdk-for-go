//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armsingularity

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// InstanceTypeSeriesClient contains the methods for the InstanceTypeSeries group.
// Don't use this type directly, use NewInstanceTypeSeriesClient() instead.
type InstanceTypeSeriesClient struct {
	host           string
	subscriptionID string
	pl             runtime.Pipeline
}

// NewInstanceTypeSeriesClient creates a new instance of InstanceTypeSeriesClient with the specified values.
// subscriptionID - The customer subscription identifier.
// credential - used to authorize requests. Usually a credential from azidentity.
// options - pass nil to accept the default values.
func NewInstanceTypeSeriesClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) *InstanceTypeSeriesClient {
	cp := arm.ClientOptions{}
	if options != nil {
		cp = *options
	}
	if len(cp.Endpoint) == 0 {
		cp.Endpoint = arm.AzurePublicCloud
	}
	client := &InstanceTypeSeriesClient{
		subscriptionID: subscriptionID,
		host:           string(cp.Endpoint),
		pl:             armruntime.NewPipeline(moduleName, moduleVersion, credential, runtime.PipelineOptions{}, &cp),
	}
	return client
}

// List - List all the available instance type series for the location.
// If the operation fails it returns an *azcore.ResponseError type.
// location - The name of the Azure location.
// options - InstanceTypeSeriesClientListOptions contains the optional parameters for the InstanceTypeSeriesClient.List method.
func (client *InstanceTypeSeriesClient) List(location string, options *InstanceTypeSeriesClientListOptions) *InstanceTypeSeriesClientListPager {
	return &InstanceTypeSeriesClientListPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listCreateRequest(ctx, location, options)
		},
		advancer: func(ctx context.Context, resp InstanceTypeSeriesClientListResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.AvailableInstanceTypeSeriesDescriptionList.NextLink)
		},
	}
}

// listCreateRequest creates the List request.
func (client *InstanceTypeSeriesClient) listCreateRequest(ctx context.Context, location string, options *InstanceTypeSeriesClientListOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Singularity/locations/{location}/instanceTypeSeries"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	urlPath = strings.ReplaceAll(urlPath, "{location}", location)
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listHandleResponse handles the List response.
func (client *InstanceTypeSeriesClient) listHandleResponse(resp *http.Response) (InstanceTypeSeriesClientListResponse, error) {
	result := InstanceTypeSeriesClientListResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.AvailableInstanceTypeSeriesDescriptionList); err != nil {
		return InstanceTypeSeriesClientListResponse{}, err
	}
	return result, nil
}

// ListInstanceType - List all the available instance types for the instance type series.
// If the operation fails it returns an *azcore.ResponseError type.
// location - The name of the Azure location.
// instanceTypeSeriesID - The id of the Singularity instance type series.
// options - InstanceTypeSeriesClientListInstanceTypeOptions contains the optional parameters for the InstanceTypeSeriesClient.ListInstanceType
// method.
func (client *InstanceTypeSeriesClient) ListInstanceType(location string, instanceTypeSeriesID string, options *InstanceTypeSeriesClientListInstanceTypeOptions) *InstanceTypeSeriesClientListInstanceTypePager {
	return &InstanceTypeSeriesClientListInstanceTypePager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listInstanceTypeCreateRequest(ctx, location, instanceTypeSeriesID, options)
		},
		advancer: func(ctx context.Context, resp InstanceTypeSeriesClientListInstanceTypeResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.AvailableInstanceTypeDescriptionList.NextLink)
		},
	}
}

// listInstanceTypeCreateRequest creates the ListInstanceType request.
func (client *InstanceTypeSeriesClient) listInstanceTypeCreateRequest(ctx context.Context, location string, instanceTypeSeriesID string, options *InstanceTypeSeriesClientListInstanceTypeOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Singularity/locations/{location}/instanceTypeSeries/{instanceTypeSeriesId}/instanceTypes"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	urlPath = strings.ReplaceAll(urlPath, "{location}", location)
	urlPath = strings.ReplaceAll(urlPath, "{instanceTypeSeriesId}", instanceTypeSeriesID)
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listInstanceTypeHandleResponse handles the ListInstanceType response.
func (client *InstanceTypeSeriesClient) listInstanceTypeHandleResponse(resp *http.Response) (InstanceTypeSeriesClientListInstanceTypeResponse, error) {
	result := InstanceTypeSeriesClientListInstanceTypeResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.AvailableInstanceTypeDescriptionList); err != nil {
		return InstanceTypeSeriesClientListInstanceTypeResponse{}, err
	}
	return result, nil
}

//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armscan

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// AzureScanningAccountClient contains the methods for the AzureScanningAccount group.
// Don't use this type directly, use NewAzureScanningAccountClient() instead.
type AzureScanningAccountClient struct {
	host           string
	subscriptionID string
	pl             runtime.Pipeline
}

// NewAzureScanningAccountClient creates a new instance of AzureScanningAccountClient with the specified values.
// subscriptionID - The ID of the target subscription.
// credential - used to authorize requests. Usually a credential from azidentity.
// options - pass nil to accept the default values.
func NewAzureScanningAccountClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) *AzureScanningAccountClient {
	cp := arm.ClientOptions{}
	if options != nil {
		cp = *options
	}
	if len(cp.Endpoint) == 0 {
		cp.Endpoint = arm.AzurePublicCloud
	}
	client := &AzureScanningAccountClient{
		subscriptionID: subscriptionID,
		host:           string(cp.Endpoint),
		pl:             armruntime.NewPipeline(moduleName, moduleVersion, credential, runtime.PipelineOptions{}, &cp),
	}
	return client
}

// BeginCreate - Create a Scan Account
// If the operation fails it returns an *azcore.ResponseError type.
// resourceGroupName - The name of the resource group. The name is case insensitive.
// accountName - Scanning account name
// options - AzureScanningAccountClientBeginCreateOptions contains the optional parameters for the AzureScanningAccountClient.BeginCreate
// method.
func (client *AzureScanningAccountClient) BeginCreate(ctx context.Context, resourceGroupName string, accountName string, options *AzureScanningAccountClientBeginCreateOptions) (AzureScanningAccountClientCreatePollerResponse, error) {
	resp, err := client.create(ctx, resourceGroupName, accountName, options)
	if err != nil {
		return AzureScanningAccountClientCreatePollerResponse{}, err
	}
	result := AzureScanningAccountClientCreatePollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("AzureScanningAccountClient.Create", "azure-async-operation", resp, client.pl)
	if err != nil {
		return AzureScanningAccountClientCreatePollerResponse{}, err
	}
	result.Poller = &AzureScanningAccountClientCreatePoller{
		pt: pt,
	}
	return result, nil
}

// Create - Create a Scan Account
// If the operation fails it returns an *azcore.ResponseError type.
func (client *AzureScanningAccountClient) create(ctx context.Context, resourceGroupName string, accountName string, options *AzureScanningAccountClientBeginCreateOptions) (*http.Response, error) {
	req, err := client.createCreateRequest(ctx, resourceGroupName, accountName, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusCreated) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// createCreateRequest creates the Create request.
func (client *AzureScanningAccountClient) createCreateRequest(ctx context.Context, resourceGroupName string, accountName string, options *AzureScanningAccountClientBeginCreateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureScan/scanningAccounts/{accountName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if accountName == "" {
		return nil, errors.New("parameter accountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", url.PathEscape(accountName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-05-17-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	if options != nil && options.ScanningAccount != nil {
		return req, runtime.MarshalAsJSON(req, *options.ScanningAccount)
	}
	return req, nil
}

// BeginDelete - Delete a Scan Account
// If the operation fails it returns an *azcore.ResponseError type.
// resourceGroupName - The name of the resource group. The name is case insensitive.
// accountName - Scanning account name
// options - AzureScanningAccountClientBeginDeleteOptions contains the optional parameters for the AzureScanningAccountClient.BeginDelete
// method.
func (client *AzureScanningAccountClient) BeginDelete(ctx context.Context, resourceGroupName string, accountName string, options *AzureScanningAccountClientBeginDeleteOptions) (AzureScanningAccountClientDeletePollerResponse, error) {
	resp, err := client.deleteOperation(ctx, resourceGroupName, accountName, options)
	if err != nil {
		return AzureScanningAccountClientDeletePollerResponse{}, err
	}
	result := AzureScanningAccountClientDeletePollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("AzureScanningAccountClient.Delete", "", resp, client.pl)
	if err != nil {
		return AzureScanningAccountClientDeletePollerResponse{}, err
	}
	result.Poller = &AzureScanningAccountClientDeletePoller{
		pt: pt,
	}
	return result, nil
}

// Delete - Delete a Scan Account
// If the operation fails it returns an *azcore.ResponseError type.
func (client *AzureScanningAccountClient) deleteOperation(ctx context.Context, resourceGroupName string, accountName string, options *AzureScanningAccountClientBeginDeleteOptions) (*http.Response, error) {
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, accountName, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *AzureScanningAccountClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, accountName string, options *AzureScanningAccountClientBeginDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureScan/scanningAccounts/{accountName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if accountName == "" {
		return nil, errors.New("parameter accountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", url.PathEscape(accountName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-05-17-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// Get - Get a Scan Account
// If the operation fails it returns an *azcore.ResponseError type.
// resourceGroupName - The name of the resource group. The name is case insensitive.
// accountName - Scanning account name
// options - AzureScanningAccountClientGetOptions contains the optional parameters for the AzureScanningAccountClient.Get
// method.
func (client *AzureScanningAccountClient) Get(ctx context.Context, resourceGroupName string, accountName string, options *AzureScanningAccountClientGetOptions) (AzureScanningAccountClientGetResponse, error) {
	req, err := client.getCreateRequest(ctx, resourceGroupName, accountName, options)
	if err != nil {
		return AzureScanningAccountClientGetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return AzureScanningAccountClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return AzureScanningAccountClientGetResponse{}, runtime.NewResponseError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *AzureScanningAccountClient) getCreateRequest(ctx context.Context, resourceGroupName string, accountName string, options *AzureScanningAccountClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureScan/scanningAccounts/{accountName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if accountName == "" {
		return nil, errors.New("parameter accountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", url.PathEscape(accountName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-05-17-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *AzureScanningAccountClient) getHandleResponse(resp *http.Response) (AzureScanningAccountClientGetResponse, error) {
	result := AzureScanningAccountClientGetResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.ScanningAccount); err != nil {
		return AzureScanningAccountClientGetResponse{}, err
	}
	return result, nil
}

// ListByResourceGroup - List Scanning Accounts within a resource group
// If the operation fails it returns an *azcore.ResponseError type.
// resourceGroupName - The name of the resource group. The name is case insensitive.
// options - AzureScanningAccountClientListByResourceGroupOptions contains the optional parameters for the AzureScanningAccountClient.ListByResourceGroup
// method.
func (client *AzureScanningAccountClient) ListByResourceGroup(resourceGroupName string, options *AzureScanningAccountClientListByResourceGroupOptions) *AzureScanningAccountClientListByResourceGroupPager {
	return &AzureScanningAccountClientListByResourceGroupPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listByResourceGroupCreateRequest(ctx, resourceGroupName, options)
		},
		advancer: func(ctx context.Context, resp AzureScanningAccountClientListByResourceGroupResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.ScanningAccounts.NextLink)
		},
	}
}

// listByResourceGroupCreateRequest creates the ListByResourceGroup request.
func (client *AzureScanningAccountClient) listByResourceGroupCreateRequest(ctx context.Context, resourceGroupName string, options *AzureScanningAccountClientListByResourceGroupOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureScan/scanningAccounts"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-05-17-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listByResourceGroupHandleResponse handles the ListByResourceGroup response.
func (client *AzureScanningAccountClient) listByResourceGroupHandleResponse(resp *http.Response) (AzureScanningAccountClientListByResourceGroupResponse, error) {
	result := AzureScanningAccountClientListByResourceGroupResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.ScanningAccounts); err != nil {
		return AzureScanningAccountClientListByResourceGroupResponse{}, err
	}
	return result, nil
}

// ListBySubscription - Lists Scanning Accounts within a subscription
// If the operation fails it returns an *azcore.ResponseError type.
// options - AzureScanningAccountClientListBySubscriptionOptions contains the optional parameters for the AzureScanningAccountClient.ListBySubscription
// method.
func (client *AzureScanningAccountClient) ListBySubscription(options *AzureScanningAccountClientListBySubscriptionOptions) *AzureScanningAccountClientListBySubscriptionPager {
	return &AzureScanningAccountClientListBySubscriptionPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listBySubscriptionCreateRequest(ctx, options)
		},
		advancer: func(ctx context.Context, resp AzureScanningAccountClientListBySubscriptionResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.ScanningAccounts.NextLink)
		},
	}
}

// listBySubscriptionCreateRequest creates the ListBySubscription request.
func (client *AzureScanningAccountClient) listBySubscriptionCreateRequest(ctx context.Context, options *AzureScanningAccountClientListBySubscriptionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.AzureScan/scanningAccounts"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-05-17-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listBySubscriptionHandleResponse handles the ListBySubscription response.
func (client *AzureScanningAccountClient) listBySubscriptionHandleResponse(resp *http.Response) (AzureScanningAccountClientListBySubscriptionResponse, error) {
	result := AzureScanningAccountClientListBySubscriptionResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.ScanningAccounts); err != nil {
		return AzureScanningAccountClientListBySubscriptionResponse{}, err
	}
	return result, nil
}

// Update - Update a Scan Account
// If the operation fails it returns an *azcore.ResponseError type.
// resourceGroupName - The name of the resource group. The name is case insensitive.
// accountName - Scanning account name
// options - AzureScanningAccountClientUpdateOptions contains the optional parameters for the AzureScanningAccountClient.Update
// method.
func (client *AzureScanningAccountClient) Update(ctx context.Context, resourceGroupName string, accountName string, options *AzureScanningAccountClientUpdateOptions) (AzureScanningAccountClientUpdateResponse, error) {
	req, err := client.updateCreateRequest(ctx, resourceGroupName, accountName, options)
	if err != nil {
		return AzureScanningAccountClientUpdateResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return AzureScanningAccountClientUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return AzureScanningAccountClientUpdateResponse{}, runtime.NewResponseError(resp)
	}
	return client.updateHandleResponse(resp)
}

// updateCreateRequest creates the Update request.
func (client *AzureScanningAccountClient) updateCreateRequest(ctx context.Context, resourceGroupName string, accountName string, options *AzureScanningAccountClientUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureScan/scanningAccounts/{accountName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if accountName == "" {
		return nil, errors.New("parameter accountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", url.PathEscape(accountName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-05-17-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	if options != nil && options.ScanningAccountPatch != nil {
		return req, runtime.MarshalAsJSON(req, *options.ScanningAccountPatch)
	}
	return req, nil
}

// updateHandleResponse handles the Update response.
func (client *AzureScanningAccountClient) updateHandleResponse(resp *http.Response) (AzureScanningAccountClientUpdateResponse, error) {
	result := AzureScanningAccountClientUpdateResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.ScanningAccount); err != nil {
		return AzureScanningAccountClientUpdateResponse{}, err
	}
	return result, nil
}

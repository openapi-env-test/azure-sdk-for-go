//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armscan

import (
	"context"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"net/http"
	"time"
)

// AzureScanningAccountClientCreatePollerResponse contains the response from method AzureScanningAccountClient.Create.
type AzureScanningAccountClientCreatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *AzureScanningAccountClientCreatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l AzureScanningAccountClientCreatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (AzureScanningAccountClientCreateResponse, error) {
	respType := AzureScanningAccountClientCreateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.ScanningAccount)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a AzureScanningAccountClientCreatePollerResponse from the provided client and resume token.
func (l *AzureScanningAccountClientCreatePollerResponse) Resume(ctx context.Context, client *AzureScanningAccountClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("AzureScanningAccountClient.Create", token, client.pl)
	if err != nil {
		return err
	}
	poller := &AzureScanningAccountClientCreatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// AzureScanningAccountClientCreateResponse contains the response from method AzureScanningAccountClient.Create.
type AzureScanningAccountClientCreateResponse struct {
	AzureScanningAccountClientCreateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AzureScanningAccountClientCreateResult contains the result from method AzureScanningAccountClient.Create.
type AzureScanningAccountClientCreateResult struct {
	ScanningAccount
}

// AzureScanningAccountClientDeletePollerResponse contains the response from method AzureScanningAccountClient.Delete.
type AzureScanningAccountClientDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *AzureScanningAccountClientDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l AzureScanningAccountClientDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (AzureScanningAccountClientDeleteResponse, error) {
	respType := AzureScanningAccountClientDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a AzureScanningAccountClientDeletePollerResponse from the provided client and resume token.
func (l *AzureScanningAccountClientDeletePollerResponse) Resume(ctx context.Context, client *AzureScanningAccountClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("AzureScanningAccountClient.Delete", token, client.pl)
	if err != nil {
		return err
	}
	poller := &AzureScanningAccountClientDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// AzureScanningAccountClientDeleteResponse contains the response from method AzureScanningAccountClient.Delete.
type AzureScanningAccountClientDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AzureScanningAccountClientGetResponse contains the response from method AzureScanningAccountClient.Get.
type AzureScanningAccountClientGetResponse struct {
	AzureScanningAccountClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AzureScanningAccountClientGetResult contains the result from method AzureScanningAccountClient.Get.
type AzureScanningAccountClientGetResult struct {
	ScanningAccount
}

// AzureScanningAccountClientListByResourceGroupResponse contains the response from method AzureScanningAccountClient.ListByResourceGroup.
type AzureScanningAccountClientListByResourceGroupResponse struct {
	AzureScanningAccountClientListByResourceGroupResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AzureScanningAccountClientListByResourceGroupResult contains the result from method AzureScanningAccountClient.ListByResourceGroup.
type AzureScanningAccountClientListByResourceGroupResult struct {
	ScanningAccounts
}

// AzureScanningAccountClientListBySubscriptionResponse contains the response from method AzureScanningAccountClient.ListBySubscription.
type AzureScanningAccountClientListBySubscriptionResponse struct {
	AzureScanningAccountClientListBySubscriptionResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AzureScanningAccountClientListBySubscriptionResult contains the result from method AzureScanningAccountClient.ListBySubscription.
type AzureScanningAccountClientListBySubscriptionResult struct {
	ScanningAccounts
}

// AzureScanningAccountClientUpdateResponse contains the response from method AzureScanningAccountClient.Update.
type AzureScanningAccountClientUpdateResponse struct {
	AzureScanningAccountClientUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AzureScanningAccountClientUpdateResult contains the result from method AzureScanningAccountClient.Update.
type AzureScanningAccountClientUpdateResult struct {
	ScanningAccount
}

// OperationsClientListResponse contains the response from method OperationsClient.List.
type OperationsClientListResponse struct {
	OperationsClientListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// OperationsClientListResult contains the result from method OperationsClient.List.
type OperationsClientListResult struct {
	OperationListResult
}

package serialconsole

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/tracing"
	"net/http"
)

// SerialPortsClient is the the Azure Serial Console allows you to access the serial console of a Virtual Machine or VM
// scale set instance
type SerialPortsClient struct {
	BaseClient
}

// NewSerialPortsClient creates an instance of the SerialPortsClient client.
func NewSerialPortsClient(subscriptionID string) SerialPortsClient {
	return NewSerialPortsClientWithBaseURI(DefaultBaseURI, subscriptionID)
}

// NewSerialPortsClientWithBaseURI creates an instance of the SerialPortsClient client using a custom endpoint.  Use
// this when interacting with an Azure cloud that uses a non-standard base URI (sovereign clouds, Azure stack).
func NewSerialPortsClientWithBaseURI(baseURI string, subscriptionID string) SerialPortsClient {
	return SerialPortsClient{NewWithBaseURI(baseURI, subscriptionID)}
}

// Connect connect to serial port of the target resource
// Parameters:
// resourceGroupName - the name of the resource group.
// resourceProviderNamespace - the namespace of the resource provider.
// parentResourceType - the resource type of the parent resource.  For example: 'virtualMachines' or
// 'virtualMachineScaleSets'
// parentResource - the resource name, or subordinate path, for the parent of the serial port. For example: the
// name of the virtual machine.
// serialPort - the name of the serial port to connect to.
func (client SerialPortsClient) Connect(ctx context.Context, resourceGroupName string, resourceProviderNamespace string, parentResourceType string, parentResource string, serialPort string) (result SerialPortConnectResult, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/SerialPortsClient.Connect")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.ConnectPreparer(ctx, resourceGroupName, resourceProviderNamespace, parentResourceType, parentResource, serialPort)
	if err != nil {
		err = autorest.NewErrorWithError(err, "serialconsole.SerialPortsClient", "Connect", nil, "Failure preparing request")
		return
	}

	resp, err := client.ConnectSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "serialconsole.SerialPortsClient", "Connect", resp, "Failure sending request")
		return
	}

	result, err = client.ConnectResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "serialconsole.SerialPortsClient", "Connect", resp, "Failure responding to request")
		return
	}

	return
}

// ConnectPreparer prepares the Connect request.
func (client SerialPortsClient) ConnectPreparer(ctx context.Context, resourceGroupName string, resourceProviderNamespace string, parentResourceType string, parentResource string, serialPort string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"parentResource":            autorest.Encode("path", parentResource),
		"parentResourceType":        parentResourceType,
		"resourceGroupName":         autorest.Encode("path", resourceGroupName),
		"resourceProviderNamespace": autorest.Encode("path", resourceProviderNamespace),
		"serialPort":                autorest.Encode("path", serialPort),
		"subscriptionId":            autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2018-05-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourceType}/{parentResource}/providers/Microsoft.SerialConsole/serialPorts/{serialPort}/connect", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ConnectSender sends the Connect request. The method will close the
// http.Response Body if it receives an error.
func (client SerialPortsClient) ConnectSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// ConnectResponder handles the response to the Connect request. The method always
// closes the http.Response Body.
func (client SerialPortsClient) ConnectResponder(resp *http.Response) (result SerialPortConnectResult, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Create creates or updates a serial port
// Parameters:
// resourceGroupName - the name of the resource group.
// resourceProviderNamespace - the namespace of the resource provider.
// parentResourceType - the resource type of the parent resource.  For example: 'virtualMachines' or
// 'virtualMachineScaleSets'
// parentResource - the resource name, or subordinate path, for the parent of the serial port. For example: the
// name of the virtual machine.
// serialPort - the name of the serial port to create.
// parameters - parameters supplied to create the serial port.
func (client SerialPortsClient) Create(ctx context.Context, resourceGroupName string, resourceProviderNamespace string, parentResourceType string, parentResource string, serialPort string, parameters SerialPort) (result SerialPort, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/SerialPortsClient.Create")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.CreatePreparer(ctx, resourceGroupName, resourceProviderNamespace, parentResourceType, parentResource, serialPort, parameters)
	if err != nil {
		err = autorest.NewErrorWithError(err, "serialconsole.SerialPortsClient", "Create", nil, "Failure preparing request")
		return
	}

	resp, err := client.CreateSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "serialconsole.SerialPortsClient", "Create", resp, "Failure sending request")
		return
	}

	result, err = client.CreateResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "serialconsole.SerialPortsClient", "Create", resp, "Failure responding to request")
		return
	}

	return
}

// CreatePreparer prepares the Create request.
func (client SerialPortsClient) CreatePreparer(ctx context.Context, resourceGroupName string, resourceProviderNamespace string, parentResourceType string, parentResource string, serialPort string, parameters SerialPort) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"parentResource":            autorest.Encode("path", parentResource),
		"parentResourceType":        parentResourceType,
		"resourceGroupName":         autorest.Encode("path", resourceGroupName),
		"resourceProviderNamespace": autorest.Encode("path", resourceProviderNamespace),
		"serialPort":                autorest.Encode("path", serialPort),
		"subscriptionId":            autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2018-05-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourceType}/{parentResource}/providers/Microsoft.SerialConsole/serialPorts/{serialPort}", pathParameters),
		autorest.WithJSON(parameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// CreateSender sends the Create request. The method will close the
// http.Response Body if it receives an error.
func (client SerialPortsClient) CreateSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// CreateResponder handles the response to the Create request. The method always
// closes the http.Response Body.
func (client SerialPortsClient) CreateResponder(resp *http.Response) (result SerialPort, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusCreated),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Delete deletes a serial port
// Parameters:
// resourceGroupName - the name of the resource group.
// resourceProviderNamespace - the namespace of the resource provider.
// parentResourceType - the resource type of the parent resource.  For example: 'virtualMachines' or
// 'virtualMachineScaleSets'
// parentResource - the resource name, or subordinate path, for the parent of the serial port. For example: the
// name of the virtual machine.
// serialPort - the name of the serial port to delete.
func (client SerialPortsClient) Delete(ctx context.Context, resourceGroupName string, resourceProviderNamespace string, parentResourceType string, parentResource string, serialPort string) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/SerialPortsClient.Delete")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.DeletePreparer(ctx, resourceGroupName, resourceProviderNamespace, parentResourceType, parentResource, serialPort)
	if err != nil {
		err = autorest.NewErrorWithError(err, "serialconsole.SerialPortsClient", "Delete", nil, "Failure preparing request")
		return
	}

	resp, err := client.DeleteSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "serialconsole.SerialPortsClient", "Delete", resp, "Failure sending request")
		return
	}

	result, err = client.DeleteResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "serialconsole.SerialPortsClient", "Delete", resp, "Failure responding to request")
		return
	}

	return
}

// DeletePreparer prepares the Delete request.
func (client SerialPortsClient) DeletePreparer(ctx context.Context, resourceGroupName string, resourceProviderNamespace string, parentResourceType string, parentResource string, serialPort string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"parentResource":            autorest.Encode("path", parentResource),
		"parentResourceType":        parentResourceType,
		"resourceGroupName":         autorest.Encode("path", resourceGroupName),
		"resourceProviderNamespace": autorest.Encode("path", resourceProviderNamespace),
		"serialPort":                autorest.Encode("path", serialPort),
		"subscriptionId":            autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2018-05-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsDelete(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourceType}/{parentResource}/providers/Microsoft.SerialConsole/serialPorts/{serialPort}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// DeleteSender sends the Delete request. The method will close the
// http.Response Body if it receives an error.
func (client SerialPortsClient) DeleteSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// DeleteResponder handles the response to the Delete request. The method always
// closes the http.Response Body.
func (client SerialPortsClient) DeleteResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusNoContent),
		autorest.ByClosing())
	result.Response = resp
	return
}

// Get gets the configured settings for a serial port
// Parameters:
// resourceGroupName - the name of the resource group.
// resourceProviderNamespace - the namespace of the resource provider.
// parentResourceType - the resource type of the parent resource.  For example: 'virtualMachines' or
// 'virtualMachineScaleSets'
// parentResource - the resource name, or subordinate path, for the parent of the serial port. For example: the
// name of the virtual machine.
// serialPort - the name of the serial port to connect to.
func (client SerialPortsClient) Get(ctx context.Context, resourceGroupName string, resourceProviderNamespace string, parentResourceType string, parentResource string, serialPort string) (result SerialPort, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/SerialPortsClient.Get")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.GetPreparer(ctx, resourceGroupName, resourceProviderNamespace, parentResourceType, parentResource, serialPort)
	if err != nil {
		err = autorest.NewErrorWithError(err, "serialconsole.SerialPortsClient", "Get", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "serialconsole.SerialPortsClient", "Get", resp, "Failure sending request")
		return
	}

	result, err = client.GetResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "serialconsole.SerialPortsClient", "Get", resp, "Failure responding to request")
		return
	}

	return
}

// GetPreparer prepares the Get request.
func (client SerialPortsClient) GetPreparer(ctx context.Context, resourceGroupName string, resourceProviderNamespace string, parentResourceType string, parentResource string, serialPort string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"parentResource":            autorest.Encode("path", parentResource),
		"parentResourceType":        parentResourceType,
		"resourceGroupName":         autorest.Encode("path", resourceGroupName),
		"resourceProviderNamespace": autorest.Encode("path", resourceProviderNamespace),
		"serialPort":                autorest.Encode("path", serialPort),
		"subscriptionId":            autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2018-05-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourceType}/{parentResource}/providers/Microsoft.SerialConsole/serialPorts/{serialPort}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetSender sends the Get request. The method will close the
// http.Response Body if it receives an error.
func (client SerialPortsClient) GetSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// GetResponder handles the response to the Get request. The method always
// closes the http.Response Body.
func (client SerialPortsClient) GetResponder(resp *http.Response) (result SerialPort, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// List lists all of the configured serial ports for a parent resource
// Parameters:
// resourceGroupName - the name of the resource group.
// resourceProviderNamespace - the namespace of the resource provider.
// parentResourceType - the resource type of the parent resource.  For example: 'virtualMachines' or
// 'virtualMachineScaleSets'
// parentResource - the resource name, or subordinate path, for the parent of the serial port. For example: the
// name of the virtual machine.
func (client SerialPortsClient) List(ctx context.Context, resourceGroupName string, resourceProviderNamespace string, parentResourceType string, parentResource string) (result SerialPortListResult, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/SerialPortsClient.List")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.ListPreparer(ctx, resourceGroupName, resourceProviderNamespace, parentResourceType, parentResource)
	if err != nil {
		err = autorest.NewErrorWithError(err, "serialconsole.SerialPortsClient", "List", nil, "Failure preparing request")
		return
	}

	resp, err := client.ListSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "serialconsole.SerialPortsClient", "List", resp, "Failure sending request")
		return
	}

	result, err = client.ListResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "serialconsole.SerialPortsClient", "List", resp, "Failure responding to request")
		return
	}

	return
}

// ListPreparer prepares the List request.
func (client SerialPortsClient) ListPreparer(ctx context.Context, resourceGroupName string, resourceProviderNamespace string, parentResourceType string, parentResource string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"parentResource":            autorest.Encode("path", parentResource),
		"parentResourceType":        parentResourceType,
		"resourceGroupName":         autorest.Encode("path", resourceGroupName),
		"resourceProviderNamespace": autorest.Encode("path", resourceProviderNamespace),
		"subscriptionId":            autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2018-05-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourceType}/{parentResource}/providers/Microsoft.SerialConsole/serialPorts", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ListSender sends the List request. The method will close the
// http.Response Body if it receives an error.
func (client SerialPortsClient) ListSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// ListResponder handles the response to the List request. The method always
// closes the http.Response Body.
func (client SerialPortsClient) ListResponder(resp *http.Response) (result SerialPortListResult, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// ListBySubscriptions handles requests to list all SerialPort resources in a subscription.
func (client SerialPortsClient) ListBySubscriptions(ctx context.Context) (result SerialPortListResult, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/SerialPortsClient.ListBySubscriptions")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.ListBySubscriptionsPreparer(ctx)
	if err != nil {
		err = autorest.NewErrorWithError(err, "serialconsole.SerialPortsClient", "ListBySubscriptions", nil, "Failure preparing request")
		return
	}

	resp, err := client.ListBySubscriptionsSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "serialconsole.SerialPortsClient", "ListBySubscriptions", resp, "Failure sending request")
		return
	}

	result, err = client.ListBySubscriptionsResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "serialconsole.SerialPortsClient", "ListBySubscriptions", resp, "Failure responding to request")
		return
	}

	return
}

// ListBySubscriptionsPreparer prepares the ListBySubscriptions request.
func (client SerialPortsClient) ListBySubscriptionsPreparer(ctx context.Context) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"subscriptionId": autorest.Encode("path", client.SubscriptionID),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/providers/Microsoft.SerialConsole/serialPorts", pathParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ListBySubscriptionsSender sends the ListBySubscriptions request. The method will close the
// http.Response Body if it receives an error.
func (client SerialPortsClient) ListBySubscriptionsSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// ListBySubscriptionsResponder handles the response to the ListBySubscriptions request. The method always
// closes the http.Response Body.
func (client SerialPortsClient) ListBySubscriptionsResponder(resp *http.Response) (result SerialPortListResult, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

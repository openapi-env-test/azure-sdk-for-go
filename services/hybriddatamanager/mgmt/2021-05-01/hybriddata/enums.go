package hybriddata

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

// IsJobCancellable enumerates the values for is job cancellable.
type IsJobCancellable string

const (
	// Cancellable ...
	Cancellable IsJobCancellable = "Cancellable"
	// NotCancellable ...
	NotCancellable IsJobCancellable = "NotCancellable"
)

// PossibleIsJobCancellableValues returns an array of possible values for the IsJobCancellable const type.
func PossibleIsJobCancellableValues() []IsJobCancellable {
	return []IsJobCancellable{Cancellable, NotCancellable}
}

// JobDefinitionState enumerates the values for job definition state.
type JobDefinitionState string

const (
	// Cancelled ...
	Cancelled JobDefinitionState = "Cancelled"
	// Cancelling ...
	Cancelling JobDefinitionState = "Cancelling"
	// Complete ...
	Complete JobDefinitionState = "Complete"
	// Created ...
	Created JobDefinitionState = "Created"
	// Paused ...
	Paused JobDefinitionState = "Paused"
	// Queueing ...
	Queueing JobDefinitionState = "Queueing"
	// Running ...
	Running JobDefinitionState = "Running"
	// Waiting ...
	Waiting JobDefinitionState = "Waiting"
)

// PossibleJobDefinitionStateValues returns an array of possible values for the JobDefinitionState const type.
func PossibleJobDefinitionStateValues() []JobDefinitionState {
	return []JobDefinitionState{Cancelled, Cancelling, Complete, Created, Paused, Queueing, Running, Waiting}
}

// JobStatus enumerates the values for job status.
type JobStatus string

const (
	// JobStatusCancelled ...
	JobStatusCancelled JobStatus = "Cancelled"
	// JobStatusCancelledRetried ...
	JobStatusCancelledRetried JobStatus = "Cancelled_Retried"
	// JobStatusCancelledSkipped ...
	JobStatusCancelledSkipped JobStatus = "Cancelled_Skipped"
	// JobStatusCancelling ...
	JobStatusCancelling JobStatus = "Cancelling"
	// JobStatusFailed ...
	JobStatusFailed JobStatus = "Failed"
	// JobStatusFailedRetried ...
	JobStatusFailedRetried JobStatus = "Failed_Retried"
	// JobStatusFailedSkipped ...
	JobStatusFailedSkipped JobStatus = "Failed_Skipped"
	// JobStatusInProgress ...
	JobStatusInProgress JobStatus = "InProgress"
	// JobStatusNone ...
	JobStatusNone JobStatus = "None"
	// JobStatusPartiallySucceeded ...
	JobStatusPartiallySucceeded JobStatus = "PartiallySucceeded"
	// JobStatusSucceeded ...
	JobStatusSucceeded JobStatus = "Succeeded"
	// JobStatusWaiting ...
	JobStatusWaiting JobStatus = "Waiting"
	// JobStatusWaitingForAction ...
	JobStatusWaitingForAction JobStatus = "WaitingForAction"
)

// PossibleJobStatusValues returns an array of possible values for the JobStatus const type.
func PossibleJobStatusValues() []JobStatus {
	return []JobStatus{JobStatusCancelled, JobStatusCancelledRetried, JobStatusCancelledSkipped, JobStatusCancelling, JobStatusFailed, JobStatusFailedRetried, JobStatusFailedSkipped, JobStatusInProgress, JobStatusNone, JobStatusPartiallySucceeded, JobStatusSucceeded, JobStatusWaiting, JobStatusWaitingForAction}
}

// RunLocation enumerates the values for run location.
type RunLocation string

const (
	// Australiaeast ...
	Australiaeast RunLocation = "australiaeast"
	// Australiasoutheast ...
	Australiasoutheast RunLocation = "australiasoutheast"
	// Brazilsouth ...
	Brazilsouth RunLocation = "brazilsouth"
	// Canadacentral ...
	Canadacentral RunLocation = "canadacentral"
	// Canadaeast ...
	Canadaeast RunLocation = "canadaeast"
	// Centralindia ...
	Centralindia RunLocation = "centralindia"
	// Centralus ...
	Centralus RunLocation = "centralus"
	// Eastasia ...
	Eastasia RunLocation = "eastasia"
	// Eastus ...
	Eastus RunLocation = "eastus"
	// Eastus2 ...
	Eastus2 RunLocation = "eastus2"
	// Japaneast ...
	Japaneast RunLocation = "japaneast"
	// Japanwest ...
	Japanwest RunLocation = "japanwest"
	// Koreacentral ...
	Koreacentral RunLocation = "koreacentral"
	// Koreasouth ...
	Koreasouth RunLocation = "koreasouth"
	// None ...
	None RunLocation = "none"
	// Northcentralus ...
	Northcentralus RunLocation = "northcentralus"
	// Northeurope ...
	Northeurope RunLocation = "northeurope"
	// Southcentralus ...
	Southcentralus RunLocation = "southcentralus"
	// Southeastasia ...
	Southeastasia RunLocation = "southeastasia"
	// Southindia ...
	Southindia RunLocation = "southindia"
	// Uksouth ...
	Uksouth RunLocation = "uksouth"
	// Ukwest ...
	Ukwest RunLocation = "ukwest"
	// Westcentralus ...
	Westcentralus RunLocation = "westcentralus"
	// Westeurope ...
	Westeurope RunLocation = "westeurope"
	// Westindia ...
	Westindia RunLocation = "westindia"
	// Westus ...
	Westus RunLocation = "westus"
	// Westus2 ...
	Westus2 RunLocation = "westus2"
)

// PossibleRunLocationValues returns an array of possible values for the RunLocation const type.
func PossibleRunLocationValues() []RunLocation {
	return []RunLocation{Australiaeast, Australiasoutheast, Brazilsouth, Canadacentral, Canadaeast, Centralindia, Centralus, Eastasia, Eastus, Eastus2, Japaneast, Japanwest, Koreacentral, Koreasouth, None, Northcentralus, Northeurope, Southcentralus, Southeastasia, Southindia, Uksouth, Ukwest, Westcentralus, Westeurope, Westindia, Westus, Westus2}
}

// State enumerates the values for state.
type State string

const (
	// Disabled ...
	Disabled State = "Disabled"
	// Enabled ...
	Enabled State = "Enabled"
	// Supported ...
	Supported State = "Supported"
)

// PossibleStateValues returns an array of possible values for the State const type.
func PossibleStateValues() []State {
	return []State{Disabled, Enabled, Supported}
}

// SupportedAlgorithm enumerates the values for supported algorithm.
type SupportedAlgorithm string

const (
	// SupportedAlgorithmNone ...
	SupportedAlgorithmNone SupportedAlgorithm = "None"
	// SupportedAlgorithmPlainText ...
	SupportedAlgorithmPlainText SupportedAlgorithm = "PlainText"
	// SupportedAlgorithmRSA15 ...
	SupportedAlgorithmRSA15 SupportedAlgorithm = "RSA1_5"
	// SupportedAlgorithmRSAOAEP ...
	SupportedAlgorithmRSAOAEP SupportedAlgorithm = "RSA_OAEP"
)

// PossibleSupportedAlgorithmValues returns an array of possible values for the SupportedAlgorithm const type.
func PossibleSupportedAlgorithmValues() []SupportedAlgorithm {
	return []SupportedAlgorithm{SupportedAlgorithmNone, SupportedAlgorithmPlainText, SupportedAlgorithmRSA15, SupportedAlgorithmRSAOAEP}
}

// UserConfirmation enumerates the values for user confirmation.
type UserConfirmation string

const (
	// NotRequired ...
	NotRequired UserConfirmation = "NotRequired"
	// Required ...
	Required UserConfirmation = "Required"
)

// PossibleUserConfirmationValues returns an array of possible values for the UserConfirmation const type.
func PossibleUserConfirmationValues() []UserConfirmation {
	return []UserConfirmation{NotRequired, Required}
}

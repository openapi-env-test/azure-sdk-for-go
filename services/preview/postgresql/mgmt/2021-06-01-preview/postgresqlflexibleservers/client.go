// Package postgresqlflexibleservers implements the Azure ARM Postgresqlflexibleservers service API version .
//
// The Microsoft Azure management API provides create, read, update, and delete functionality for Azure PostgreSQL
// resources including servers, databases, firewall rules, VNET rules, security alert policies, log files and
// configurations with new business model.
package postgresqlflexibleservers

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/autorest/validation"
	"github.com/Azure/go-autorest/tracing"
	"net/http"
)

const (
	// DefaultBaseURI is the default URI used for the service Postgresqlflexibleservers
	DefaultBaseURI = "https://management.azure.com"
)

// BaseClient is the base client for Postgresqlflexibleservers.
type BaseClient struct {
	autorest.Client
	BaseURI        string
	SubscriptionID string
}

// New creates an instance of the BaseClient client.
func New(subscriptionID string) BaseClient {
	return NewWithBaseURI(DefaultBaseURI, subscriptionID)
}

// NewWithBaseURI creates an instance of the BaseClient client using a custom endpoint.  Use this when interacting with
// an Azure cloud that uses a non-standard base URI (sovereign clouds, Azure stack).
func NewWithBaseURI(baseURI string, subscriptionID string) BaseClient {
	return BaseClient{
		Client:         autorest.NewClientWithUserAgent(UserAgent()),
		BaseURI:        baseURI,
		SubscriptionID: subscriptionID,
	}
}

// CheckMigrationNameAvailability this method checks whether a proposed migration name is valid and available.
// Parameters:
// targetDBServerSubscriptionID - the subscription ID of the target database server.
// targetDBServerResourceGroupName - the resource group name of the target database server.
// targetDBServerName - the name of the target database server.
// parameters - the required parameters for checking if a migration name is available.
func (client BaseClient) CheckMigrationNameAvailability(ctx context.Context, targetDBServerSubscriptionID string, targetDBServerResourceGroupName string, targetDBServerName string, parameters MigrationNameAvailabilityResource) (result MigrationNameAvailabilityResource, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.CheckMigrationNameAvailability")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: parameters,
			Constraints: []validation.Constraint{{Target: "parameters.Name", Name: validation.Null, Rule: true, Chain: nil},
				{Target: "parameters.Type", Name: validation.Null, Rule: true, Chain: nil}}}}); err != nil {
		return result, validation.NewError("postgresqlflexibleservers.BaseClient", "CheckMigrationNameAvailability", err.Error())
	}

	req, err := client.CheckMigrationNameAvailabilityPreparer(ctx, targetDBServerSubscriptionID, targetDBServerResourceGroupName, targetDBServerName, parameters)
	if err != nil {
		err = autorest.NewErrorWithError(err, "postgresqlflexibleservers.BaseClient", "CheckMigrationNameAvailability", nil, "Failure preparing request")
		return
	}

	resp, err := client.CheckMigrationNameAvailabilitySender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "postgresqlflexibleservers.BaseClient", "CheckMigrationNameAvailability", resp, "Failure sending request")
		return
	}

	result, err = client.CheckMigrationNameAvailabilityResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "postgresqlflexibleservers.BaseClient", "CheckMigrationNameAvailability", resp, "Failure responding to request")
		return
	}

	return
}

// CheckMigrationNameAvailabilityPreparer prepares the CheckMigrationNameAvailability request.
func (client BaseClient) CheckMigrationNameAvailabilityPreparer(ctx context.Context, targetDBServerSubscriptionID string, targetDBServerResourceGroupName string, targetDBServerName string, parameters MigrationNameAvailabilityResource) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"targetDBServerName":              autorest.Encode("path", targetDBServerName),
		"targetDBServerResourceGroupName": autorest.Encode("path", targetDBServerResourceGroupName),
		"targetDBServerSubscriptionId":    autorest.Encode("path", targetDBServerSubscriptionID),
	}

	const APIVersion = "2021-06-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	parameters.NameAvailable = nil
	parameters.Reason = ""
	parameters.Message = nil
	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{targetDBServerSubscriptionId}/resourceGroups/{targetDBServerResourceGroupName}/providers/Microsoft.DBforPostgreSQL/flexibleServers/{targetDBServerName}/checkMigrationNameAvailability", pathParameters),
		autorest.WithJSON(parameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// CheckMigrationNameAvailabilitySender sends the CheckMigrationNameAvailability request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) CheckMigrationNameAvailabilitySender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// CheckMigrationNameAvailabilityResponder handles the response to the CheckMigrationNameAvailability request. The method always
// closes the http.Response Body.
func (client BaseClient) CheckMigrationNameAvailabilityResponder(resp *http.Response) (result MigrationNameAvailabilityResource, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

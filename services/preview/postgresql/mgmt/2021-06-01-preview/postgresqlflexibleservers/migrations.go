package postgresqlflexibleservers

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/autorest/validation"
	"github.com/Azure/go-autorest/tracing"
	"net/http"
)

// MigrationsClient is the the Microsoft Azure management API provides create, read, update, and delete functionality
// for Azure PostgreSQL resources including servers, databases, firewall rules, VNET rules, security alert policies,
// log files and configurations with new business model.
type MigrationsClient struct {
	BaseClient
}

// NewMigrationsClient creates an instance of the MigrationsClient client.
func NewMigrationsClient(subscriptionID string) MigrationsClient {
	return NewMigrationsClientWithBaseURI(DefaultBaseURI, subscriptionID)
}

// NewMigrationsClientWithBaseURI creates an instance of the MigrationsClient client using a custom endpoint.  Use this
// when interacting with an Azure cloud that uses a non-standard base URI (sovereign clouds, Azure stack).
func NewMigrationsClientWithBaseURI(baseURI string, subscriptionID string) MigrationsClient {
	return MigrationsClient{NewWithBaseURI(baseURI, subscriptionID)}
}

// Create creates a new migration.
// Parameters:
// targetDBServerSubscriptionID - the subscription ID of the target database server.
// targetDBServerResourceGroupName - the resource group name of the target database server.
// targetDBServerName - the name of the target database server.
// migrationName - the name of the migration.
// parameters - the required parameters for creating a migration.
func (client MigrationsClient) Create(ctx context.Context, targetDBServerSubscriptionID string, targetDBServerResourceGroupName string, targetDBServerName string, migrationName string, parameters MigrationResource) (result MigrationResource, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/MigrationsClient.Create")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: parameters,
			Constraints: []validation.Constraint{{Target: "parameters.MigrationResourceProperties", Name: validation.Null, Rule: false,
				Chain: []validation.Constraint{{Target: "parameters.MigrationResourceProperties.SourceDBServerMetadata", Name: validation.Null, Rule: false,
					Chain: []validation.Constraint{{Target: "parameters.MigrationResourceProperties.SourceDBServerMetadata.Sku", Name: validation.Null, Rule: false,
						Chain: []validation.Constraint{{Target: "parameters.MigrationResourceProperties.SourceDBServerMetadata.Sku.Name", Name: validation.Null, Rule: true, Chain: nil}}},
					}},
					{Target: "parameters.MigrationResourceProperties.TargetDBServerMetadata", Name: validation.Null, Rule: false,
						Chain: []validation.Constraint{{Target: "parameters.MigrationResourceProperties.TargetDBServerMetadata.Sku", Name: validation.Null, Rule: false,
							Chain: []validation.Constraint{{Target: "parameters.MigrationResourceProperties.TargetDBServerMetadata.Sku.Name", Name: validation.Null, Rule: true, Chain: nil}}},
						}},
					{Target: "parameters.MigrationResourceProperties.SecretParameters", Name: validation.Null, Rule: false,
						Chain: []validation.Constraint{{Target: "parameters.MigrationResourceProperties.SecretParameters.AdminCredentials", Name: validation.Null, Rule: true,
							Chain: []validation.Constraint{{Target: "parameters.MigrationResourceProperties.SecretParameters.AdminCredentials.SourceServerPassword", Name: validation.Null, Rule: true, Chain: nil},
								{Target: "parameters.MigrationResourceProperties.SecretParameters.AdminCredentials.TargetServerPassword", Name: validation.Null, Rule: true, Chain: nil},
							}},
							{Target: "parameters.MigrationResourceProperties.SecretParameters.AadApp", Name: validation.Null, Rule: true,
								Chain: []validation.Constraint{{Target: "parameters.MigrationResourceProperties.SecretParameters.AadApp.AadSecret", Name: validation.Null, Rule: true, Chain: nil},
									{Target: "parameters.MigrationResourceProperties.SecretParameters.AadApp.ClientID", Name: validation.Null, Rule: true, Chain: nil},
									{Target: "parameters.MigrationResourceProperties.SecretParameters.AadApp.TenantID", Name: validation.Null, Rule: true, Chain: nil},
								}},
						}},
					{Target: "parameters.MigrationResourceProperties.DBsToMigrate", Name: validation.Null, Rule: false,
						Chain: []validation.Constraint{{Target: "parameters.MigrationResourceProperties.DBsToMigrate", Name: validation.MaxItems, Rule: 8, Chain: nil}}},
				}}}}}); err != nil {
		return result, validation.NewError("postgresqlflexibleservers.MigrationsClient", "Create", err.Error())
	}

	req, err := client.CreatePreparer(ctx, targetDBServerSubscriptionID, targetDBServerResourceGroupName, targetDBServerName, migrationName, parameters)
	if err != nil {
		err = autorest.NewErrorWithError(err, "postgresqlflexibleservers.MigrationsClient", "Create", nil, "Failure preparing request")
		return
	}

	resp, err := client.CreateSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "postgresqlflexibleservers.MigrationsClient", "Create", resp, "Failure sending request")
		return
	}

	result, err = client.CreateResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "postgresqlflexibleservers.MigrationsClient", "Create", resp, "Failure responding to request")
		return
	}

	return
}

// CreatePreparer prepares the Create request.
func (client MigrationsClient) CreatePreparer(ctx context.Context, targetDBServerSubscriptionID string, targetDBServerResourceGroupName string, targetDBServerName string, migrationName string, parameters MigrationResource) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"migrationName":                   autorest.Encode("path", migrationName),
		"targetDBServerName":              autorest.Encode("path", targetDBServerName),
		"targetDBServerResourceGroupName": autorest.Encode("path", targetDBServerResourceGroupName),
		"targetDBServerSubscriptionId":    autorest.Encode("path", targetDBServerSubscriptionID),
	}

	const APIVersion = "2021-06-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	parameters.SystemData = nil
	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{targetDBServerSubscriptionId}/resourceGroups/{targetDBServerResourceGroupName}/providers/Microsoft.DBforPostgreSQL/flexibleServers/{targetDBServerName}/migrations/{migrationName}", pathParameters),
		autorest.WithJSON(parameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// CreateSender sends the Create request. The method will close the
// http.Response Body if it receives an error.
func (client MigrationsClient) CreateSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// CreateResponder handles the response to the Create request. The method always
// closes the http.Response Body.
func (client MigrationsClient) CreateResponder(resp *http.Response) (result MigrationResource, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusCreated),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Delete deletes a migration.
// Parameters:
// targetDBServerSubscriptionID - the subscription ID of the target database server.
// targetDBServerResourceGroupName - the resource group name of the target database server.
// targetDBServerName - the name of the target database server.
// migrationName - the name of the migration.
func (client MigrationsClient) Delete(ctx context.Context, targetDBServerSubscriptionID string, targetDBServerResourceGroupName string, targetDBServerName string, migrationName string) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/MigrationsClient.Delete")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.DeletePreparer(ctx, targetDBServerSubscriptionID, targetDBServerResourceGroupName, targetDBServerName, migrationName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "postgresqlflexibleservers.MigrationsClient", "Delete", nil, "Failure preparing request")
		return
	}

	resp, err := client.DeleteSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "postgresqlflexibleservers.MigrationsClient", "Delete", resp, "Failure sending request")
		return
	}

	result, err = client.DeleteResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "postgresqlflexibleservers.MigrationsClient", "Delete", resp, "Failure responding to request")
		return
	}

	return
}

// DeletePreparer prepares the Delete request.
func (client MigrationsClient) DeletePreparer(ctx context.Context, targetDBServerSubscriptionID string, targetDBServerResourceGroupName string, targetDBServerName string, migrationName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"migrationName":                   autorest.Encode("path", migrationName),
		"targetDBServerName":              autorest.Encode("path", targetDBServerName),
		"targetDBServerResourceGroupName": autorest.Encode("path", targetDBServerResourceGroupName),
		"targetDBServerSubscriptionId":    autorest.Encode("path", targetDBServerSubscriptionID),
	}

	const APIVersion = "2021-06-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsDelete(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{targetDBServerSubscriptionId}/resourceGroups/{targetDBServerResourceGroupName}/providers/Microsoft.DBforPostgreSQL/flexibleServers/{targetDBServerName}/migrations/{migrationName}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// DeleteSender sends the Delete request. The method will close the
// http.Response Body if it receives an error.
func (client MigrationsClient) DeleteSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// DeleteResponder handles the response to the Delete request. The method always
// closes the http.Response Body.
func (client MigrationsClient) DeleteResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusNoContent),
		autorest.ByClosing())
	result.Response = resp
	return
}

// Get gets details of a migration.
// Parameters:
// targetDBServerSubscriptionID - the subscription ID of the target database server.
// targetDBServerResourceGroupName - the resource group name of the target database server.
// targetDBServerName - the name of the target database server.
// migrationName - the name of the migration.
func (client MigrationsClient) Get(ctx context.Context, targetDBServerSubscriptionID string, targetDBServerResourceGroupName string, targetDBServerName string, migrationName string) (result MigrationResource, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/MigrationsClient.Get")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.GetPreparer(ctx, targetDBServerSubscriptionID, targetDBServerResourceGroupName, targetDBServerName, migrationName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "postgresqlflexibleservers.MigrationsClient", "Get", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "postgresqlflexibleservers.MigrationsClient", "Get", resp, "Failure sending request")
		return
	}

	result, err = client.GetResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "postgresqlflexibleservers.MigrationsClient", "Get", resp, "Failure responding to request")
		return
	}

	return
}

// GetPreparer prepares the Get request.
func (client MigrationsClient) GetPreparer(ctx context.Context, targetDBServerSubscriptionID string, targetDBServerResourceGroupName string, targetDBServerName string, migrationName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"migrationName":                   autorest.Encode("path", migrationName),
		"targetDBServerName":              autorest.Encode("path", targetDBServerName),
		"targetDBServerResourceGroupName": autorest.Encode("path", targetDBServerResourceGroupName),
		"targetDBServerSubscriptionId":    autorest.Encode("path", targetDBServerSubscriptionID),
	}

	const APIVersion = "2021-06-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{targetDBServerSubscriptionId}/resourceGroups/{targetDBServerResourceGroupName}/providers/Microsoft.DBforPostgreSQL/flexibleServers/{targetDBServerName}/migrations/{migrationName}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetSender sends the Get request. The method will close the
// http.Response Body if it receives an error.
func (client MigrationsClient) GetSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// GetResponder handles the response to the Get request. The method always
// closes the http.Response Body.
func (client MigrationsClient) GetResponder(resp *http.Response) (result MigrationResource, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// ListByTargetServer list all the migrations on a given target server.
// Parameters:
// targetDBServerSubscriptionID - the subscription ID of the target database server.
// targetDBServerResourceGroupName - the resource group name of the target database server.
// targetDBServerName - the name of the target database server.
// migrationListFilter - migration list filter. Retrieves either active migrations or all migrations.
func (client MigrationsClient) ListByTargetServer(ctx context.Context, targetDBServerSubscriptionID string, targetDBServerResourceGroupName string, targetDBServerName string, migrationListFilter MigrationListFilter) (result MigrationResourceListResultPage, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/MigrationsClient.ListByTargetServer")
		defer func() {
			sc := -1
			if result.mrlr.Response.Response != nil {
				sc = result.mrlr.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	result.fn = client.listByTargetServerNextResults
	req, err := client.ListByTargetServerPreparer(ctx, targetDBServerSubscriptionID, targetDBServerResourceGroupName, targetDBServerName, migrationListFilter)
	if err != nil {
		err = autorest.NewErrorWithError(err, "postgresqlflexibleservers.MigrationsClient", "ListByTargetServer", nil, "Failure preparing request")
		return
	}

	resp, err := client.ListByTargetServerSender(req)
	if err != nil {
		result.mrlr.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "postgresqlflexibleservers.MigrationsClient", "ListByTargetServer", resp, "Failure sending request")
		return
	}

	result.mrlr, err = client.ListByTargetServerResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "postgresqlflexibleservers.MigrationsClient", "ListByTargetServer", resp, "Failure responding to request")
		return
	}
	if result.mrlr.hasNextLink() && result.mrlr.IsEmpty() {
		err = result.NextWithContext(ctx)
		return
	}

	return
}

// ListByTargetServerPreparer prepares the ListByTargetServer request.
func (client MigrationsClient) ListByTargetServerPreparer(ctx context.Context, targetDBServerSubscriptionID string, targetDBServerResourceGroupName string, targetDBServerName string, migrationListFilter MigrationListFilter) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"targetDBServerName":              autorest.Encode("path", targetDBServerName),
		"targetDBServerResourceGroupName": autorest.Encode("path", targetDBServerResourceGroupName),
		"targetDBServerSubscriptionId":    autorest.Encode("path", targetDBServerSubscriptionID),
	}

	const APIVersion = "2021-06-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}
	if len(string(migrationListFilter)) > 0 {
		queryParameters["migrationListFilter"] = autorest.Encode("query", migrationListFilter)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{targetDBServerSubscriptionId}/resourceGroups/{targetDBServerResourceGroupName}/providers/Microsoft.DBforPostgreSQL/flexibleServers/{targetDBServerName}/migrations", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ListByTargetServerSender sends the ListByTargetServer request. The method will close the
// http.Response Body if it receives an error.
func (client MigrationsClient) ListByTargetServerSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// ListByTargetServerResponder handles the response to the ListByTargetServer request. The method always
// closes the http.Response Body.
func (client MigrationsClient) ListByTargetServerResponder(resp *http.Response) (result MigrationResourceListResult, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// listByTargetServerNextResults retrieves the next set of results, if any.
func (client MigrationsClient) listByTargetServerNextResults(ctx context.Context, lastResults MigrationResourceListResult) (result MigrationResourceListResult, err error) {
	req, err := lastResults.migrationResourceListResultPreparer(ctx)
	if err != nil {
		return result, autorest.NewErrorWithError(err, "postgresqlflexibleservers.MigrationsClient", "listByTargetServerNextResults", nil, "Failure preparing next results request")
	}
	if req == nil {
		return
	}
	resp, err := client.ListByTargetServerSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		return result, autorest.NewErrorWithError(err, "postgresqlflexibleservers.MigrationsClient", "listByTargetServerNextResults", resp, "Failure sending next results request")
	}
	result, err = client.ListByTargetServerResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "postgresqlflexibleservers.MigrationsClient", "listByTargetServerNextResults", resp, "Failure responding to next results request")
	}
	return
}

// ListByTargetServerComplete enumerates all values, automatically crossing page boundaries as required.
func (client MigrationsClient) ListByTargetServerComplete(ctx context.Context, targetDBServerSubscriptionID string, targetDBServerResourceGroupName string, targetDBServerName string, migrationListFilter MigrationListFilter) (result MigrationResourceListResultIterator, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/MigrationsClient.ListByTargetServer")
		defer func() {
			sc := -1
			if result.Response().Response.Response != nil {
				sc = result.page.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	result.page, err = client.ListByTargetServer(ctx, targetDBServerSubscriptionID, targetDBServerResourceGroupName, targetDBServerName, migrationListFilter)
	return
}

// Update updates an existing migration. The request body can contain one to many of the mutable properties present in
// the migration definition. Certain property updates initiate migration state transitions.
// Parameters:
// targetDBServerSubscriptionID - the subscription ID of the target database server.
// targetDBServerResourceGroupName - the resource group name of the target database server.
// targetDBServerName - the name of the target database server.
// migrationName - the name of the migration.
// parameters - the required parameters for updating a migration.
func (client MigrationsClient) Update(ctx context.Context, targetDBServerSubscriptionID string, targetDBServerResourceGroupName string, targetDBServerName string, migrationName string, parameters MigrationResourceForPatch) (result MigrationResource, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/MigrationsClient.Update")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.UpdatePreparer(ctx, targetDBServerSubscriptionID, targetDBServerResourceGroupName, targetDBServerName, migrationName, parameters)
	if err != nil {
		err = autorest.NewErrorWithError(err, "postgresqlflexibleservers.MigrationsClient", "Update", nil, "Failure preparing request")
		return
	}

	resp, err := client.UpdateSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "postgresqlflexibleservers.MigrationsClient", "Update", resp, "Failure sending request")
		return
	}

	result, err = client.UpdateResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "postgresqlflexibleservers.MigrationsClient", "Update", resp, "Failure responding to request")
		return
	}

	return
}

// UpdatePreparer prepares the Update request.
func (client MigrationsClient) UpdatePreparer(ctx context.Context, targetDBServerSubscriptionID string, targetDBServerResourceGroupName string, targetDBServerName string, migrationName string, parameters MigrationResourceForPatch) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"migrationName":                   autorest.Encode("path", migrationName),
		"targetDBServerName":              autorest.Encode("path", targetDBServerName),
		"targetDBServerResourceGroupName": autorest.Encode("path", targetDBServerResourceGroupName),
		"targetDBServerSubscriptionId":    autorest.Encode("path", targetDBServerSubscriptionID),
	}

	const APIVersion = "2021-06-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPatch(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{targetDBServerSubscriptionId}/resourceGroups/{targetDBServerResourceGroupName}/providers/Microsoft.DBforPostgreSQL/flexibleServers/{targetDBServerName}/migrations/{migrationName}", pathParameters),
		autorest.WithJSON(parameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// UpdateSender sends the Update request. The method will close the
// http.Response Body if it receives an error.
func (client MigrationsClient) UpdateSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// UpdateResponder handles the response to the Update request. The method always
// closes the http.Response Body.
func (client MigrationsClient) UpdateResponder(resp *http.Response) (result MigrationResource, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

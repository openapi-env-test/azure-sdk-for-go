package edgeorder

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/autorest/validation"
	"github.com/Azure/go-autorest/tracing"
	"net/http"
)

// OrderItemsClient is the edge Order API's
type OrderItemsClient struct {
	BaseClient
}

// NewOrderItemsClient creates an instance of the OrderItemsClient client.
func NewOrderItemsClient(subscriptionID string) OrderItemsClient {
	return NewOrderItemsClientWithBaseURI(DefaultBaseURI, subscriptionID)
}

// NewOrderItemsClientWithBaseURI creates an instance of the OrderItemsClient client using a custom endpoint.  Use this
// when interacting with an Azure cloud that uses a non-standard base URI (sovereign clouds, Azure stack).
func NewOrderItemsClientWithBaseURI(baseURI string, subscriptionID string) OrderItemsClient {
	return OrderItemsClient{NewWithBaseURI(baseURI, subscriptionID)}
}

// Cancel cancel order item.
// Parameters:
// resourceGroupName - the name of the resource group. The name is case insensitive.
// orderItemName - the name of the order item.
// cancellationReason - reason for cancellation.
func (client OrderItemsClient) Cancel(ctx context.Context, resourceGroupName string, orderItemName string, cancellationReason CancellationReason) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/OrderItemsClient.Cancel")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: client.SubscriptionID,
			Constraints: []validation.Constraint{{Target: "client.SubscriptionID", Name: validation.MinLength, Rule: 1, Chain: nil}}},
		{TargetValue: resourceGroupName,
			Constraints: []validation.Constraint{{Target: "resourceGroupName", Name: validation.MaxLength, Rule: 90, Chain: nil},
				{Target: "resourceGroupName", Name: validation.MinLength, Rule: 1, Chain: nil}}},
		{TargetValue: cancellationReason,
			Constraints: []validation.Constraint{{Target: "cancellationReason.Reason", Name: validation.Null, Rule: true, Chain: nil}}}}); err != nil {
		return result, validation.NewError("edgeorder.OrderItemsClient", "Cancel", err.Error())
	}

	req, err := client.CancelPreparer(ctx, resourceGroupName, orderItemName, cancellationReason)
	if err != nil {
		err = autorest.NewErrorWithError(err, "edgeorder.OrderItemsClient", "Cancel", nil, "Failure preparing request")
		return
	}

	resp, err := client.CancelSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "edgeorder.OrderItemsClient", "Cancel", resp, "Failure sending request")
		return
	}

	result, err = client.CancelResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "edgeorder.OrderItemsClient", "Cancel", resp, "Failure responding to request")
		return
	}

	return
}

// CancelPreparer prepares the Cancel request.
func (client OrderItemsClient) CancelPreparer(ctx context.Context, resourceGroupName string, orderItemName string, cancellationReason CancellationReason) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"orderItemName":     autorest.Encode("path", orderItemName),
		"resourceGroupName": autorest.Encode("path", resourceGroupName),
		"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2022-05-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/orderItems/{orderItemName}/cancel", pathParameters),
		autorest.WithJSON(cancellationReason),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// CancelSender sends the Cancel request. The method will close the
// http.Response Body if it receives an error.
func (client OrderItemsClient) CancelSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// CancelResponder handles the response to the Cancel request. The method always
// closes the http.Response Body.
func (client OrderItemsClient) CancelResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusNoContent),
		autorest.ByClosing())
	result.Response = resp
	return
}

// Create create an order item. Existing order item cannot be updated with this api and should instead be updated with
// the Update order item
// API.
// Parameters:
// resourceGroupName - the name of the resource group. The name is case insensitive.
// orderItemName - the name of the order item.
// orderItemResource - order item details from request body.
func (client OrderItemsClient) Create(ctx context.Context, resourceGroupName string, orderItemName string, orderItemResource OrderItemResource) (result OrderItemsCreateFuture, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/OrderItemsClient.Create")
		defer func() {
			sc := -1
			if result.FutureAPI != nil && result.FutureAPI.Response() != nil {
				sc = result.FutureAPI.Response().StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: client.SubscriptionID,
			Constraints: []validation.Constraint{{Target: "client.SubscriptionID", Name: validation.MinLength, Rule: 1, Chain: nil}}},
		{TargetValue: resourceGroupName,
			Constraints: []validation.Constraint{{Target: "resourceGroupName", Name: validation.MaxLength, Rule: 90, Chain: nil},
				{Target: "resourceGroupName", Name: validation.MinLength, Rule: 1, Chain: nil}}},
		{TargetValue: orderItemResource,
			Constraints: []validation.Constraint{{Target: "orderItemResource.OrderItemProperties", Name: validation.Null, Rule: true,
				Chain: []validation.Constraint{{Target: "orderItemResource.OrderItemProperties.OrderItemDetails", Name: validation.Null, Rule: true,
					Chain: []validation.Constraint{{Target: "orderItemResource.OrderItemProperties.OrderItemDetails.ProductDetails", Name: validation.Null, Rule: true,
						Chain: []validation.Constraint{{Target: "orderItemResource.OrderItemProperties.OrderItemDetails.ProductDetails.HierarchyInformation", Name: validation.Null, Rule: true, Chain: nil}}},
					}},
					{Target: "orderItemResource.OrderItemProperties.AddressDetails", Name: validation.Null, Rule: true,
						Chain: []validation.Constraint{{Target: "orderItemResource.OrderItemProperties.AddressDetails.ForwardAddress", Name: validation.Null, Rule: true,
							Chain: []validation.Constraint{{Target: "orderItemResource.OrderItemProperties.AddressDetails.ForwardAddress.ShippingAddress", Name: validation.Null, Rule: false,
								Chain: []validation.Constraint{{Target: "orderItemResource.OrderItemProperties.AddressDetails.ForwardAddress.ShippingAddress.StreetAddress1", Name: validation.Null, Rule: true, Chain: nil},
									{Target: "orderItemResource.OrderItemProperties.AddressDetails.ForwardAddress.ShippingAddress.Country", Name: validation.Null, Rule: true, Chain: nil},
								}},
								{Target: "orderItemResource.OrderItemProperties.AddressDetails.ForwardAddress.ContactDetails", Name: validation.Null, Rule: true,
									Chain: []validation.Constraint{{Target: "orderItemResource.OrderItemProperties.AddressDetails.ForwardAddress.ContactDetails.ContactName", Name: validation.Null, Rule: true, Chain: nil},
										{Target: "orderItemResource.OrderItemProperties.AddressDetails.ForwardAddress.ContactDetails.Phone", Name: validation.Null, Rule: true, Chain: nil},
										{Target: "orderItemResource.OrderItemProperties.AddressDetails.ForwardAddress.ContactDetails.EmailList", Name: validation.Null, Rule: true, Chain: nil},
									}},
							}},
							{Target: "orderItemResource.OrderItemProperties.AddressDetails.ReturnAddress", Name: validation.Null, Rule: false,
								Chain: []validation.Constraint{{Target: "orderItemResource.OrderItemProperties.AddressDetails.ReturnAddress.ShippingAddress", Name: validation.Null, Rule: false,
									Chain: []validation.Constraint{{Target: "orderItemResource.OrderItemProperties.AddressDetails.ReturnAddress.ShippingAddress.StreetAddress1", Name: validation.Null, Rule: true, Chain: nil},
										{Target: "orderItemResource.OrderItemProperties.AddressDetails.ReturnAddress.ShippingAddress.Country", Name: validation.Null, Rule: true, Chain: nil},
									}},
									{Target: "orderItemResource.OrderItemProperties.AddressDetails.ReturnAddress.ContactDetails", Name: validation.Null, Rule: true,
										Chain: []validation.Constraint{{Target: "orderItemResource.OrderItemProperties.AddressDetails.ReturnAddress.ContactDetails.ContactName", Name: validation.Null, Rule: true, Chain: nil},
											{Target: "orderItemResource.OrderItemProperties.AddressDetails.ReturnAddress.ContactDetails.Phone", Name: validation.Null, Rule: true, Chain: nil},
											{Target: "orderItemResource.OrderItemProperties.AddressDetails.ReturnAddress.ContactDetails.EmailList", Name: validation.Null, Rule: true, Chain: nil},
										}},
								}},
						}},
					{Target: "orderItemResource.OrderItemProperties.OrderID", Name: validation.Null, Rule: true, Chain: nil},
				}}}}}); err != nil {
		return result, validation.NewError("edgeorder.OrderItemsClient", "Create", err.Error())
	}

	req, err := client.CreatePreparer(ctx, resourceGroupName, orderItemName, orderItemResource)
	if err != nil {
		err = autorest.NewErrorWithError(err, "edgeorder.OrderItemsClient", "Create", nil, "Failure preparing request")
		return
	}

	result, err = client.CreateSender(req)
	if err != nil {
		err = autorest.NewErrorWithError(err, "edgeorder.OrderItemsClient", "Create", result.Response(), "Failure sending request")
		return
	}

	return
}

// CreatePreparer prepares the Create request.
func (client OrderItemsClient) CreatePreparer(ctx context.Context, resourceGroupName string, orderItemName string, orderItemResource OrderItemResource) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"orderItemName":     autorest.Encode("path", orderItemName),
		"resourceGroupName": autorest.Encode("path", resourceGroupName),
		"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2022-05-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	orderItemResource.SystemData = nil
	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/orderItems/{orderItemName}", pathParameters),
		autorest.WithJSON(orderItemResource),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// CreateSender sends the Create request. The method will close the
// http.Response Body if it receives an error.
func (client OrderItemsClient) CreateSender(req *http.Request) (future OrderItemsCreateFuture, err error) {
	var resp *http.Response
	future.FutureAPI = &azure.Future{}
	resp, err = client.Send(req, azure.DoRetryWithRegistration(client.Client))
	if err != nil {
		return
	}
	var azf azure.Future
	azf, err = azure.NewFutureFromResponse(resp)
	future.FutureAPI = &azf
	future.Result = future.result
	return
}

// CreateResponder handles the response to the Create request. The method always
// closes the http.Response Body.
func (client OrderItemsClient) CreateResponder(resp *http.Response) (result OrderItemResource, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusAccepted),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Delete delete an order item.
// Parameters:
// resourceGroupName - the name of the resource group. The name is case insensitive.
// orderItemName - the name of the order item.
func (client OrderItemsClient) Delete(ctx context.Context, resourceGroupName string, orderItemName string) (result OrderItemsDeleteFuture, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/OrderItemsClient.Delete")
		defer func() {
			sc := -1
			if result.FutureAPI != nil && result.FutureAPI.Response() != nil {
				sc = result.FutureAPI.Response().StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: client.SubscriptionID,
			Constraints: []validation.Constraint{{Target: "client.SubscriptionID", Name: validation.MinLength, Rule: 1, Chain: nil}}},
		{TargetValue: resourceGroupName,
			Constraints: []validation.Constraint{{Target: "resourceGroupName", Name: validation.MaxLength, Rule: 90, Chain: nil},
				{Target: "resourceGroupName", Name: validation.MinLength, Rule: 1, Chain: nil}}}}); err != nil {
		return result, validation.NewError("edgeorder.OrderItemsClient", "Delete", err.Error())
	}

	req, err := client.DeletePreparer(ctx, resourceGroupName, orderItemName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "edgeorder.OrderItemsClient", "Delete", nil, "Failure preparing request")
		return
	}

	result, err = client.DeleteSender(req)
	if err != nil {
		err = autorest.NewErrorWithError(err, "edgeorder.OrderItemsClient", "Delete", result.Response(), "Failure sending request")
		return
	}

	return
}

// DeletePreparer prepares the Delete request.
func (client OrderItemsClient) DeletePreparer(ctx context.Context, resourceGroupName string, orderItemName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"orderItemName":     autorest.Encode("path", orderItemName),
		"resourceGroupName": autorest.Encode("path", resourceGroupName),
		"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2022-05-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsDelete(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/orderItems/{orderItemName}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// DeleteSender sends the Delete request. The method will close the
// http.Response Body if it receives an error.
func (client OrderItemsClient) DeleteSender(req *http.Request) (future OrderItemsDeleteFuture, err error) {
	var resp *http.Response
	future.FutureAPI = &azure.Future{}
	resp, err = client.Send(req, azure.DoRetryWithRegistration(client.Client))
	if err != nil {
		return
	}
	var azf azure.Future
	azf, err = azure.NewFutureFromResponse(resp)
	future.FutureAPI = &azf
	future.Result = future.result
	return
}

// DeleteResponder handles the response to the Delete request. The method always
// closes the http.Response Body.
func (client OrderItemsClient) DeleteResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent),
		autorest.ByClosing())
	result.Response = resp
	return
}

// Get get an order item.
// Parameters:
// resourceGroupName - the name of the resource group. The name is case insensitive.
// orderItemName - the name of the order item.
// expand - $expand is supported on parent device details, device details, forward shipping details and reverse
// shipping details parameters. Each of these can be provided as a comma separated list. Parent Device Details
// for order item provides details on the devices of the product, Device Details for order item provides
// details on the devices of the child configurations of the product, Forward and Reverse Shipping details
// provide forward and reverse shipping details respectively.
func (client OrderItemsClient) Get(ctx context.Context, resourceGroupName string, orderItemName string, expand string) (result OrderItemResource, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/OrderItemsClient.Get")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: client.SubscriptionID,
			Constraints: []validation.Constraint{{Target: "client.SubscriptionID", Name: validation.MinLength, Rule: 1, Chain: nil}}},
		{TargetValue: resourceGroupName,
			Constraints: []validation.Constraint{{Target: "resourceGroupName", Name: validation.MaxLength, Rule: 90, Chain: nil},
				{Target: "resourceGroupName", Name: validation.MinLength, Rule: 1, Chain: nil}}}}); err != nil {
		return result, validation.NewError("edgeorder.OrderItemsClient", "Get", err.Error())
	}

	req, err := client.GetPreparer(ctx, resourceGroupName, orderItemName, expand)
	if err != nil {
		err = autorest.NewErrorWithError(err, "edgeorder.OrderItemsClient", "Get", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "edgeorder.OrderItemsClient", "Get", resp, "Failure sending request")
		return
	}

	result, err = client.GetResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "edgeorder.OrderItemsClient", "Get", resp, "Failure responding to request")
		return
	}

	return
}

// GetPreparer prepares the Get request.
func (client OrderItemsClient) GetPreparer(ctx context.Context, resourceGroupName string, orderItemName string, expand string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"orderItemName":     autorest.Encode("path", orderItemName),
		"resourceGroupName": autorest.Encode("path", resourceGroupName),
		"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2022-05-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}
	if len(expand) > 0 {
		queryParameters["$expand"] = autorest.Encode("query", expand)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/orderItems/{orderItemName}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetSender sends the Get request. The method will close the
// http.Response Body if it receives an error.
func (client OrderItemsClient) GetSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// GetResponder handles the response to the Get request. The method always
// closes the http.Response Body.
func (client OrderItemsClient) GetResponder(resp *http.Response) (result OrderItemResource, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// ListByResourceGroup list order items at resource group level.
// Parameters:
// resourceGroupName - the name of the resource group. The name is case insensitive.
// filter - $filter is supported to filter based on order id. Filter supports only equals operation.
// expand - $expand is supported on parent device details, device details, forward shipping details and reverse
// shipping details parameters. Each of these can be provided as a comma separated list. Parent Device Details
// for order item provides details on the devices of the product, Device Details for order item provides
// details on the devices of the child configurations of the product, Forward and Reverse Shipping details
// provide forward and reverse shipping details respectively.
// skipToken - $skipToken is supported on Get list of order items, which provides the next page in the list of
// order items.
// top - $top is supported on fetching list of resources. $top=10 means that the first 10 items in the list
// will be returned to the API caller.
func (client OrderItemsClient) ListByResourceGroup(ctx context.Context, resourceGroupName string, filter string, expand string, skipToken string, top *int32) (result OrderItemResourceListPage, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/OrderItemsClient.ListByResourceGroup")
		defer func() {
			sc := -1
			if result.oirl.Response.Response != nil {
				sc = result.oirl.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: client.SubscriptionID,
			Constraints: []validation.Constraint{{Target: "client.SubscriptionID", Name: validation.MinLength, Rule: 1, Chain: nil}}},
		{TargetValue: resourceGroupName,
			Constraints: []validation.Constraint{{Target: "resourceGroupName", Name: validation.MaxLength, Rule: 90, Chain: nil},
				{Target: "resourceGroupName", Name: validation.MinLength, Rule: 1, Chain: nil}}}}); err != nil {
		return result, validation.NewError("edgeorder.OrderItemsClient", "ListByResourceGroup", err.Error())
	}

	result.fn = client.listByResourceGroupNextResults
	req, err := client.ListByResourceGroupPreparer(ctx, resourceGroupName, filter, expand, skipToken, top)
	if err != nil {
		err = autorest.NewErrorWithError(err, "edgeorder.OrderItemsClient", "ListByResourceGroup", nil, "Failure preparing request")
		return
	}

	resp, err := client.ListByResourceGroupSender(req)
	if err != nil {
		result.oirl.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "edgeorder.OrderItemsClient", "ListByResourceGroup", resp, "Failure sending request")
		return
	}

	result.oirl, err = client.ListByResourceGroupResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "edgeorder.OrderItemsClient", "ListByResourceGroup", resp, "Failure responding to request")
		return
	}
	if result.oirl.hasNextLink() && result.oirl.IsEmpty() {
		err = result.NextWithContext(ctx)
		return
	}

	return
}

// ListByResourceGroupPreparer prepares the ListByResourceGroup request.
func (client OrderItemsClient) ListByResourceGroupPreparer(ctx context.Context, resourceGroupName string, filter string, expand string, skipToken string, top *int32) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"resourceGroupName": autorest.Encode("path", resourceGroupName),
		"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2022-05-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}
	if len(filter) > 0 {
		queryParameters["$filter"] = autorest.Encode("query", filter)
	}
	if len(expand) > 0 {
		queryParameters["$expand"] = autorest.Encode("query", expand)
	}
	if len(skipToken) > 0 {
		queryParameters["$skipToken"] = autorest.Encode("query", skipToken)
	}
	if top != nil {
		queryParameters["$top"] = autorest.Encode("query", *top)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/orderItems", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ListByResourceGroupSender sends the ListByResourceGroup request. The method will close the
// http.Response Body if it receives an error.
func (client OrderItemsClient) ListByResourceGroupSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// ListByResourceGroupResponder handles the response to the ListByResourceGroup request. The method always
// closes the http.Response Body.
func (client OrderItemsClient) ListByResourceGroupResponder(resp *http.Response) (result OrderItemResourceList, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// listByResourceGroupNextResults retrieves the next set of results, if any.
func (client OrderItemsClient) listByResourceGroupNextResults(ctx context.Context, lastResults OrderItemResourceList) (result OrderItemResourceList, err error) {
	req, err := lastResults.orderItemResourceListPreparer(ctx)
	if err != nil {
		return result, autorest.NewErrorWithError(err, "edgeorder.OrderItemsClient", "listByResourceGroupNextResults", nil, "Failure preparing next results request")
	}
	if req == nil {
		return
	}
	resp, err := client.ListByResourceGroupSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		return result, autorest.NewErrorWithError(err, "edgeorder.OrderItemsClient", "listByResourceGroupNextResults", resp, "Failure sending next results request")
	}
	result, err = client.ListByResourceGroupResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "edgeorder.OrderItemsClient", "listByResourceGroupNextResults", resp, "Failure responding to next results request")
	}
	return
}

// ListByResourceGroupComplete enumerates all values, automatically crossing page boundaries as required.
func (client OrderItemsClient) ListByResourceGroupComplete(ctx context.Context, resourceGroupName string, filter string, expand string, skipToken string, top *int32) (result OrderItemResourceListIterator, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/OrderItemsClient.ListByResourceGroup")
		defer func() {
			sc := -1
			if result.Response().Response.Response != nil {
				sc = result.page.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	result.page, err = client.ListByResourceGroup(ctx, resourceGroupName, filter, expand, skipToken, top)
	return
}

// ListBySubscription list order items at subscription level.
// Parameters:
// filter - $filter is supported to filter based on order id. Filter supports only equals operation.
// expand - $expand is supported on parent device details, device details, forward shipping details and reverse
// shipping details parameters. Each of these can be provided as a comma separated list. Parent Device Details
// for order item provides details on the devices of the product, Device Details for order item provides
// details on the devices of the child configurations of the product, Forward and Reverse Shipping details
// provide forward and reverse shipping details respectively.
// skipToken - $skipToken is supported on Get list of order items, which provides the next page in the list of
// order items.
// top - $top is supported on fetching list of resources. $top=10 means that the first 10 items in the list
// will be returned to the API caller.
func (client OrderItemsClient) ListBySubscription(ctx context.Context, filter string, expand string, skipToken string, top *int32) (result OrderItemResourceListPage, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/OrderItemsClient.ListBySubscription")
		defer func() {
			sc := -1
			if result.oirl.Response.Response != nil {
				sc = result.oirl.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: client.SubscriptionID,
			Constraints: []validation.Constraint{{Target: "client.SubscriptionID", Name: validation.MinLength, Rule: 1, Chain: nil}}}}); err != nil {
		return result, validation.NewError("edgeorder.OrderItemsClient", "ListBySubscription", err.Error())
	}

	result.fn = client.listBySubscriptionNextResults
	req, err := client.ListBySubscriptionPreparer(ctx, filter, expand, skipToken, top)
	if err != nil {
		err = autorest.NewErrorWithError(err, "edgeorder.OrderItemsClient", "ListBySubscription", nil, "Failure preparing request")
		return
	}

	resp, err := client.ListBySubscriptionSender(req)
	if err != nil {
		result.oirl.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "edgeorder.OrderItemsClient", "ListBySubscription", resp, "Failure sending request")
		return
	}

	result.oirl, err = client.ListBySubscriptionResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "edgeorder.OrderItemsClient", "ListBySubscription", resp, "Failure responding to request")
		return
	}
	if result.oirl.hasNextLink() && result.oirl.IsEmpty() {
		err = result.NextWithContext(ctx)
		return
	}

	return
}

// ListBySubscriptionPreparer prepares the ListBySubscription request.
func (client OrderItemsClient) ListBySubscriptionPreparer(ctx context.Context, filter string, expand string, skipToken string, top *int32) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"subscriptionId": autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2022-05-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}
	if len(filter) > 0 {
		queryParameters["$filter"] = autorest.Encode("query", filter)
	}
	if len(expand) > 0 {
		queryParameters["$expand"] = autorest.Encode("query", expand)
	}
	if len(skipToken) > 0 {
		queryParameters["$skipToken"] = autorest.Encode("query", skipToken)
	}
	if top != nil {
		queryParameters["$top"] = autorest.Encode("query", *top)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/providers/Microsoft.EdgeOrder/orderItems", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ListBySubscriptionSender sends the ListBySubscription request. The method will close the
// http.Response Body if it receives an error.
func (client OrderItemsClient) ListBySubscriptionSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// ListBySubscriptionResponder handles the response to the ListBySubscription request. The method always
// closes the http.Response Body.
func (client OrderItemsClient) ListBySubscriptionResponder(resp *http.Response) (result OrderItemResourceList, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// listBySubscriptionNextResults retrieves the next set of results, if any.
func (client OrderItemsClient) listBySubscriptionNextResults(ctx context.Context, lastResults OrderItemResourceList) (result OrderItemResourceList, err error) {
	req, err := lastResults.orderItemResourceListPreparer(ctx)
	if err != nil {
		return result, autorest.NewErrorWithError(err, "edgeorder.OrderItemsClient", "listBySubscriptionNextResults", nil, "Failure preparing next results request")
	}
	if req == nil {
		return
	}
	resp, err := client.ListBySubscriptionSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		return result, autorest.NewErrorWithError(err, "edgeorder.OrderItemsClient", "listBySubscriptionNextResults", resp, "Failure sending next results request")
	}
	result, err = client.ListBySubscriptionResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "edgeorder.OrderItemsClient", "listBySubscriptionNextResults", resp, "Failure responding to next results request")
	}
	return
}

// ListBySubscriptionComplete enumerates all values, automatically crossing page boundaries as required.
func (client OrderItemsClient) ListBySubscriptionComplete(ctx context.Context, filter string, expand string, skipToken string, top *int32) (result OrderItemResourceListIterator, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/OrderItemsClient.ListBySubscription")
		defer func() {
			sc := -1
			if result.Response().Response.Response != nil {
				sc = result.page.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	result.page, err = client.ListBySubscription(ctx, filter, expand, skipToken, top)
	return
}

// Return return order item.
// Parameters:
// resourceGroupName - the name of the resource group. The name is case insensitive.
// orderItemName - the name of the order item.
// returnOrderItemDetails - return order item details.
func (client OrderItemsClient) Return(ctx context.Context, resourceGroupName string, orderItemName string, returnOrderItemDetails ReturnOrderItemDetails) (result OrderItemsReturnFuture, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/OrderItemsClient.Return")
		defer func() {
			sc := -1
			if result.FutureAPI != nil && result.FutureAPI.Response() != nil {
				sc = result.FutureAPI.Response().StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: client.SubscriptionID,
			Constraints: []validation.Constraint{{Target: "client.SubscriptionID", Name: validation.MinLength, Rule: 1, Chain: nil}}},
		{TargetValue: resourceGroupName,
			Constraints: []validation.Constraint{{Target: "resourceGroupName", Name: validation.MaxLength, Rule: 90, Chain: nil},
				{Target: "resourceGroupName", Name: validation.MinLength, Rule: 1, Chain: nil}}},
		{TargetValue: returnOrderItemDetails,
			Constraints: []validation.Constraint{{Target: "returnOrderItemDetails.ReturnAddress", Name: validation.Null, Rule: false,
				Chain: []validation.Constraint{{Target: "returnOrderItemDetails.ReturnAddress.ShippingAddress", Name: validation.Null, Rule: false,
					Chain: []validation.Constraint{{Target: "returnOrderItemDetails.ReturnAddress.ShippingAddress.StreetAddress1", Name: validation.Null, Rule: true, Chain: nil},
						{Target: "returnOrderItemDetails.ReturnAddress.ShippingAddress.Country", Name: validation.Null, Rule: true, Chain: nil},
					}},
					{Target: "returnOrderItemDetails.ReturnAddress.ContactDetails", Name: validation.Null, Rule: true,
						Chain: []validation.Constraint{{Target: "returnOrderItemDetails.ReturnAddress.ContactDetails.ContactName", Name: validation.Null, Rule: true, Chain: nil},
							{Target: "returnOrderItemDetails.ReturnAddress.ContactDetails.Phone", Name: validation.Null, Rule: true, Chain: nil},
							{Target: "returnOrderItemDetails.ReturnAddress.ContactDetails.EmailList", Name: validation.Null, Rule: true, Chain: nil},
						}},
				}},
				{Target: "returnOrderItemDetails.ReturnReason", Name: validation.Null, Rule: true, Chain: nil}}}}); err != nil {
		return result, validation.NewError("edgeorder.OrderItemsClient", "Return", err.Error())
	}

	req, err := client.ReturnPreparer(ctx, resourceGroupName, orderItemName, returnOrderItemDetails)
	if err != nil {
		err = autorest.NewErrorWithError(err, "edgeorder.OrderItemsClient", "Return", nil, "Failure preparing request")
		return
	}

	result, err = client.ReturnSender(req)
	if err != nil {
		err = autorest.NewErrorWithError(err, "edgeorder.OrderItemsClient", "Return", result.Response(), "Failure sending request")
		return
	}

	return
}

// ReturnPreparer prepares the Return request.
func (client OrderItemsClient) ReturnPreparer(ctx context.Context, resourceGroupName string, orderItemName string, returnOrderItemDetails ReturnOrderItemDetails) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"orderItemName":     autorest.Encode("path", orderItemName),
		"resourceGroupName": autorest.Encode("path", resourceGroupName),
		"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2022-05-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/orderItems/{orderItemName}/return", pathParameters),
		autorest.WithJSON(returnOrderItemDetails),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ReturnSender sends the Return request. The method will close the
// http.Response Body if it receives an error.
func (client OrderItemsClient) ReturnSender(req *http.Request) (future OrderItemsReturnFuture, err error) {
	var resp *http.Response
	future.FutureAPI = &azure.Future{}
	resp, err = client.Send(req, azure.DoRetryWithRegistration(client.Client))
	if err != nil {
		return
	}
	var azf azure.Future
	azf, err = azure.NewFutureFromResponse(resp)
	future.FutureAPI = &azf
	future.Result = future.result
	return
}

// ReturnResponder handles the response to the Return request. The method always
// closes the http.Response Body.
func (client OrderItemsClient) ReturnResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusAccepted),
		autorest.ByClosing())
	result.Response = resp
	return
}

// Update update the properties of an existing order item.
// Parameters:
// resourceGroupName - the name of the resource group. The name is case insensitive.
// orderItemName - the name of the order item.
// orderItemUpdateParameter - order item update parameters from request body.
// ifMatch - defines the If-Match condition. The patch will be performed only if the ETag of the order on the
// server matches this value.
func (client OrderItemsClient) Update(ctx context.Context, resourceGroupName string, orderItemName string, orderItemUpdateParameter OrderItemUpdateParameter, ifMatch string) (result OrderItemsUpdateFuture, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/OrderItemsClient.Update")
		defer func() {
			sc := -1
			if result.FutureAPI != nil && result.FutureAPI.Response() != nil {
				sc = result.FutureAPI.Response().StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: client.SubscriptionID,
			Constraints: []validation.Constraint{{Target: "client.SubscriptionID", Name: validation.MinLength, Rule: 1, Chain: nil}}},
		{TargetValue: resourceGroupName,
			Constraints: []validation.Constraint{{Target: "resourceGroupName", Name: validation.MaxLength, Rule: 90, Chain: nil},
				{Target: "resourceGroupName", Name: validation.MinLength, Rule: 1, Chain: nil}}}}); err != nil {
		return result, validation.NewError("edgeorder.OrderItemsClient", "Update", err.Error())
	}

	req, err := client.UpdatePreparer(ctx, resourceGroupName, orderItemName, orderItemUpdateParameter, ifMatch)
	if err != nil {
		err = autorest.NewErrorWithError(err, "edgeorder.OrderItemsClient", "Update", nil, "Failure preparing request")
		return
	}

	result, err = client.UpdateSender(req)
	if err != nil {
		err = autorest.NewErrorWithError(err, "edgeorder.OrderItemsClient", "Update", result.Response(), "Failure sending request")
		return
	}

	return
}

// UpdatePreparer prepares the Update request.
func (client OrderItemsClient) UpdatePreparer(ctx context.Context, resourceGroupName string, orderItemName string, orderItemUpdateParameter OrderItemUpdateParameter, ifMatch string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"orderItemName":     autorest.Encode("path", orderItemName),
		"resourceGroupName": autorest.Encode("path", resourceGroupName),
		"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2022-05-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPatch(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/orderItems/{orderItemName}", pathParameters),
		autorest.WithJSON(orderItemUpdateParameter),
		autorest.WithQueryParameters(queryParameters))
	if len(ifMatch) > 0 {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithHeader("If-Match", autorest.String(ifMatch)))
	}
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// UpdateSender sends the Update request. The method will close the
// http.Response Body if it receives an error.
func (client OrderItemsClient) UpdateSender(req *http.Request) (future OrderItemsUpdateFuture, err error) {
	var resp *http.Response
	future.FutureAPI = &azure.Future{}
	resp, err = client.Send(req, azure.DoRetryWithRegistration(client.Client))
	if err != nil {
		return
	}
	var azf azure.Future
	azf, err = azure.NewFutureFromResponse(resp)
	future.FutureAPI = &azf
	future.Result = future.result
	return
}

// UpdateResponder handles the response to the Update request. The method always
// closes the http.Response Body.
func (client OrderItemsClient) UpdateResponder(resp *http.Response) (result OrderItemResource, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusAccepted),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

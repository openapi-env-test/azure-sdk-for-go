package storagepool

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"encoding/json"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/autorest/to"
	"github.com/Azure/go-autorest/tracing"
	"net/http"
)

// The package's fully qualified name.
const fqdn = "github.com/Azure/azure-sdk-for-go/services/preview/storagepool/mgmt/2020-03-15-preview/storagepool"

// ACL access Control List (ACL) for an iSCSI target portal group
type ACL struct {
	// InitiatorIqn - iSCSI initiator IQN (iSCSI Qualified Name); example: "iqn.2005-03.org.iscsi:client".
	InitiatorIqn *string `json:"initiatorIqn,omitempty"`
	// MappedLuns - List of LUN names mapped to the ACL.
	MappedLuns *[]string `json:"mappedLuns,omitempty"`
	// IscsiTargetCredentials - Challenge Handshake Authentication Protocol (CHAP) credentials to set for the ACL. Credentials can not be updated for an ACL.
	*IscsiTargetCredentials `json:"credentials,omitempty"`
}

// MarshalJSON is the custom marshaler for ACL.
func (a ACL) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	if a.InitiatorIqn != nil {
		objectMap["initiatorIqn"] = a.InitiatorIqn
	}
	if a.MappedLuns != nil {
		objectMap["mappedLuns"] = a.MappedLuns
	}
	if a.IscsiTargetCredentials != nil {
		objectMap["credentials"] = a.IscsiTargetCredentials
	}
	return json.Marshal(objectMap)
}

// UnmarshalJSON is the custom unmarshaler for ACL struct.
func (a *ACL) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	for k, v := range m {
		switch k {
		case "initiatorIqn":
			if v != nil {
				var initiatorIqn string
				err = json.Unmarshal(*v, &initiatorIqn)
				if err != nil {
					return err
				}
				a.InitiatorIqn = &initiatorIqn
			}
		case "mappedLuns":
			if v != nil {
				var mappedLuns []string
				err = json.Unmarshal(*v, &mappedLuns)
				if err != nil {
					return err
				}
				a.MappedLuns = &mappedLuns
			}
		case "credentials":
			if v != nil {
				var iscsiTargetCredentials IscsiTargetCredentials
				err = json.Unmarshal(*v, &iscsiTargetCredentials)
				if err != nil {
					return err
				}
				a.IscsiTargetCredentials = &iscsiTargetCredentials
			}
		}
	}

	return nil
}

// Attributes attributes of a iSCSI target portal group.
type Attributes struct {
	// Authentication - Indicates whether or not authentication is enabled on the ACL.
	Authentication *bool `json:"authentication,omitempty"`
	// ProdModeWriteProtect - Indicates whether or not write protect is enabled on the LUNs.
	ProdModeWriteProtect *bool `json:"prodModeWriteProtect,omitempty"`
}

// Disk azure Managed Disk to attach to the Disk pool.
type Disk struct {
	// ID - Unique Azure Resource ID of the Managed Disk.
	ID *string `json:"id,omitempty"`
}

// DiskPool response for Disk pool request.
type DiskPool struct {
	autorest.Response `json:"-"`
	// DiskPoolProperties - Properties of Disk pool.
	*DiskPoolProperties `json:"properties,omitempty"`
	// SystemData - READ-ONLY; Resource metadata required by ARM RPC
	SystemData *SystemMetadata `json:"systemData,omitempty"`
	// Tags - Resource tags.
	Tags map[string]*string `json:"tags"`
	// Location - The geo-location where the resource lives.
	Location *string `json:"location,omitempty"`
	// ID - READ-ONLY; Fully qualified resource Id for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string `json:"id,omitempty"`
	// Name - READ-ONLY; The name of the resource
	Name *string `json:"name,omitempty"`
	// Type - READ-ONLY; The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
	Type *string `json:"type,omitempty"`
}

// MarshalJSON is the custom marshaler for DiskPool.
func (dp DiskPool) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	if dp.DiskPoolProperties != nil {
		objectMap["properties"] = dp.DiskPoolProperties
	}
	if dp.Tags != nil {
		objectMap["tags"] = dp.Tags
	}
	if dp.Location != nil {
		objectMap["location"] = dp.Location
	}
	return json.Marshal(objectMap)
}

// UnmarshalJSON is the custom unmarshaler for DiskPool struct.
func (dp *DiskPool) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	for k, v := range m {
		switch k {
		case "properties":
			if v != nil {
				var diskPoolProperties DiskPoolProperties
				err = json.Unmarshal(*v, &diskPoolProperties)
				if err != nil {
					return err
				}
				dp.DiskPoolProperties = &diskPoolProperties
			}
		case "systemData":
			if v != nil {
				var systemData SystemMetadata
				err = json.Unmarshal(*v, &systemData)
				if err != nil {
					return err
				}
				dp.SystemData = &systemData
			}
		case "tags":
			if v != nil {
				var tags map[string]*string
				err = json.Unmarshal(*v, &tags)
				if err != nil {
					return err
				}
				dp.Tags = tags
			}
		case "location":
			if v != nil {
				var location string
				err = json.Unmarshal(*v, &location)
				if err != nil {
					return err
				}
				dp.Location = &location
			}
		case "id":
			if v != nil {
				var ID string
				err = json.Unmarshal(*v, &ID)
				if err != nil {
					return err
				}
				dp.ID = &ID
			}
		case "name":
			if v != nil {
				var name string
				err = json.Unmarshal(*v, &name)
				if err != nil {
					return err
				}
				dp.Name = &name
			}
		case "type":
			if v != nil {
				var typeVar string
				err = json.Unmarshal(*v, &typeVar)
				if err != nil {
					return err
				}
				dp.Type = &typeVar
			}
		}
	}

	return nil
}

// DiskPoolCreate request payload for create or update Disk pool request.
type DiskPoolCreate struct {
	// DiskPoolCreateProperties - Properties for Disk pool create request.
	*DiskPoolCreateProperties `json:"properties,omitempty"`
	// Tags - Resource tags.
	Tags map[string]*string `json:"tags"`
	// Location - The geo-location where the resource lives.
	Location *string `json:"location,omitempty"`
	// ID - READ-ONLY; Fully qualified resource Id for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string `json:"id,omitempty"`
	// Name - READ-ONLY; The name of the resource
	Name *string `json:"name,omitempty"`
	// Type - READ-ONLY; The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
	Type *string `json:"type,omitempty"`
}

// MarshalJSON is the custom marshaler for DiskPoolCreate.
func (dpc DiskPoolCreate) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	if dpc.DiskPoolCreateProperties != nil {
		objectMap["properties"] = dpc.DiskPoolCreateProperties
	}
	if dpc.Tags != nil {
		objectMap["tags"] = dpc.Tags
	}
	if dpc.Location != nil {
		objectMap["location"] = dpc.Location
	}
	return json.Marshal(objectMap)
}

// UnmarshalJSON is the custom unmarshaler for DiskPoolCreate struct.
func (dpc *DiskPoolCreate) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	for k, v := range m {
		switch k {
		case "properties":
			if v != nil {
				var diskPoolCreateProperties DiskPoolCreateProperties
				err = json.Unmarshal(*v, &diskPoolCreateProperties)
				if err != nil {
					return err
				}
				dpc.DiskPoolCreateProperties = &diskPoolCreateProperties
			}
		case "tags":
			if v != nil {
				var tags map[string]*string
				err = json.Unmarshal(*v, &tags)
				if err != nil {
					return err
				}
				dpc.Tags = tags
			}
		case "location":
			if v != nil {
				var location string
				err = json.Unmarshal(*v, &location)
				if err != nil {
					return err
				}
				dpc.Location = &location
			}
		case "id":
			if v != nil {
				var ID string
				err = json.Unmarshal(*v, &ID)
				if err != nil {
					return err
				}
				dpc.ID = &ID
			}
		case "name":
			if v != nil {
				var name string
				err = json.Unmarshal(*v, &name)
				if err != nil {
					return err
				}
				dpc.Name = &name
			}
		case "type":
			if v != nil {
				var typeVar string
				err = json.Unmarshal(*v, &typeVar)
				if err != nil {
					return err
				}
				dpc.Type = &typeVar
			}
		}
	}

	return nil
}

// DiskPoolCreateProperties properties for Disk pool create or update request.
type DiskPoolCreateProperties struct {
	// AvailabilityZones - Logical zone for Disk pool resource; example: ["1"].
	AvailabilityZones *[]string `json:"availabilityZones,omitempty"`
	// Disks - List of Azure Managed Disks to attach to a Disk pool. Can attach 8 disks at most.
	Disks *[]Disk `json:"disks,omitempty"`
	// SubnetID - Azure Resource ID of a Subnet for the Disk pool.
	SubnetID *string `json:"subnetId,omitempty"`
	// AdditionalCapabilities - List of additional capabilities for a Disk pool.
	AdditionalCapabilities *[]string `json:"additionalCapabilities,omitempty"`
	// Tier - Determines the SKU of VM deployed for Disk pool. Possible values include: 'Basic', 'Standard', 'Premium'
	Tier DiskPoolTier `json:"tier,omitempty"`
}

// DiskPoolListResult list of Disk Pools
type DiskPoolListResult struct {
	autorest.Response `json:"-"`
	// Value - An array of Disk pool objects.
	Value *[]DiskPool `json:"value,omitempty"`
	// NextLink - READ-ONLY; URI to fetch the next section of the paginated response.
	NextLink *string `json:"nextLink,omitempty"`
}

// MarshalJSON is the custom marshaler for DiskPoolListResult.
func (dplr DiskPoolListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	if dplr.Value != nil {
		objectMap["value"] = dplr.Value
	}
	return json.Marshal(objectMap)
}

// DiskPoolListResultIterator provides access to a complete listing of DiskPool values.
type DiskPoolListResultIterator struct {
	i    int
	page DiskPoolListResultPage
}

// NextWithContext advances to the next value.  If there was an error making
// the request the iterator does not advance and the error is returned.
func (iter *DiskPoolListResultIterator) NextWithContext(ctx context.Context) (err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/DiskPoolListResultIterator.NextWithContext")
		defer func() {
			sc := -1
			if iter.Response().Response.Response != nil {
				sc = iter.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	iter.i++
	if iter.i < len(iter.page.Values()) {
		return nil
	}
	err = iter.page.NextWithContext(ctx)
	if err != nil {
		iter.i--
		return err
	}
	iter.i = 0
	return nil
}

// Next advances to the next value.  If there was an error making
// the request the iterator does not advance and the error is returned.
// Deprecated: Use NextWithContext() instead.
func (iter *DiskPoolListResultIterator) Next() error {
	return iter.NextWithContext(context.Background())
}

// NotDone returns true if the enumeration should be started or is not yet complete.
func (iter DiskPoolListResultIterator) NotDone() bool {
	return iter.page.NotDone() && iter.i < len(iter.page.Values())
}

// Response returns the raw server response from the last page request.
func (iter DiskPoolListResultIterator) Response() DiskPoolListResult {
	return iter.page.Response()
}

// Value returns the current value or a zero-initialized value if the
// iterator has advanced beyond the end of the collection.
func (iter DiskPoolListResultIterator) Value() DiskPool {
	if !iter.page.NotDone() {
		return DiskPool{}
	}
	return iter.page.Values()[iter.i]
}

// Creates a new instance of the DiskPoolListResultIterator type.
func NewDiskPoolListResultIterator(page DiskPoolListResultPage) DiskPoolListResultIterator {
	return DiskPoolListResultIterator{page: page}
}

// IsEmpty returns true if the ListResult contains no values.
func (dplr DiskPoolListResult) IsEmpty() bool {
	return dplr.Value == nil || len(*dplr.Value) == 0
}

// hasNextLink returns true if the NextLink is not empty.
func (dplr DiskPoolListResult) hasNextLink() bool {
	return dplr.NextLink != nil && len(*dplr.NextLink) != 0
}

// diskPoolListResultPreparer prepares a request to retrieve the next set of results.
// It returns nil if no more results exist.
func (dplr DiskPoolListResult) diskPoolListResultPreparer(ctx context.Context) (*http.Request, error) {
	if !dplr.hasNextLink() {
		return nil, nil
	}
	return autorest.Prepare((&http.Request{}).WithContext(ctx),
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(dplr.NextLink)))
}

// DiskPoolListResultPage contains a page of DiskPool values.
type DiskPoolListResultPage struct {
	fn   func(context.Context, DiskPoolListResult) (DiskPoolListResult, error)
	dplr DiskPoolListResult
}

// NextWithContext advances to the next page of values.  If there was an error making
// the request the page does not advance and the error is returned.
func (page *DiskPoolListResultPage) NextWithContext(ctx context.Context) (err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/DiskPoolListResultPage.NextWithContext")
		defer func() {
			sc := -1
			if page.Response().Response.Response != nil {
				sc = page.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	for {
		next, err := page.fn(ctx, page.dplr)
		if err != nil {
			return err
		}
		page.dplr = next
		if !next.hasNextLink() || !next.IsEmpty() {
			break
		}
	}
	return nil
}

// Next advances to the next page of values.  If there was an error making
// the request the page does not advance and the error is returned.
// Deprecated: Use NextWithContext() instead.
func (page *DiskPoolListResultPage) Next() error {
	return page.NextWithContext(context.Background())
}

// NotDone returns true if the page enumeration should be started or is not yet complete.
func (page DiskPoolListResultPage) NotDone() bool {
	return !page.dplr.IsEmpty()
}

// Response returns the raw server response from the last page request.
func (page DiskPoolListResultPage) Response() DiskPoolListResult {
	return page.dplr
}

// Values returns the slice of values for the current page or nil if there are no values.
func (page DiskPoolListResultPage) Values() []DiskPool {
	if page.dplr.IsEmpty() {
		return nil
	}
	return *page.dplr.Value
}

// Creates a new instance of the DiskPoolListResultPage type.
func NewDiskPoolListResultPage(cur DiskPoolListResult, getNextPage func(context.Context, DiskPoolListResult) (DiskPoolListResult, error)) DiskPoolListResultPage {
	return DiskPoolListResultPage{
		fn:   getNextPage,
		dplr: cur,
	}
}

// DiskPoolProperties disk pool response properties.
type DiskPoolProperties struct {
	// ProvisioningState - State of the operation on the resource. Possible values include: 'ProvisioningStatesInvalid', 'ProvisioningStatesSucceeded', 'ProvisioningStatesFailed', 'ProvisioningStatesCanceled', 'ProvisioningStatesPending', 'ProvisioningStatesCreating', 'ProvisioningStatesUpdating', 'ProvisioningStatesDeleting'
	ProvisioningState ProvisioningStates `json:"provisioningState,omitempty"`
	// AvailabilityZones - Logical zone for Disk pool resource; example: ["1"].
	AvailabilityZones *[]string `json:"availabilityZones,omitempty"`
	// Status - Operational status of the Disk pool. Possible values include: 'Invalid', 'Unknown', 'Healthy', 'Unhealthy', 'Updating', 'Running', 'Stopped', 'Stoppeddeallocated'
	Status OperationalStatus `json:"status,omitempty"`
	// Disks - List of Azure Managed Disks to attach to a Disk pool. Can attach 8 disks at most.
	Disks *[]Disk `json:"disks,omitempty"`
	// SubnetID - Azure Resource ID of a Subnet for the Disk pool.
	SubnetID *string `json:"subnetId,omitempty"`
	// AdditionalCapabilities - List of additional capabilities for Disk pool.
	AdditionalCapabilities *[]string `json:"additionalCapabilities,omitempty"`
	// Tier - Determines the SKU of VM deployed for Disk pool. Possible values include: 'Basic', 'Standard', 'Premium'
	Tier DiskPoolTier `json:"tier,omitempty"`
}

// DiskPoolsCreateOrUpdateFuture an abstraction for monitoring and retrieving the results of a long-running
// operation.
type DiskPoolsCreateOrUpdateFuture struct {
	azure.FutureAPI
	// Result returns the result of the asynchronous operation.
	// If the operation has not completed it will return an error.
	Result func(DiskPoolsClient) (DiskPool, error)
}

// UnmarshalJSON is the custom unmarshaller for CreateFuture.
func (future *DiskPoolsCreateOrUpdateFuture) UnmarshalJSON(body []byte) error {
	var azFuture azure.Future
	if err := json.Unmarshal(body, &azFuture); err != nil {
		return err
	}
	future.FutureAPI = &azFuture
	future.Result = future.result
	return nil
}

// result is the default implementation for DiskPoolsCreateOrUpdateFuture.Result.
func (future *DiskPoolsCreateOrUpdateFuture) result(client DiskPoolsClient) (dp DiskPool, err error) {
	var done bool
	done, err = future.DoneWithContext(context.Background(), client)
	if err != nil {
		err = autorest.NewErrorWithError(err, "storagepool.DiskPoolsCreateOrUpdateFuture", "Result", future.Response(), "Polling failure")
		return
	}
	if !done {
		dp.Response.Response = future.Response()
		err = azure.NewAsyncOpIncompleteError("storagepool.DiskPoolsCreateOrUpdateFuture")
		return
	}
	sender := autorest.DecorateSender(client, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	if dp.Response.Response, err = future.GetResult(sender); err == nil && dp.Response.Response.StatusCode != http.StatusNoContent {
		dp, err = client.CreateOrUpdateResponder(dp.Response.Response)
		if err != nil {
			err = autorest.NewErrorWithError(err, "storagepool.DiskPoolsCreateOrUpdateFuture", "Result", dp.Response.Response, "Failure responding to request")
		}
	}
	return
}

// DiskPoolsDeleteFuture an abstraction for monitoring and retrieving the results of a long-running
// operation.
type DiskPoolsDeleteFuture struct {
	azure.FutureAPI
	// Result returns the result of the asynchronous operation.
	// If the operation has not completed it will return an error.
	Result func(DiskPoolsClient) (autorest.Response, error)
}

// UnmarshalJSON is the custom unmarshaller for CreateFuture.
func (future *DiskPoolsDeleteFuture) UnmarshalJSON(body []byte) error {
	var azFuture azure.Future
	if err := json.Unmarshal(body, &azFuture); err != nil {
		return err
	}
	future.FutureAPI = &azFuture
	future.Result = future.result
	return nil
}

// result is the default implementation for DiskPoolsDeleteFuture.Result.
func (future *DiskPoolsDeleteFuture) result(client DiskPoolsClient) (ar autorest.Response, err error) {
	var done bool
	done, err = future.DoneWithContext(context.Background(), client)
	if err != nil {
		err = autorest.NewErrorWithError(err, "storagepool.DiskPoolsDeleteFuture", "Result", future.Response(), "Polling failure")
		return
	}
	if !done {
		ar.Response = future.Response()
		err = azure.NewAsyncOpIncompleteError("storagepool.DiskPoolsDeleteFuture")
		return
	}
	ar.Response = future.Response()
	return
}

// DiskPoolsUpdateFuture an abstraction for monitoring and retrieving the results of a long-running
// operation.
type DiskPoolsUpdateFuture struct {
	azure.FutureAPI
	// Result returns the result of the asynchronous operation.
	// If the operation has not completed it will return an error.
	Result func(DiskPoolsClient) (DiskPool, error)
}

// UnmarshalJSON is the custom unmarshaller for CreateFuture.
func (future *DiskPoolsUpdateFuture) UnmarshalJSON(body []byte) error {
	var azFuture azure.Future
	if err := json.Unmarshal(body, &azFuture); err != nil {
		return err
	}
	future.FutureAPI = &azFuture
	future.Result = future.result
	return nil
}

// result is the default implementation for DiskPoolsUpdateFuture.Result.
func (future *DiskPoolsUpdateFuture) result(client DiskPoolsClient) (dp DiskPool, err error) {
	var done bool
	done, err = future.DoneWithContext(context.Background(), client)
	if err != nil {
		err = autorest.NewErrorWithError(err, "storagepool.DiskPoolsUpdateFuture", "Result", future.Response(), "Polling failure")
		return
	}
	if !done {
		dp.Response.Response = future.Response()
		err = azure.NewAsyncOpIncompleteError("storagepool.DiskPoolsUpdateFuture")
		return
	}
	sender := autorest.DecorateSender(client, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	if dp.Response.Response, err = future.GetResult(sender); err == nil && dp.Response.Response.StatusCode != http.StatusNoContent {
		dp, err = client.UpdateResponder(dp.Response.Response)
		if err != nil {
			err = autorest.NewErrorWithError(err, "storagepool.DiskPoolsUpdateFuture", "Result", dp.Response.Response, "Failure responding to request")
		}
	}
	return
}

// DiskPoolUpdate request payload for Update Disk pool request.
type DiskPoolUpdate struct {
	// DiskPoolUpdateProperties - Properties for Disk pool update request.
	*DiskPoolUpdateProperties `json:"properties,omitempty"`
	// Tags - Resource tags.
	Tags map[string]*string `json:"tags"`
}

// MarshalJSON is the custom marshaler for DiskPoolUpdate.
func (dpu DiskPoolUpdate) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	if dpu.DiskPoolUpdateProperties != nil {
		objectMap["properties"] = dpu.DiskPoolUpdateProperties
	}
	if dpu.Tags != nil {
		objectMap["tags"] = dpu.Tags
	}
	return json.Marshal(objectMap)
}

// UnmarshalJSON is the custom unmarshaler for DiskPoolUpdate struct.
func (dpu *DiskPoolUpdate) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	for k, v := range m {
		switch k {
		case "properties":
			if v != nil {
				var diskPoolUpdateProperties DiskPoolUpdateProperties
				err = json.Unmarshal(*v, &diskPoolUpdateProperties)
				if err != nil {
					return err
				}
				dpu.DiskPoolUpdateProperties = &diskPoolUpdateProperties
			}
		case "tags":
			if v != nil {
				var tags map[string]*string
				err = json.Unmarshal(*v, &tags)
				if err != nil {
					return err
				}
				dpu.Tags = tags
			}
		}
	}

	return nil
}

// DiskPoolUpdateProperties properties for Disk pool update request.
type DiskPoolUpdateProperties struct {
	// Disks - List of Azure Managed Disks to attach to a Disk pool. Can attach 8 disks at most.
	Disks *[]Disk `json:"disks,omitempty"`
}

// Error the resource management error response.
type Error struct {
	// Error - RP error response.
	Error *ErrorResponse `json:"error,omitempty"`
}

// ErrorAdditionalInfo the resource management error additional info.
type ErrorAdditionalInfo struct {
	// Type - READ-ONLY; The additional info type.
	Type *string `json:"type,omitempty"`
	// Info - READ-ONLY; The additional info.
	Info interface{} `json:"info,omitempty"`
}

// ErrorResponse the resource management error response.
type ErrorResponse struct {
	// Code - READ-ONLY; The error code.
	Code *string `json:"code,omitempty"`
	// Message - READ-ONLY; The error message.
	Message *string `json:"message,omitempty"`
	// Target - READ-ONLY; The error target.
	Target *string `json:"target,omitempty"`
	// Details - READ-ONLY; The error details.
	Details *[]ErrorResponse `json:"details,omitempty"`
	// AdditionalInfo - READ-ONLY; The error additional info.
	AdditionalInfo *[]ErrorAdditionalInfo `json:"additionalInfo,omitempty"`
}

// IscsiLun LUN to expose the Azure Managed Disk.
type IscsiLun struct {
	// Name - User defined name for iSCSI LUN; example: "lun0"
	Name *string `json:"name,omitempty"`
	// ManagedDiskAzureResourceID - Azure Resource ID of the Managed Disk.
	ManagedDiskAzureResourceID *string `json:"managedDiskAzureResourceId,omitempty"`
}

// IscsiTarget response for iSCSI target requests.
type IscsiTarget struct {
	autorest.Response `json:"-"`
	// IscsiTargetProperties - Properties for iSCSI target operations.
	*IscsiTargetProperties `json:"properties,omitempty"`
	// ID - READ-ONLY; Fully qualified resource Id for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string `json:"id,omitempty"`
	// Name - READ-ONLY; The name of the resource
	Name *string `json:"name,omitempty"`
	// Type - READ-ONLY; The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
	Type *string `json:"type,omitempty"`
}

// MarshalJSON is the custom marshaler for IscsiTarget.
func (it IscsiTarget) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	if it.IscsiTargetProperties != nil {
		objectMap["properties"] = it.IscsiTargetProperties
	}
	return json.Marshal(objectMap)
}

// UnmarshalJSON is the custom unmarshaler for IscsiTarget struct.
func (it *IscsiTarget) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	for k, v := range m {
		switch k {
		case "properties":
			if v != nil {
				var iscsiTargetProperties IscsiTargetProperties
				err = json.Unmarshal(*v, &iscsiTargetProperties)
				if err != nil {
					return err
				}
				it.IscsiTargetProperties = &iscsiTargetProperties
			}
		case "id":
			if v != nil {
				var ID string
				err = json.Unmarshal(*v, &ID)
				if err != nil {
					return err
				}
				it.ID = &ID
			}
		case "name":
			if v != nil {
				var name string
				err = json.Unmarshal(*v, &name)
				if err != nil {
					return err
				}
				it.Name = &name
			}
		case "type":
			if v != nil {
				var typeVar string
				err = json.Unmarshal(*v, &typeVar)
				if err != nil {
					return err
				}
				it.Type = &typeVar
			}
		}
	}

	return nil
}

// IscsiTargetCreate payload for iSCSI target create or update requests.
type IscsiTargetCreate struct {
	// IscsiTargetCreateProperties - Properties for iSCSI target create request.
	*IscsiTargetCreateProperties `json:"properties,omitempty"`
	// ID - READ-ONLY; Fully qualified resource Id for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string `json:"id,omitempty"`
	// Name - READ-ONLY; The name of the resource
	Name *string `json:"name,omitempty"`
	// Type - READ-ONLY; The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
	Type *string `json:"type,omitempty"`
}

// MarshalJSON is the custom marshaler for IscsiTargetCreate.
func (itc IscsiTargetCreate) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	if itc.IscsiTargetCreateProperties != nil {
		objectMap["properties"] = itc.IscsiTargetCreateProperties
	}
	return json.Marshal(objectMap)
}

// UnmarshalJSON is the custom unmarshaler for IscsiTargetCreate struct.
func (itc *IscsiTargetCreate) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	for k, v := range m {
		switch k {
		case "properties":
			if v != nil {
				var iscsiTargetCreateProperties IscsiTargetCreateProperties
				err = json.Unmarshal(*v, &iscsiTargetCreateProperties)
				if err != nil {
					return err
				}
				itc.IscsiTargetCreateProperties = &iscsiTargetCreateProperties
			}
		case "id":
			if v != nil {
				var ID string
				err = json.Unmarshal(*v, &ID)
				if err != nil {
					return err
				}
				itc.ID = &ID
			}
		case "name":
			if v != nil {
				var name string
				err = json.Unmarshal(*v, &name)
				if err != nil {
					return err
				}
				itc.Name = &name
			}
		case "type":
			if v != nil {
				var typeVar string
				err = json.Unmarshal(*v, &typeVar)
				if err != nil {
					return err
				}
				itc.Type = &typeVar
			}
		}
	}

	return nil
}

// IscsiTargetCreateProperties properties for iSCSI target create or update request.
type IscsiTargetCreateProperties struct {
	// Tpgs - List of iSCSI target portal groups. Can have 1 portal group at most.
	Tpgs *[]TargetPortalGroupCreate `json:"tpgs,omitempty"`
	// TargetIqn - iSCSI target IQN (iSCSI Qualified Name); example: "iqn.2005-03.org.iscsi:server".
	TargetIqn *string `json:"targetIqn,omitempty"`
}

// IscsiTargetCredentials challenge Handshake Authentication Protocol (CHAP) credentials for an iSCSI
// target ACL.
type IscsiTargetCredentials struct {
	// Username - Username for Challenge Handshake Authentication Protocol (CHAP) authentication.
	Username *string `json:"username,omitempty"`
	// Password - Password for Challenge Handshake Authentication Protocol (CHAP) authentication.
	Password *string `json:"password,omitempty"`
}

// IscsiTargetList list of iSCSI Targets.
type IscsiTargetList struct {
	autorest.Response `json:"-"`
	// Value - An array of iSCSI targets in a Disk pool.
	Value *[]IscsiTarget `json:"value,omitempty"`
	// NextLink - READ-ONLY; URI to fetch the next section of the paginated response.
	NextLink *string `json:"nextLink,omitempty"`
}

// MarshalJSON is the custom marshaler for IscsiTargetList.
func (itl IscsiTargetList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	if itl.Value != nil {
		objectMap["value"] = itl.Value
	}
	return json.Marshal(objectMap)
}

// IscsiTargetListIterator provides access to a complete listing of IscsiTarget values.
type IscsiTargetListIterator struct {
	i    int
	page IscsiTargetListPage
}

// NextWithContext advances to the next value.  If there was an error making
// the request the iterator does not advance and the error is returned.
func (iter *IscsiTargetListIterator) NextWithContext(ctx context.Context) (err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/IscsiTargetListIterator.NextWithContext")
		defer func() {
			sc := -1
			if iter.Response().Response.Response != nil {
				sc = iter.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	iter.i++
	if iter.i < len(iter.page.Values()) {
		return nil
	}
	err = iter.page.NextWithContext(ctx)
	if err != nil {
		iter.i--
		return err
	}
	iter.i = 0
	return nil
}

// Next advances to the next value.  If there was an error making
// the request the iterator does not advance and the error is returned.
// Deprecated: Use NextWithContext() instead.
func (iter *IscsiTargetListIterator) Next() error {
	return iter.NextWithContext(context.Background())
}

// NotDone returns true if the enumeration should be started or is not yet complete.
func (iter IscsiTargetListIterator) NotDone() bool {
	return iter.page.NotDone() && iter.i < len(iter.page.Values())
}

// Response returns the raw server response from the last page request.
func (iter IscsiTargetListIterator) Response() IscsiTargetList {
	return iter.page.Response()
}

// Value returns the current value or a zero-initialized value if the
// iterator has advanced beyond the end of the collection.
func (iter IscsiTargetListIterator) Value() IscsiTarget {
	if !iter.page.NotDone() {
		return IscsiTarget{}
	}
	return iter.page.Values()[iter.i]
}

// Creates a new instance of the IscsiTargetListIterator type.
func NewIscsiTargetListIterator(page IscsiTargetListPage) IscsiTargetListIterator {
	return IscsiTargetListIterator{page: page}
}

// IsEmpty returns true if the ListResult contains no values.
func (itl IscsiTargetList) IsEmpty() bool {
	return itl.Value == nil || len(*itl.Value) == 0
}

// hasNextLink returns true if the NextLink is not empty.
func (itl IscsiTargetList) hasNextLink() bool {
	return itl.NextLink != nil && len(*itl.NextLink) != 0
}

// iscsiTargetListPreparer prepares a request to retrieve the next set of results.
// It returns nil if no more results exist.
func (itl IscsiTargetList) iscsiTargetListPreparer(ctx context.Context) (*http.Request, error) {
	if !itl.hasNextLink() {
		return nil, nil
	}
	return autorest.Prepare((&http.Request{}).WithContext(ctx),
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(itl.NextLink)))
}

// IscsiTargetListPage contains a page of IscsiTarget values.
type IscsiTargetListPage struct {
	fn  func(context.Context, IscsiTargetList) (IscsiTargetList, error)
	itl IscsiTargetList
}

// NextWithContext advances to the next page of values.  If there was an error making
// the request the page does not advance and the error is returned.
func (page *IscsiTargetListPage) NextWithContext(ctx context.Context) (err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/IscsiTargetListPage.NextWithContext")
		defer func() {
			sc := -1
			if page.Response().Response.Response != nil {
				sc = page.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	for {
		next, err := page.fn(ctx, page.itl)
		if err != nil {
			return err
		}
		page.itl = next
		if !next.hasNextLink() || !next.IsEmpty() {
			break
		}
	}
	return nil
}

// Next advances to the next page of values.  If there was an error making
// the request the page does not advance and the error is returned.
// Deprecated: Use NextWithContext() instead.
func (page *IscsiTargetListPage) Next() error {
	return page.NextWithContext(context.Background())
}

// NotDone returns true if the page enumeration should be started or is not yet complete.
func (page IscsiTargetListPage) NotDone() bool {
	return !page.itl.IsEmpty()
}

// Response returns the raw server response from the last page request.
func (page IscsiTargetListPage) Response() IscsiTargetList {
	return page.itl
}

// Values returns the slice of values for the current page or nil if there are no values.
func (page IscsiTargetListPage) Values() []IscsiTarget {
	if page.itl.IsEmpty() {
		return nil
	}
	return *page.itl.Value
}

// Creates a new instance of the IscsiTargetListPage type.
func NewIscsiTargetListPage(cur IscsiTargetList, getNextPage func(context.Context, IscsiTargetList) (IscsiTargetList, error)) IscsiTargetListPage {
	return IscsiTargetListPage{
		fn:  getNextPage,
		itl: cur,
	}
}

// IscsiTargetProperties response properties for iSCSI target operations.
type IscsiTargetProperties struct {
	// ProvisioningState - State of the operation on the resource. Possible values include: 'ProvisioningStatesInvalid', 'ProvisioningStatesSucceeded', 'ProvisioningStatesFailed', 'ProvisioningStatesCanceled', 'ProvisioningStatesPending', 'ProvisioningStatesCreating', 'ProvisioningStatesUpdating', 'ProvisioningStatesDeleting'
	ProvisioningState ProvisioningStates `json:"provisioningState,omitempty"`
	// Status - Operational status of the iSCSI target. Possible values include: 'Invalid', 'Unknown', 'Healthy', 'Unhealthy', 'Updating', 'Running', 'Stopped', 'Stoppeddeallocated'
	Status OperationalStatus `json:"status,omitempty"`
	// Tpgs - List of iSCSI target portal groups. Can have 1 portal group at most.
	Tpgs *[]TargetPortalGroup `json:"tpgs,omitempty"`
	// TargetIqn - iSCSI target IQN (iSCSI Qualified Name); example: "iqn.2005-03.org.iscsi:server".
	TargetIqn *string `json:"targetIqn,omitempty"`
}

// IscsiTargetsCreateOrUpdateFuture an abstraction for monitoring and retrieving the results of a
// long-running operation.
type IscsiTargetsCreateOrUpdateFuture struct {
	azure.FutureAPI
	// Result returns the result of the asynchronous operation.
	// If the operation has not completed it will return an error.
	Result func(IscsiTargetsClient) (IscsiTarget, error)
}

// UnmarshalJSON is the custom unmarshaller for CreateFuture.
func (future *IscsiTargetsCreateOrUpdateFuture) UnmarshalJSON(body []byte) error {
	var azFuture azure.Future
	if err := json.Unmarshal(body, &azFuture); err != nil {
		return err
	}
	future.FutureAPI = &azFuture
	future.Result = future.result
	return nil
}

// result is the default implementation for IscsiTargetsCreateOrUpdateFuture.Result.
func (future *IscsiTargetsCreateOrUpdateFuture) result(client IscsiTargetsClient) (it IscsiTarget, err error) {
	var done bool
	done, err = future.DoneWithContext(context.Background(), client)
	if err != nil {
		err = autorest.NewErrorWithError(err, "storagepool.IscsiTargetsCreateOrUpdateFuture", "Result", future.Response(), "Polling failure")
		return
	}
	if !done {
		it.Response.Response = future.Response()
		err = azure.NewAsyncOpIncompleteError("storagepool.IscsiTargetsCreateOrUpdateFuture")
		return
	}
	sender := autorest.DecorateSender(client, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	if it.Response.Response, err = future.GetResult(sender); err == nil && it.Response.Response.StatusCode != http.StatusNoContent {
		it, err = client.CreateOrUpdateResponder(it.Response.Response)
		if err != nil {
			err = autorest.NewErrorWithError(err, "storagepool.IscsiTargetsCreateOrUpdateFuture", "Result", it.Response.Response, "Failure responding to request")
		}
	}
	return
}

// IscsiTargetsDeleteFuture an abstraction for monitoring and retrieving the results of a long-running
// operation.
type IscsiTargetsDeleteFuture struct {
	azure.FutureAPI
	// Result returns the result of the asynchronous operation.
	// If the operation has not completed it will return an error.
	Result func(IscsiTargetsClient) (autorest.Response, error)
}

// UnmarshalJSON is the custom unmarshaller for CreateFuture.
func (future *IscsiTargetsDeleteFuture) UnmarshalJSON(body []byte) error {
	var azFuture azure.Future
	if err := json.Unmarshal(body, &azFuture); err != nil {
		return err
	}
	future.FutureAPI = &azFuture
	future.Result = future.result
	return nil
}

// result is the default implementation for IscsiTargetsDeleteFuture.Result.
func (future *IscsiTargetsDeleteFuture) result(client IscsiTargetsClient) (ar autorest.Response, err error) {
	var done bool
	done, err = future.DoneWithContext(context.Background(), client)
	if err != nil {
		err = autorest.NewErrorWithError(err, "storagepool.IscsiTargetsDeleteFuture", "Result", future.Response(), "Polling failure")
		return
	}
	if !done {
		ar.Response = future.Response()
		err = azure.NewAsyncOpIncompleteError("storagepool.IscsiTargetsDeleteFuture")
		return
	}
	ar.Response = future.Response()
	return
}

// IscsiTargetsUpdateFuture an abstraction for monitoring and retrieving the results of a long-running
// operation.
type IscsiTargetsUpdateFuture struct {
	azure.FutureAPI
	// Result returns the result of the asynchronous operation.
	// If the operation has not completed it will return an error.
	Result func(IscsiTargetsClient) (IscsiTarget, error)
}

// UnmarshalJSON is the custom unmarshaller for CreateFuture.
func (future *IscsiTargetsUpdateFuture) UnmarshalJSON(body []byte) error {
	var azFuture azure.Future
	if err := json.Unmarshal(body, &azFuture); err != nil {
		return err
	}
	future.FutureAPI = &azFuture
	future.Result = future.result
	return nil
}

// result is the default implementation for IscsiTargetsUpdateFuture.Result.
func (future *IscsiTargetsUpdateFuture) result(client IscsiTargetsClient) (it IscsiTarget, err error) {
	var done bool
	done, err = future.DoneWithContext(context.Background(), client)
	if err != nil {
		err = autorest.NewErrorWithError(err, "storagepool.IscsiTargetsUpdateFuture", "Result", future.Response(), "Polling failure")
		return
	}
	if !done {
		it.Response.Response = future.Response()
		err = azure.NewAsyncOpIncompleteError("storagepool.IscsiTargetsUpdateFuture")
		return
	}
	sender := autorest.DecorateSender(client, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	if it.Response.Response, err = future.GetResult(sender); err == nil && it.Response.Response.StatusCode != http.StatusNoContent {
		it, err = client.UpdateResponder(it.Response.Response)
		if err != nil {
			err = autorest.NewErrorWithError(err, "storagepool.IscsiTargetsUpdateFuture", "Result", it.Response.Response, "Failure responding to request")
		}
	}
	return
}

// IscsiTargetUpdate payload for iSCSI target update request.
type IscsiTargetUpdate struct {
	// IscsiTargetUpdateProperties - Properties for iSCSI target update request.
	*IscsiTargetUpdateProperties `json:"properties,omitempty"`
}

// MarshalJSON is the custom marshaler for IscsiTargetUpdate.
func (itu IscsiTargetUpdate) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	if itu.IscsiTargetUpdateProperties != nil {
		objectMap["properties"] = itu.IscsiTargetUpdateProperties
	}
	return json.Marshal(objectMap)
}

// UnmarshalJSON is the custom unmarshaler for IscsiTargetUpdate struct.
func (itu *IscsiTargetUpdate) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	for k, v := range m {
		switch k {
		case "properties":
			if v != nil {
				var iscsiTargetUpdateProperties IscsiTargetUpdateProperties
				err = json.Unmarshal(*v, &iscsiTargetUpdateProperties)
				if err != nil {
					return err
				}
				itu.IscsiTargetUpdateProperties = &iscsiTargetUpdateProperties
			}
		}
	}

	return nil
}

// IscsiTargetUpdateProperties properties for iSCSI target update request.
type IscsiTargetUpdateProperties struct {
	// Tpgs - List of iSCSI target portal groups. Can have 1 portal group at most.
	Tpgs *[]TargetPortalGroupUpdate `json:"tpgs,omitempty"`
}

// OperationDisplay metadata about an operation.
type OperationDisplay struct {
	// Provider - Localized friendly form of the resource provider name.
	Provider *string `json:"provider,omitempty"`
	// Resource - Localized friendly form of the resource type related to this action/operation.
	Resource *string `json:"resource,omitempty"`
	// Operation - Localized friendly name for the operation, as it should be shown to the user.
	Operation *string `json:"operation,omitempty"`
	// Description - Localized friendly description for the operation, as it should be shown to the user.
	Description *string `json:"description,omitempty"`
}

// OperationListResult list of operations supported by the RP.
type OperationListResult struct {
	autorest.Response `json:"-"`
	// Value - An array of operations supported by the StoragePool RP.
	Value *[]RPOperation `json:"value,omitempty"`
	// NextLink - URI to fetch the next section of the paginated response.
	NextLink *string `json:"nextLink,omitempty"`
}

// ProxyResource the resource model definition for a ARM proxy resource. It will have everything other than
// required location and tags
type ProxyResource struct {
	// ID - READ-ONLY; Fully qualified resource Id for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string `json:"id,omitempty"`
	// Name - READ-ONLY; The name of the resource
	Name *string `json:"name,omitempty"`
	// Type - READ-ONLY; The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
	Type *string `json:"type,omitempty"`
}

// Resource ARM resource model definition.
type Resource struct {
	// ID - READ-ONLY; Fully qualified resource Id for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string `json:"id,omitempty"`
	// Name - READ-ONLY; The name of the resource
	Name *string `json:"name,omitempty"`
	// Type - READ-ONLY; The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
	Type *string `json:"type,omitempty"`
}

// RPOperation description of a StoragePool RP Operation
type RPOperation struct {
	// Name - The name of the operation being performed on this particular object
	Name *string `json:"name,omitempty"`
	// IsDataAction - Indicates whether the operation applies to data-plane.
	IsDataAction *bool `json:"isDataAction,omitempty"`
	// ActionType - Indicates the action type.
	ActionType *string `json:"actionType,omitempty"`
	// Display - Additional metadata about RP operation.
	Display *OperationDisplay `json:"display,omitempty"`
	// Origin - The intended executor of the operation; governs the display of the operation in the RBAC UX and the audit logs UX.
	Origin *string `json:"origin,omitempty"`
}

// SystemMetadata resource metadata required by ARM RPC.
type SystemMetadata struct {
	// CreatedBy - A string identifier for the identity that created the resource.
	CreatedBy *string `json:"createdBy,omitempty"`
	// CreatedByType - The type of identity that created the resource: user, application, managedIdentity.
	CreatedByType *string `json:"createdByType,omitempty"`
	// CreatedAt - The timestamp of resource creation (UTC).
	CreatedAt *string `json:"createdAt,omitempty"`
	// LastModifiedBy - A string identifier for the identity that last modified the resource.
	LastModifiedBy *string `json:"lastModifiedBy,omitempty"`
	// LastModifiedByType - The type of identity that last modified the resource: user, application, managedIdentity.
	LastModifiedByType *string `json:"lastModifiedByType,omitempty"`
	// LastModifiedAt - The timestamp of resource last modification (UTC).
	LastModifiedAt *string `json:"lastModifiedAt,omitempty"`
}

// TargetPortalGroup response properties for iSCSI target portal group.
type TargetPortalGroup struct {
	// Luns - List of LUNs to be exposed through iSCSI target portal group.
	Luns *[]IscsiLun `json:"luns,omitempty"`
	// Acls - Access Control List (ACL) for an iSCSI target portal group.
	Acls *[]ACL `json:"acls,omitempty"`
	// Attributes - Attributes of an iSCSI target portal group.
	Attributes *Attributes `json:"attributes,omitempty"`
	// Endpoints - List of private IPv4 addresses to connect to the iSCSI target.
	Endpoints *[]string `json:"endpoints,omitempty"`
	// Tag - The tag associated with the iSCSI target portal group.
	Tag *int32 `json:"tag,omitempty"`
	// Port - The port used by iSCSI target portal group.
	Port *int32 `json:"port,omitempty"`
}

// TargetPortalGroupCreate target portal group properties for create or update iSCSI target request.
type TargetPortalGroupCreate struct {
	// Luns - List of LUNs to be exposed through the iSCSI target portal group.
	Luns *[]IscsiLun `json:"luns,omitempty"`
	// Acls - Access Control List (ACL) for an iSCSI target portal group.
	Acls *[]ACL `json:"acls,omitempty"`
	// Attributes - Attributes of an iSCSI target portal group.
	Attributes *Attributes `json:"attributes,omitempty"`
}

// TargetPortalGroupUpdate target portal group properties for update iSCSI target request.
type TargetPortalGroupUpdate struct {
	// Luns - List of LUNs to be exposed through the iSCSI target portal group.
	Luns *[]IscsiLun `json:"luns,omitempty"`
	// Acls - Access Control List (ACL) for an iSCSI target portal group.
	Acls *[]ACL `json:"acls,omitempty"`
}

// TrackedResource the resource model definition for a ARM tracked top level resource.
type TrackedResource struct {
	// Tags - Resource tags.
	Tags map[string]*string `json:"tags"`
	// Location - The geo-location where the resource lives.
	Location *string `json:"location,omitempty"`
	// ID - READ-ONLY; Fully qualified resource Id for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string `json:"id,omitempty"`
	// Name - READ-ONLY; The name of the resource
	Name *string `json:"name,omitempty"`
	// Type - READ-ONLY; The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
	Type *string `json:"type,omitempty"`
}

// MarshalJSON is the custom marshaler for TrackedResource.
func (tr TrackedResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	if tr.Tags != nil {
		objectMap["tags"] = tr.Tags
	}
	if tr.Location != nil {
		objectMap["location"] = tr.Location
	}
	return json.Marshal(objectMap)
}

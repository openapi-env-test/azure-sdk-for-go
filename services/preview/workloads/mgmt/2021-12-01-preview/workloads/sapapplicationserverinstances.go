package workloads

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/autorest/validation"
	"github.com/Azure/go-autorest/tracing"
	"net/http"
)

// SAPApplicationServerInstancesClient is the client for the SAPApplicationServerInstances methods of the Workloads
// service.
type SAPApplicationServerInstancesClient struct {
	BaseClient
}

// NewSAPApplicationServerInstancesClient creates an instance of the SAPApplicationServerInstancesClient client.
func NewSAPApplicationServerInstancesClient(subscriptionID string) SAPApplicationServerInstancesClient {
	return NewSAPApplicationServerInstancesClientWithBaseURI(DefaultBaseURI, subscriptionID)
}

// NewSAPApplicationServerInstancesClientWithBaseURI creates an instance of the SAPApplicationServerInstancesClient
// client using a custom endpoint.  Use this when interacting with an Azure cloud that uses a non-standard base URI
// (sovereign clouds, Azure stack).
func NewSAPApplicationServerInstancesClientWithBaseURI(baseURI string, subscriptionID string) SAPApplicationServerInstancesClient {
	return SAPApplicationServerInstancesClient{NewWithBaseURI(baseURI, subscriptionID)}
}

// Create puts the SAP Application Server Instance. <br><br>This will be used by service only. PUT by end user will
// return a Bad Request error.
// Parameters:
// resourceGroupName - the name of the resource group. The name is case insensitive.
// sapVirtualInstanceName - the name of the Virtual Instances for SAP.
// applicationInstanceName - the name of SAP Application Server instance.
// body - the SAP Application Server instance request body.
func (client SAPApplicationServerInstancesClient) Create(ctx context.Context, resourceGroupName string, sapVirtualInstanceName string, applicationInstanceName string, body *SAPApplicationServerInstance) (result SAPApplicationServerInstancesCreateFuture, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/SAPApplicationServerInstancesClient.Create")
		defer func() {
			sc := -1
			if result.FutureAPI != nil && result.FutureAPI.Response() != nil {
				sc = result.FutureAPI.Response().StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: client.SubscriptionID,
			Constraints: []validation.Constraint{{Target: "client.SubscriptionID", Name: validation.MinLength, Rule: 1, Chain: nil}}},
		{TargetValue: resourceGroupName,
			Constraints: []validation.Constraint{{Target: "resourceGroupName", Name: validation.MaxLength, Rule: 90, Chain: nil},
				{Target: "resourceGroupName", Name: validation.MinLength, Rule: 1, Chain: nil}}}}); err != nil {
		return result, validation.NewError("workloads.SAPApplicationServerInstancesClient", "Create", err.Error())
	}

	req, err := client.CreatePreparer(ctx, resourceGroupName, sapVirtualInstanceName, applicationInstanceName, body)
	if err != nil {
		err = autorest.NewErrorWithError(err, "workloads.SAPApplicationServerInstancesClient", "Create", nil, "Failure preparing request")
		return
	}

	result, err = client.CreateSender(req)
	if err != nil {
		err = autorest.NewErrorWithError(err, "workloads.SAPApplicationServerInstancesClient", "Create", result.Response(), "Failure sending request")
		return
	}

	return
}

// CreatePreparer prepares the Create request.
func (client SAPApplicationServerInstancesClient) CreatePreparer(ctx context.Context, resourceGroupName string, sapVirtualInstanceName string, applicationInstanceName string, body *SAPApplicationServerInstance) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"applicationInstanceName": autorest.Encode("path", applicationInstanceName),
		"resourceGroupName":       autorest.Encode("path", resourceGroupName),
		"sapVirtualInstanceName":  autorest.Encode("path", sapVirtualInstanceName),
		"subscriptionId":          autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2021-12-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/sapVirtualInstances/{sapVirtualInstanceName}/applicationInstances/{applicationInstanceName}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	if body != nil {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(body))
	}
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// CreateSender sends the Create request. The method will close the
// http.Response Body if it receives an error.
func (client SAPApplicationServerInstancesClient) CreateSender(req *http.Request) (future SAPApplicationServerInstancesCreateFuture, err error) {
	var resp *http.Response
	future.FutureAPI = &azure.Future{}
	resp, err = client.Send(req, azure.DoRetryWithRegistration(client.Client))
	if err != nil {
		return
	}
	var azf azure.Future
	azf, err = azure.NewFutureFromResponse(resp)
	future.FutureAPI = &azf
	future.Result = future.result
	return
}

// CreateResponder handles the response to the Create request. The method always
// closes the http.Response Body.
func (client SAPApplicationServerInstancesClient) CreateResponder(resp *http.Response) (result SAPApplicationServerInstance, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusCreated),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Delete deletes the SAP Application Server Instance. <br><br>This operation will be used by service only. Delete by
// end user will return a Bad Request error.
// Parameters:
// resourceGroupName - the name of the resource group. The name is case insensitive.
// sapVirtualInstanceName - the name of the Virtual Instances for SAP.
// applicationInstanceName - the name of SAP Application Server instance.
func (client SAPApplicationServerInstancesClient) Delete(ctx context.Context, resourceGroupName string, sapVirtualInstanceName string, applicationInstanceName string) (result SAPApplicationServerInstancesDeleteFuture, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/SAPApplicationServerInstancesClient.Delete")
		defer func() {
			sc := -1
			if result.FutureAPI != nil && result.FutureAPI.Response() != nil {
				sc = result.FutureAPI.Response().StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: client.SubscriptionID,
			Constraints: []validation.Constraint{{Target: "client.SubscriptionID", Name: validation.MinLength, Rule: 1, Chain: nil}}},
		{TargetValue: resourceGroupName,
			Constraints: []validation.Constraint{{Target: "resourceGroupName", Name: validation.MaxLength, Rule: 90, Chain: nil},
				{Target: "resourceGroupName", Name: validation.MinLength, Rule: 1, Chain: nil}}}}); err != nil {
		return result, validation.NewError("workloads.SAPApplicationServerInstancesClient", "Delete", err.Error())
	}

	req, err := client.DeletePreparer(ctx, resourceGroupName, sapVirtualInstanceName, applicationInstanceName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "workloads.SAPApplicationServerInstancesClient", "Delete", nil, "Failure preparing request")
		return
	}

	result, err = client.DeleteSender(req)
	if err != nil {
		err = autorest.NewErrorWithError(err, "workloads.SAPApplicationServerInstancesClient", "Delete", result.Response(), "Failure sending request")
		return
	}

	return
}

// DeletePreparer prepares the Delete request.
func (client SAPApplicationServerInstancesClient) DeletePreparer(ctx context.Context, resourceGroupName string, sapVirtualInstanceName string, applicationInstanceName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"applicationInstanceName": autorest.Encode("path", applicationInstanceName),
		"resourceGroupName":       autorest.Encode("path", resourceGroupName),
		"sapVirtualInstanceName":  autorest.Encode("path", sapVirtualInstanceName),
		"subscriptionId":          autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2021-12-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsDelete(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/sapVirtualInstances/{sapVirtualInstanceName}/applicationInstances/{applicationInstanceName}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// DeleteSender sends the Delete request. The method will close the
// http.Response Body if it receives an error.
func (client SAPApplicationServerInstancesClient) DeleteSender(req *http.Request) (future SAPApplicationServerInstancesDeleteFuture, err error) {
	var resp *http.Response
	future.FutureAPI = &azure.Future{}
	resp, err = client.Send(req, azure.DoRetryWithRegistration(client.Client))
	if err != nil {
		return
	}
	var azf azure.Future
	azf, err = azure.NewFutureFromResponse(resp)
	future.FutureAPI = &azf
	future.Result = future.result
	return
}

// DeleteResponder handles the response to the Delete request. The method always
// closes the http.Response Body.
func (client SAPApplicationServerInstancesClient) DeleteResponder(resp *http.Response) (result OperationStatusResult, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Get gets the SAP Application Server Instance.
// Parameters:
// resourceGroupName - the name of the resource group. The name is case insensitive.
// sapVirtualInstanceName - the name of the Virtual Instances for SAP.
// applicationInstanceName - the name of SAP Application Server instance.
func (client SAPApplicationServerInstancesClient) Get(ctx context.Context, resourceGroupName string, sapVirtualInstanceName string, applicationInstanceName string) (result SAPApplicationServerInstance, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/SAPApplicationServerInstancesClient.Get")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: client.SubscriptionID,
			Constraints: []validation.Constraint{{Target: "client.SubscriptionID", Name: validation.MinLength, Rule: 1, Chain: nil}}},
		{TargetValue: resourceGroupName,
			Constraints: []validation.Constraint{{Target: "resourceGroupName", Name: validation.MaxLength, Rule: 90, Chain: nil},
				{Target: "resourceGroupName", Name: validation.MinLength, Rule: 1, Chain: nil}}}}); err != nil {
		return result, validation.NewError("workloads.SAPApplicationServerInstancesClient", "Get", err.Error())
	}

	req, err := client.GetPreparer(ctx, resourceGroupName, sapVirtualInstanceName, applicationInstanceName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "workloads.SAPApplicationServerInstancesClient", "Get", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "workloads.SAPApplicationServerInstancesClient", "Get", resp, "Failure sending request")
		return
	}

	result, err = client.GetResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "workloads.SAPApplicationServerInstancesClient", "Get", resp, "Failure responding to request")
		return
	}

	return
}

// GetPreparer prepares the Get request.
func (client SAPApplicationServerInstancesClient) GetPreparer(ctx context.Context, resourceGroupName string, sapVirtualInstanceName string, applicationInstanceName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"applicationInstanceName": autorest.Encode("path", applicationInstanceName),
		"resourceGroupName":       autorest.Encode("path", resourceGroupName),
		"sapVirtualInstanceName":  autorest.Encode("path", sapVirtualInstanceName),
		"subscriptionId":          autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2021-12-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/sapVirtualInstances/{sapVirtualInstanceName}/applicationInstances/{applicationInstanceName}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetSender sends the Get request. The method will close the
// http.Response Body if it receives an error.
func (client SAPApplicationServerInstancesClient) GetSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// GetResponder handles the response to the Get request. The method always
// closes the http.Response Body.
func (client SAPApplicationServerInstancesClient) GetResponder(resp *http.Response) (result SAPApplicationServerInstance, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// List lists the SAP Application server Instances in an SVI.
// Parameters:
// resourceGroupName - the name of the resource group. The name is case insensitive.
// sapVirtualInstanceName - the name of the Virtual Instances for SAP.
func (client SAPApplicationServerInstancesClient) List(ctx context.Context, resourceGroupName string, sapVirtualInstanceName string) (result SAPApplicationServerInstanceListPage, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/SAPApplicationServerInstancesClient.List")
		defer func() {
			sc := -1
			if result.sasil.Response.Response != nil {
				sc = result.sasil.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: client.SubscriptionID,
			Constraints: []validation.Constraint{{Target: "client.SubscriptionID", Name: validation.MinLength, Rule: 1, Chain: nil}}},
		{TargetValue: resourceGroupName,
			Constraints: []validation.Constraint{{Target: "resourceGroupName", Name: validation.MaxLength, Rule: 90, Chain: nil},
				{Target: "resourceGroupName", Name: validation.MinLength, Rule: 1, Chain: nil}}}}); err != nil {
		return result, validation.NewError("workloads.SAPApplicationServerInstancesClient", "List", err.Error())
	}

	result.fn = client.listNextResults
	req, err := client.ListPreparer(ctx, resourceGroupName, sapVirtualInstanceName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "workloads.SAPApplicationServerInstancesClient", "List", nil, "Failure preparing request")
		return
	}

	resp, err := client.ListSender(req)
	if err != nil {
		result.sasil.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "workloads.SAPApplicationServerInstancesClient", "List", resp, "Failure sending request")
		return
	}

	result.sasil, err = client.ListResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "workloads.SAPApplicationServerInstancesClient", "List", resp, "Failure responding to request")
		return
	}
	if result.sasil.hasNextLink() && result.sasil.IsEmpty() {
		err = result.NextWithContext(ctx)
		return
	}

	return
}

// ListPreparer prepares the List request.
func (client SAPApplicationServerInstancesClient) ListPreparer(ctx context.Context, resourceGroupName string, sapVirtualInstanceName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"resourceGroupName":      autorest.Encode("path", resourceGroupName),
		"sapVirtualInstanceName": autorest.Encode("path", sapVirtualInstanceName),
		"subscriptionId":         autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2021-12-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/sapVirtualInstances/{sapVirtualInstanceName}/applicationInstances", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ListSender sends the List request. The method will close the
// http.Response Body if it receives an error.
func (client SAPApplicationServerInstancesClient) ListSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// ListResponder handles the response to the List request. The method always
// closes the http.Response Body.
func (client SAPApplicationServerInstancesClient) ListResponder(resp *http.Response) (result SAPApplicationServerInstanceList, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// listNextResults retrieves the next set of results, if any.
func (client SAPApplicationServerInstancesClient) listNextResults(ctx context.Context, lastResults SAPApplicationServerInstanceList) (result SAPApplicationServerInstanceList, err error) {
	req, err := lastResults.sAPApplicationServerInstanceListPreparer(ctx)
	if err != nil {
		return result, autorest.NewErrorWithError(err, "workloads.SAPApplicationServerInstancesClient", "listNextResults", nil, "Failure preparing next results request")
	}
	if req == nil {
		return
	}
	resp, err := client.ListSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		return result, autorest.NewErrorWithError(err, "workloads.SAPApplicationServerInstancesClient", "listNextResults", resp, "Failure sending next results request")
	}
	result, err = client.ListResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "workloads.SAPApplicationServerInstancesClient", "listNextResults", resp, "Failure responding to next results request")
	}
	return
}

// ListComplete enumerates all values, automatically crossing page boundaries as required.
func (client SAPApplicationServerInstancesClient) ListComplete(ctx context.Context, resourceGroupName string, sapVirtualInstanceName string) (result SAPApplicationServerInstanceListIterator, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/SAPApplicationServerInstancesClient.List")
		defer func() {
			sc := -1
			if result.Response().Response.Response != nil {
				sc = result.page.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	result.page, err = client.List(ctx, resourceGroupName, sapVirtualInstanceName)
	return
}

// Update puts the SAP Application Server Instance.
// Parameters:
// resourceGroupName - the name of the resource group. The name is case insensitive.
// sapVirtualInstanceName - the name of the Virtual Instances for SAP.
// applicationInstanceName - the name of SAP Application Server instance.
// body - the SAP Application Server instance request body.
func (client SAPApplicationServerInstancesClient) Update(ctx context.Context, resourceGroupName string, sapVirtualInstanceName string, applicationInstanceName string, body *UpdateSAPApplicationInstanceRequest) (result SAPApplicationServerInstancesUpdateFuture, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/SAPApplicationServerInstancesClient.Update")
		defer func() {
			sc := -1
			if result.FutureAPI != nil && result.FutureAPI.Response() != nil {
				sc = result.FutureAPI.Response().StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: client.SubscriptionID,
			Constraints: []validation.Constraint{{Target: "client.SubscriptionID", Name: validation.MinLength, Rule: 1, Chain: nil}}},
		{TargetValue: resourceGroupName,
			Constraints: []validation.Constraint{{Target: "resourceGroupName", Name: validation.MaxLength, Rule: 90, Chain: nil},
				{Target: "resourceGroupName", Name: validation.MinLength, Rule: 1, Chain: nil}}}}); err != nil {
		return result, validation.NewError("workloads.SAPApplicationServerInstancesClient", "Update", err.Error())
	}

	req, err := client.UpdatePreparer(ctx, resourceGroupName, sapVirtualInstanceName, applicationInstanceName, body)
	if err != nil {
		err = autorest.NewErrorWithError(err, "workloads.SAPApplicationServerInstancesClient", "Update", nil, "Failure preparing request")
		return
	}

	result, err = client.UpdateSender(req)
	if err != nil {
		err = autorest.NewErrorWithError(err, "workloads.SAPApplicationServerInstancesClient", "Update", result.Response(), "Failure sending request")
		return
	}

	return
}

// UpdatePreparer prepares the Update request.
func (client SAPApplicationServerInstancesClient) UpdatePreparer(ctx context.Context, resourceGroupName string, sapVirtualInstanceName string, applicationInstanceName string, body *UpdateSAPApplicationInstanceRequest) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"applicationInstanceName": autorest.Encode("path", applicationInstanceName),
		"resourceGroupName":       autorest.Encode("path", resourceGroupName),
		"sapVirtualInstanceName":  autorest.Encode("path", sapVirtualInstanceName),
		"subscriptionId":          autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2021-12-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPatch(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/sapVirtualInstances/{sapVirtualInstanceName}/applicationInstances/{applicationInstanceName}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	if body != nil {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(body))
	}
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// UpdateSender sends the Update request. The method will close the
// http.Response Body if it receives an error.
func (client SAPApplicationServerInstancesClient) UpdateSender(req *http.Request) (future SAPApplicationServerInstancesUpdateFuture, err error) {
	var resp *http.Response
	future.FutureAPI = &azure.Future{}
	resp, err = client.Send(req, azure.DoRetryWithRegistration(client.Client))
	if err != nil {
		return
	}
	var azf azure.Future
	azf, err = azure.NewFutureFromResponse(resp)
	future.FutureAPI = &azf
	future.Result = future.result
	return
}

// UpdateResponder handles the response to the Update request. The method always
// closes the http.Response Body.
func (client SAPApplicationServerInstancesClient) UpdateResponder(resp *http.Response) (result SAPApplicationServerInstance, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusCreated),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

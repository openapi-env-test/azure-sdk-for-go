package workloads

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/autorest/validation"
	"github.com/Azure/go-autorest/tracing"
	"net/http"
)

// PhpWorkloadsClient is the client for the PhpWorkloads methods of the Workloads service.
type PhpWorkloadsClient struct {
	BaseClient
}

// NewPhpWorkloadsClient creates an instance of the PhpWorkloadsClient client.
func NewPhpWorkloadsClient(subscriptionID string) PhpWorkloadsClient {
	return NewPhpWorkloadsClientWithBaseURI(DefaultBaseURI, subscriptionID)
}

// NewPhpWorkloadsClientWithBaseURI creates an instance of the PhpWorkloadsClient client using a custom endpoint.  Use
// this when interacting with an Azure cloud that uses a non-standard base URI (sovereign clouds, Azure stack).
func NewPhpWorkloadsClientWithBaseURI(baseURI string, subscriptionID string) PhpWorkloadsClient {
	return PhpWorkloadsClient{NewWithBaseURI(baseURI, subscriptionID)}
}

// CreateOrUpdate create or updated PHP workload resource.
// Parameters:
// resourceGroupName - the name of the resource group. The name is case insensitive.
// phpWorkloadName - php workload name
// phpWorkloadResource - resource create or update request payload
func (client PhpWorkloadsClient) CreateOrUpdate(ctx context.Context, resourceGroupName string, phpWorkloadName string, phpWorkloadResource PhpWorkloadResource) (result PhpWorkloadsCreateOrUpdateFuture, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/PhpWorkloadsClient.CreateOrUpdate")
		defer func() {
			sc := -1
			if result.FutureAPI != nil && result.FutureAPI.Response() != nil {
				sc = result.FutureAPI.Response().StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: client.SubscriptionID,
			Constraints: []validation.Constraint{{Target: "client.SubscriptionID", Name: validation.MinLength, Rule: 1, Chain: nil}}},
		{TargetValue: resourceGroupName,
			Constraints: []validation.Constraint{{Target: "resourceGroupName", Name: validation.MaxLength, Rule: 90, Chain: nil},
				{Target: "resourceGroupName", Name: validation.MinLength, Rule: 1, Chain: nil}}},
		{TargetValue: phpWorkloadResource,
			Constraints: []validation.Constraint{{Target: "phpWorkloadResource.PhpWorkloadResourceProperties", Name: validation.Null, Rule: false,
				Chain: []validation.Constraint{{Target: "phpWorkloadResource.PhpWorkloadResourceProperties.AppLocation", Name: validation.Null, Rule: true, Chain: nil},
					{Target: "phpWorkloadResource.PhpWorkloadResourceProperties.AdminUserProfile", Name: validation.Null, Rule: true,
						Chain: []validation.Constraint{{Target: "phpWorkloadResource.PhpWorkloadResourceProperties.AdminUserProfile.UserName", Name: validation.Null, Rule: true, Chain: nil},
							{Target: "phpWorkloadResource.PhpWorkloadResourceProperties.AdminUserProfile.SSHPublicKey", Name: validation.Null, Rule: true, Chain: nil},
						}},
					{Target: "phpWorkloadResource.PhpWorkloadResourceProperties.WebNodesProfile", Name: validation.Null, Rule: true,
						Chain: []validation.Constraint{{Target: "phpWorkloadResource.PhpWorkloadResourceProperties.WebNodesProfile.AutoScaleMinCount", Name: validation.Null, Rule: false,
							Chain: []validation.Constraint{{Target: "phpWorkloadResource.PhpWorkloadResourceProperties.WebNodesProfile.AutoScaleMinCount", Name: validation.InclusiveMinimum, Rule: int64(1), Chain: nil}}},
							{Target: "phpWorkloadResource.PhpWorkloadResourceProperties.WebNodesProfile.AutoScaleMaxCount", Name: validation.Null, Rule: false,
								Chain: []validation.Constraint{{Target: "phpWorkloadResource.PhpWorkloadResourceProperties.WebNodesProfile.AutoScaleMaxCount", Name: validation.InclusiveMinimum, Rule: int64(1), Chain: nil}}},
						}},
					{Target: "phpWorkloadResource.PhpWorkloadResourceProperties.ControllerProfile", Name: validation.Null, Rule: true,
						Chain: []validation.Constraint{{Target: "phpWorkloadResource.PhpWorkloadResourceProperties.ControllerProfile.NodeSku", Name: validation.Null, Rule: true, Chain: nil},
							{Target: "phpWorkloadResource.PhpWorkloadResourceProperties.ControllerProfile.OsImage", Name: validation.Null, Rule: true, Chain: nil},
							{Target: "phpWorkloadResource.PhpWorkloadResourceProperties.ControllerProfile.OsDisk", Name: validation.Null, Rule: true, Chain: nil},
						}},
					{Target: "phpWorkloadResource.PhpWorkloadResourceProperties.DatabaseProfile", Name: validation.Null, Rule: true,
						Chain: []validation.Constraint{{Target: "phpWorkloadResource.PhpWorkloadResourceProperties.DatabaseProfile.Type", Name: validation.Null, Rule: true, Chain: nil},
							{Target: "phpWorkloadResource.PhpWorkloadResourceProperties.DatabaseProfile.Sku", Name: validation.Null, Rule: true, Chain: nil},
							{Target: "phpWorkloadResource.PhpWorkloadResourceProperties.DatabaseProfile.StorageInGB", Name: validation.Null, Rule: false,
								Chain: []validation.Constraint{{Target: "phpWorkloadResource.PhpWorkloadResourceProperties.DatabaseProfile.StorageInGB", Name: validation.InclusiveMinimum, Rule: int64(1), Chain: nil}}},
						}},
					{Target: "phpWorkloadResource.PhpWorkloadResourceProperties.FileshareProfile", Name: validation.Null, Rule: false,
						Chain: []validation.Constraint{{Target: "phpWorkloadResource.PhpWorkloadResourceProperties.FileshareProfile.ShareSizeInGB", Name: validation.Null, Rule: false,
							Chain: []validation.Constraint{{Target: "phpWorkloadResource.PhpWorkloadResourceProperties.FileshareProfile.ShareSizeInGB", Name: validation.InclusiveMinimum, Rule: int64(1), Chain: nil}}},
						}},
					{Target: "phpWorkloadResource.PhpWorkloadResourceProperties.SearchProfile", Name: validation.Null, Rule: false,
						Chain: []validation.Constraint{{Target: "phpWorkloadResource.PhpWorkloadResourceProperties.SearchProfile.SearchType", Name: validation.Null, Rule: true, Chain: nil}}},
					{Target: "phpWorkloadResource.PhpWorkloadResourceProperties.CacheProfile", Name: validation.Null, Rule: false,
						Chain: []validation.Constraint{{Target: "phpWorkloadResource.PhpWorkloadResourceProperties.CacheProfile.SkuName", Name: validation.Null, Rule: true, Chain: nil},
							{Target: "phpWorkloadResource.PhpWorkloadResourceProperties.CacheProfile.Capacity", Name: validation.Null, Rule: true, Chain: nil},
						}},
				}},
				{Target: "phpWorkloadResource.Kind", Name: validation.Null, Rule: true, Chain: nil},
				{Target: "phpWorkloadResource.Sku", Name: validation.Null, Rule: false,
					Chain: []validation.Constraint{{Target: "phpWorkloadResource.Sku.Name", Name: validation.Null, Rule: true, Chain: nil}}}}}}); err != nil {
		return result, validation.NewError("workloads.PhpWorkloadsClient", "CreateOrUpdate", err.Error())
	}

	req, err := client.CreateOrUpdatePreparer(ctx, resourceGroupName, phpWorkloadName, phpWorkloadResource)
	if err != nil {
		err = autorest.NewErrorWithError(err, "workloads.PhpWorkloadsClient", "CreateOrUpdate", nil, "Failure preparing request")
		return
	}

	result, err = client.CreateOrUpdateSender(req)
	if err != nil {
		err = autorest.NewErrorWithError(err, "workloads.PhpWorkloadsClient", "CreateOrUpdate", result.Response(), "Failure sending request")
		return
	}

	return
}

// CreateOrUpdatePreparer prepares the CreateOrUpdate request.
func (client PhpWorkloadsClient) CreateOrUpdatePreparer(ctx context.Context, resourceGroupName string, phpWorkloadName string, phpWorkloadResource PhpWorkloadResource) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"phpWorkloadName":   autorest.Encode("path", phpWorkloadName),
		"resourceGroupName": autorest.Encode("path", resourceGroupName),
		"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2021-12-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/phpWorkloads/{phpWorkloadName}", pathParameters),
		autorest.WithJSON(phpWorkloadResource),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// CreateOrUpdateSender sends the CreateOrUpdate request. The method will close the
// http.Response Body if it receives an error.
func (client PhpWorkloadsClient) CreateOrUpdateSender(req *http.Request) (future PhpWorkloadsCreateOrUpdateFuture, err error) {
	var resp *http.Response
	future.FutureAPI = &azure.Future{}
	resp, err = client.Send(req, azure.DoRetryWithRegistration(client.Client))
	if err != nil {
		return
	}
	var azf azure.Future
	azf, err = azure.NewFutureFromResponse(resp)
	future.FutureAPI = &azf
	future.Result = future.result
	return
}

// CreateOrUpdateResponder handles the response to the CreateOrUpdate request. The method always
// closes the http.Response Body.
func (client PhpWorkloadsClient) CreateOrUpdateResponder(resp *http.Response) (result PhpWorkloadResource, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusCreated),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Delete delete PHP workload resource.
// Parameters:
// resourceGroupName - the name of the resource group. The name is case insensitive.
// phpWorkloadName - php workload name
// deleteInfra - whether to delete infra along with workload resource.
func (client PhpWorkloadsClient) Delete(ctx context.Context, resourceGroupName string, phpWorkloadName string, deleteInfra string) (result PhpWorkloadsDeleteFuture, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/PhpWorkloadsClient.Delete")
		defer func() {
			sc := -1
			if result.FutureAPI != nil && result.FutureAPI.Response() != nil {
				sc = result.FutureAPI.Response().StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: client.SubscriptionID,
			Constraints: []validation.Constraint{{Target: "client.SubscriptionID", Name: validation.MinLength, Rule: 1, Chain: nil}}},
		{TargetValue: resourceGroupName,
			Constraints: []validation.Constraint{{Target: "resourceGroupName", Name: validation.MaxLength, Rule: 90, Chain: nil},
				{Target: "resourceGroupName", Name: validation.MinLength, Rule: 1, Chain: nil}}},
		{TargetValue: deleteInfra,
			Constraints: []validation.Constraint{{Target: "deleteInfra", Name: validation.Empty, Rule: false,
				Chain: []validation.Constraint{{Target: "deleteInfra", Name: validation.MinLength, Rule: 1, Chain: nil}}}}}}); err != nil {
		return result, validation.NewError("workloads.PhpWorkloadsClient", "Delete", err.Error())
	}

	req, err := client.DeletePreparer(ctx, resourceGroupName, phpWorkloadName, deleteInfra)
	if err != nil {
		err = autorest.NewErrorWithError(err, "workloads.PhpWorkloadsClient", "Delete", nil, "Failure preparing request")
		return
	}

	result, err = client.DeleteSender(req)
	if err != nil {
		err = autorest.NewErrorWithError(err, "workloads.PhpWorkloadsClient", "Delete", result.Response(), "Failure sending request")
		return
	}

	return
}

// DeletePreparer prepares the Delete request.
func (client PhpWorkloadsClient) DeletePreparer(ctx context.Context, resourceGroupName string, phpWorkloadName string, deleteInfra string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"phpWorkloadName":   autorest.Encode("path", phpWorkloadName),
		"resourceGroupName": autorest.Encode("path", resourceGroupName),
		"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2021-12-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}
	if len(deleteInfra) > 0 {
		queryParameters["delete-infra"] = autorest.Encode("query", deleteInfra)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsDelete(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/phpWorkloads/{phpWorkloadName}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// DeleteSender sends the Delete request. The method will close the
// http.Response Body if it receives an error.
func (client PhpWorkloadsClient) DeleteSender(req *http.Request) (future PhpWorkloadsDeleteFuture, err error) {
	var resp *http.Response
	future.FutureAPI = &azure.Future{}
	resp, err = client.Send(req, azure.DoRetryWithRegistration(client.Client))
	if err != nil {
		return
	}
	var azf azure.Future
	azf, err = azure.NewFutureFromResponse(resp)
	future.FutureAPI = &azf
	future.Result = future.result
	return
}

// DeleteResponder handles the response to the Delete request. The method always
// closes the http.Response Body.
func (client PhpWorkloadsClient) DeleteResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent),
		autorest.ByClosing())
	result.Response = resp
	return
}

// Get gets the PHP workload resource.
// Parameters:
// resourceGroupName - the name of the resource group. The name is case insensitive.
// phpWorkloadName - php workload name
func (client PhpWorkloadsClient) Get(ctx context.Context, resourceGroupName string, phpWorkloadName string) (result PhpWorkloadResource, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/PhpWorkloadsClient.Get")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: client.SubscriptionID,
			Constraints: []validation.Constraint{{Target: "client.SubscriptionID", Name: validation.MinLength, Rule: 1, Chain: nil}}},
		{TargetValue: resourceGroupName,
			Constraints: []validation.Constraint{{Target: "resourceGroupName", Name: validation.MaxLength, Rule: 90, Chain: nil},
				{Target: "resourceGroupName", Name: validation.MinLength, Rule: 1, Chain: nil}}}}); err != nil {
		return result, validation.NewError("workloads.PhpWorkloadsClient", "Get", err.Error())
	}

	req, err := client.GetPreparer(ctx, resourceGroupName, phpWorkloadName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "workloads.PhpWorkloadsClient", "Get", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "workloads.PhpWorkloadsClient", "Get", resp, "Failure sending request")
		return
	}

	result, err = client.GetResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "workloads.PhpWorkloadsClient", "Get", resp, "Failure responding to request")
		return
	}

	return
}

// GetPreparer prepares the Get request.
func (client PhpWorkloadsClient) GetPreparer(ctx context.Context, resourceGroupName string, phpWorkloadName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"phpWorkloadName":   autorest.Encode("path", phpWorkloadName),
		"resourceGroupName": autorest.Encode("path", resourceGroupName),
		"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2021-12-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/phpWorkloads/{phpWorkloadName}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetSender sends the Get request. The method will close the
// http.Response Body if it receives an error.
func (client PhpWorkloadsClient) GetSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// GetResponder handles the response to the Get request. The method always
// closes the http.Response Body.
func (client PhpWorkloadsClient) GetResponder(resp *http.Response) (result PhpWorkloadResource, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// ListByResourceGroup lists PHP workload resources in a resource group.
// Parameters:
// resourceGroupName - the name of the resource group. The name is case insensitive.
func (client PhpWorkloadsClient) ListByResourceGroup(ctx context.Context, resourceGroupName string) (result PhpWorkloadResourceListPage, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/PhpWorkloadsClient.ListByResourceGroup")
		defer func() {
			sc := -1
			if result.pwrl.Response.Response != nil {
				sc = result.pwrl.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: client.SubscriptionID,
			Constraints: []validation.Constraint{{Target: "client.SubscriptionID", Name: validation.MinLength, Rule: 1, Chain: nil}}},
		{TargetValue: resourceGroupName,
			Constraints: []validation.Constraint{{Target: "resourceGroupName", Name: validation.MaxLength, Rule: 90, Chain: nil},
				{Target: "resourceGroupName", Name: validation.MinLength, Rule: 1, Chain: nil}}}}); err != nil {
		return result, validation.NewError("workloads.PhpWorkloadsClient", "ListByResourceGroup", err.Error())
	}

	result.fn = client.listByResourceGroupNextResults
	req, err := client.ListByResourceGroupPreparer(ctx, resourceGroupName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "workloads.PhpWorkloadsClient", "ListByResourceGroup", nil, "Failure preparing request")
		return
	}

	resp, err := client.ListByResourceGroupSender(req)
	if err != nil {
		result.pwrl.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "workloads.PhpWorkloadsClient", "ListByResourceGroup", resp, "Failure sending request")
		return
	}

	result.pwrl, err = client.ListByResourceGroupResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "workloads.PhpWorkloadsClient", "ListByResourceGroup", resp, "Failure responding to request")
		return
	}
	if result.pwrl.hasNextLink() && result.pwrl.IsEmpty() {
		err = result.NextWithContext(ctx)
		return
	}

	return
}

// ListByResourceGroupPreparer prepares the ListByResourceGroup request.
func (client PhpWorkloadsClient) ListByResourceGroupPreparer(ctx context.Context, resourceGroupName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"resourceGroupName": autorest.Encode("path", resourceGroupName),
		"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2021-12-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/phpWorkloads", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ListByResourceGroupSender sends the ListByResourceGroup request. The method will close the
// http.Response Body if it receives an error.
func (client PhpWorkloadsClient) ListByResourceGroupSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// ListByResourceGroupResponder handles the response to the ListByResourceGroup request. The method always
// closes the http.Response Body.
func (client PhpWorkloadsClient) ListByResourceGroupResponder(resp *http.Response) (result PhpWorkloadResourceList, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// listByResourceGroupNextResults retrieves the next set of results, if any.
func (client PhpWorkloadsClient) listByResourceGroupNextResults(ctx context.Context, lastResults PhpWorkloadResourceList) (result PhpWorkloadResourceList, err error) {
	req, err := lastResults.phpWorkloadResourceListPreparer(ctx)
	if err != nil {
		return result, autorest.NewErrorWithError(err, "workloads.PhpWorkloadsClient", "listByResourceGroupNextResults", nil, "Failure preparing next results request")
	}
	if req == nil {
		return
	}
	resp, err := client.ListByResourceGroupSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		return result, autorest.NewErrorWithError(err, "workloads.PhpWorkloadsClient", "listByResourceGroupNextResults", resp, "Failure sending next results request")
	}
	result, err = client.ListByResourceGroupResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "workloads.PhpWorkloadsClient", "listByResourceGroupNextResults", resp, "Failure responding to next results request")
	}
	return
}

// ListByResourceGroupComplete enumerates all values, automatically crossing page boundaries as required.
func (client PhpWorkloadsClient) ListByResourceGroupComplete(ctx context.Context, resourceGroupName string) (result PhpWorkloadResourceListIterator, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/PhpWorkloadsClient.ListByResourceGroup")
		defer func() {
			sc := -1
			if result.Response().Response.Response != nil {
				sc = result.page.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	result.page, err = client.ListByResourceGroup(ctx, resourceGroupName)
	return
}

// ListBySubscription lists PHP workload resources for a subscription.
func (client PhpWorkloadsClient) ListBySubscription(ctx context.Context) (result PhpWorkloadResourceListPage, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/PhpWorkloadsClient.ListBySubscription")
		defer func() {
			sc := -1
			if result.pwrl.Response.Response != nil {
				sc = result.pwrl.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: client.SubscriptionID,
			Constraints: []validation.Constraint{{Target: "client.SubscriptionID", Name: validation.MinLength, Rule: 1, Chain: nil}}}}); err != nil {
		return result, validation.NewError("workloads.PhpWorkloadsClient", "ListBySubscription", err.Error())
	}

	result.fn = client.listBySubscriptionNextResults
	req, err := client.ListBySubscriptionPreparer(ctx)
	if err != nil {
		err = autorest.NewErrorWithError(err, "workloads.PhpWorkloadsClient", "ListBySubscription", nil, "Failure preparing request")
		return
	}

	resp, err := client.ListBySubscriptionSender(req)
	if err != nil {
		result.pwrl.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "workloads.PhpWorkloadsClient", "ListBySubscription", resp, "Failure sending request")
		return
	}

	result.pwrl, err = client.ListBySubscriptionResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "workloads.PhpWorkloadsClient", "ListBySubscription", resp, "Failure responding to request")
		return
	}
	if result.pwrl.hasNextLink() && result.pwrl.IsEmpty() {
		err = result.NextWithContext(ctx)
		return
	}

	return
}

// ListBySubscriptionPreparer prepares the ListBySubscription request.
func (client PhpWorkloadsClient) ListBySubscriptionPreparer(ctx context.Context) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"subscriptionId": autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2021-12-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/providers/Microsoft.Workloads/phpWorkloads", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ListBySubscriptionSender sends the ListBySubscription request. The method will close the
// http.Response Body if it receives an error.
func (client PhpWorkloadsClient) ListBySubscriptionSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// ListBySubscriptionResponder handles the response to the ListBySubscription request. The method always
// closes the http.Response Body.
func (client PhpWorkloadsClient) ListBySubscriptionResponder(resp *http.Response) (result PhpWorkloadResourceList, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// listBySubscriptionNextResults retrieves the next set of results, if any.
func (client PhpWorkloadsClient) listBySubscriptionNextResults(ctx context.Context, lastResults PhpWorkloadResourceList) (result PhpWorkloadResourceList, err error) {
	req, err := lastResults.phpWorkloadResourceListPreparer(ctx)
	if err != nil {
		return result, autorest.NewErrorWithError(err, "workloads.PhpWorkloadsClient", "listBySubscriptionNextResults", nil, "Failure preparing next results request")
	}
	if req == nil {
		return
	}
	resp, err := client.ListBySubscriptionSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		return result, autorest.NewErrorWithError(err, "workloads.PhpWorkloadsClient", "listBySubscriptionNextResults", resp, "Failure sending next results request")
	}
	result, err = client.ListBySubscriptionResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "workloads.PhpWorkloadsClient", "listBySubscriptionNextResults", resp, "Failure responding to next results request")
	}
	return
}

// ListBySubscriptionComplete enumerates all values, automatically crossing page boundaries as required.
func (client PhpWorkloadsClient) ListBySubscriptionComplete(ctx context.Context) (result PhpWorkloadResourceListIterator, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/PhpWorkloadsClient.ListBySubscription")
		defer func() {
			sc := -1
			if result.Response().Response.Response != nil {
				sc = result.page.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	result.page, err = client.ListBySubscription(ctx)
	return
}

// Update update PHP workload resource.
// Parameters:
// resourceGroupName - the name of the resource group. The name is case insensitive.
// phpWorkloadName - php workload name
// resourcePatchRequestBody - workload resource update data
func (client PhpWorkloadsClient) Update(ctx context.Context, resourceGroupName string, phpWorkloadName string, resourcePatchRequestBody PatchResourceRequestBody) (result PhpWorkloadResource, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/PhpWorkloadsClient.Update")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: client.SubscriptionID,
			Constraints: []validation.Constraint{{Target: "client.SubscriptionID", Name: validation.MinLength, Rule: 1, Chain: nil}}},
		{TargetValue: resourceGroupName,
			Constraints: []validation.Constraint{{Target: "resourceGroupName", Name: validation.MaxLength, Rule: 90, Chain: nil},
				{Target: "resourceGroupName", Name: validation.MinLength, Rule: 1, Chain: nil}}}}); err != nil {
		return result, validation.NewError("workloads.PhpWorkloadsClient", "Update", err.Error())
	}

	req, err := client.UpdatePreparer(ctx, resourceGroupName, phpWorkloadName, resourcePatchRequestBody)
	if err != nil {
		err = autorest.NewErrorWithError(err, "workloads.PhpWorkloadsClient", "Update", nil, "Failure preparing request")
		return
	}

	resp, err := client.UpdateSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "workloads.PhpWorkloadsClient", "Update", resp, "Failure sending request")
		return
	}

	result, err = client.UpdateResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "workloads.PhpWorkloadsClient", "Update", resp, "Failure responding to request")
		return
	}

	return
}

// UpdatePreparer prepares the Update request.
func (client PhpWorkloadsClient) UpdatePreparer(ctx context.Context, resourceGroupName string, phpWorkloadName string, resourcePatchRequestBody PatchResourceRequestBody) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"phpWorkloadName":   autorest.Encode("path", phpWorkloadName),
		"resourceGroupName": autorest.Encode("path", resourceGroupName),
		"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2021-12-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPatch(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/phpWorkloads/{phpWorkloadName}", pathParameters),
		autorest.WithJSON(resourcePatchRequestBody),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// UpdateSender sends the Update request. The method will close the
// http.Response Body if it receives an error.
func (client PhpWorkloadsClient) UpdateSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// UpdateResponder handles the response to the Update request. The method always
// closes the http.Response Body.
func (client PhpWorkloadsClient) UpdateResponder(resp *http.Response) (result PhpWorkloadResource, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

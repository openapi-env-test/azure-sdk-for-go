// Package workloads implements the Azure ARM Workloads service API version 2021-12-01-preview.
//
//
package workloads

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/autorest/validation"
	"github.com/Azure/go-autorest/tracing"
	"net/http"
)

const (
	// DefaultBaseURI is the default URI used for the service Workloads
	DefaultBaseURI = "https://management.azure.com"
)

// BaseClient is the base client for Workloads.
type BaseClient struct {
	autorest.Client
	BaseURI        string
	SubscriptionID string
}

// New creates an instance of the BaseClient client.
func New(subscriptionID string) BaseClient {
	return NewWithBaseURI(DefaultBaseURI, subscriptionID)
}

// NewWithBaseURI creates an instance of the BaseClient client using a custom endpoint.  Use this when interacting with
// an Azure cloud that uses a non-standard base URI (sovereign clouds, Azure stack).
func NewWithBaseURI(baseURI string, subscriptionID string) BaseClient {
	return BaseClient{
		Client:         autorest.NewClientWithUserAgent(UserAgent()),
		BaseURI:        baseURI,
		SubscriptionID: subscriptionID,
	}
}

// SAPAvailabilityZoneDetails get SAP Availability Zone Details.
// Parameters:
// location - the name of Azure region.
// sAPAvailabilityZoneDetails - SAP Availability Zone Details Request body
func (client BaseClient) SAPAvailabilityZoneDetails(ctx context.Context, location string, sAPAvailabilityZoneDetails *SAPAvailabilityZoneDetailsRequest) (result SAPAvailabilityZoneDetailsResult, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.SAPAvailabilityZoneDetails")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: client.SubscriptionID,
			Constraints: []validation.Constraint{{Target: "client.SubscriptionID", Name: validation.MinLength, Rule: 1, Chain: nil}}},
		{TargetValue: location,
			Constraints: []validation.Constraint{{Target: "location", Name: validation.MinLength, Rule: 1, Chain: nil}}},
		{TargetValue: sAPAvailabilityZoneDetails,
			Constraints: []validation.Constraint{{Target: "sAPAvailabilityZoneDetails", Name: validation.Null, Rule: false,
				Chain: []validation.Constraint{{Target: "sAPAvailabilityZoneDetails.AppLocation", Name: validation.Null, Rule: true, Chain: nil}}}}}}); err != nil {
		return result, validation.NewError("workloads.BaseClient", "SAPAvailabilityZoneDetails", err.Error())
	}

	req, err := client.SAPAvailabilityZoneDetailsPreparer(ctx, location, sAPAvailabilityZoneDetails)
	if err != nil {
		err = autorest.NewErrorWithError(err, "workloads.BaseClient", "SAPAvailabilityZoneDetails", nil, "Failure preparing request")
		return
	}

	resp, err := client.SAPAvailabilityZoneDetailsSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "workloads.BaseClient", "SAPAvailabilityZoneDetails", resp, "Failure sending request")
		return
	}

	result, err = client.SAPAvailabilityZoneDetailsResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "workloads.BaseClient", "SAPAvailabilityZoneDetails", resp, "Failure responding to request")
		return
	}

	return
}

// SAPAvailabilityZoneDetailsPreparer prepares the SAPAvailabilityZoneDetails request.
func (client BaseClient) SAPAvailabilityZoneDetailsPreparer(ctx context.Context, location string, sAPAvailabilityZoneDetails *SAPAvailabilityZoneDetailsRequest) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"location":       autorest.Encode("path", location),
		"subscriptionId": autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2021-12-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/providers/Microsoft.Workloads/locations/{location}/sapVirtualInstanceMetadata/default/getAvailabilityZoneDetails", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	if sAPAvailabilityZoneDetails != nil {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(sAPAvailabilityZoneDetails))
	}
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// SAPAvailabilityZoneDetailsSender sends the SAPAvailabilityZoneDetails request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) SAPAvailabilityZoneDetailsSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// SAPAvailabilityZoneDetailsResponder handles the response to the SAPAvailabilityZoneDetails request. The method always
// closes the http.Response Body.
func (client BaseClient) SAPAvailabilityZoneDetailsResponder(resp *http.Response) (result SAPAvailabilityZoneDetailsResult, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// SAPDiskConfigurations get SAP Disk Configurations.
// Parameters:
// location - the name of Azure region.
// sAPDiskConfigurations - SAP Disk Configurations Request body
func (client BaseClient) SAPDiskConfigurations(ctx context.Context, location string, sAPDiskConfigurations *SAPDiskConfigurationsRequest) (result SAPDiskConfigurationsResult, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.SAPDiskConfigurations")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: client.SubscriptionID,
			Constraints: []validation.Constraint{{Target: "client.SubscriptionID", Name: validation.MinLength, Rule: 1, Chain: nil}}},
		{TargetValue: location,
			Constraints: []validation.Constraint{{Target: "location", Name: validation.MinLength, Rule: 1, Chain: nil}}},
		{TargetValue: sAPDiskConfigurations,
			Constraints: []validation.Constraint{{Target: "sAPDiskConfigurations", Name: validation.Null, Rule: false,
				Chain: []validation.Constraint{{Target: "sAPDiskConfigurations.AppLocation", Name: validation.Null, Rule: true, Chain: nil},
					{Target: "sAPDiskConfigurations.DbVMSku", Name: validation.Null, Rule: true, Chain: nil},
				}}}}}); err != nil {
		return result, validation.NewError("workloads.BaseClient", "SAPDiskConfigurations", err.Error())
	}

	req, err := client.SAPDiskConfigurationsPreparer(ctx, location, sAPDiskConfigurations)
	if err != nil {
		err = autorest.NewErrorWithError(err, "workloads.BaseClient", "SAPDiskConfigurations", nil, "Failure preparing request")
		return
	}

	resp, err := client.SAPDiskConfigurationsSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "workloads.BaseClient", "SAPDiskConfigurations", resp, "Failure sending request")
		return
	}

	result, err = client.SAPDiskConfigurationsResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "workloads.BaseClient", "SAPDiskConfigurations", resp, "Failure responding to request")
		return
	}

	return
}

// SAPDiskConfigurationsPreparer prepares the SAPDiskConfigurations request.
func (client BaseClient) SAPDiskConfigurationsPreparer(ctx context.Context, location string, sAPDiskConfigurations *SAPDiskConfigurationsRequest) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"location":       autorest.Encode("path", location),
		"subscriptionId": autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2021-12-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/providers/Microsoft.Workloads/locations/{location}/sapVirtualInstanceMetadata/default/getDiskConfigurations", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	if sAPDiskConfigurations != nil {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(sAPDiskConfigurations))
	}
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// SAPDiskConfigurationsSender sends the SAPDiskConfigurations request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) SAPDiskConfigurationsSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// SAPDiskConfigurationsResponder handles the response to the SAPDiskConfigurations request. The method always
// closes the http.Response Body.
func (client BaseClient) SAPDiskConfigurationsResponder(resp *http.Response) (result SAPDiskConfigurationsResult, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// SAPSizingRecommendations get SAP sizing recommendations.
// Parameters:
// location - the name of Azure region.
// sAPSizingRecommendation - SAP Sizing Recommendation Request body
func (client BaseClient) SAPSizingRecommendations(ctx context.Context, location string, sAPSizingRecommendation *SAPSizingRecommendationRequest) (result SAPSizingRecommendationResultModel, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.SAPSizingRecommendations")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: client.SubscriptionID,
			Constraints: []validation.Constraint{{Target: "client.SubscriptionID", Name: validation.MinLength, Rule: 1, Chain: nil}}},
		{TargetValue: location,
			Constraints: []validation.Constraint{{Target: "location", Name: validation.MinLength, Rule: 1, Chain: nil}}},
		{TargetValue: sAPSizingRecommendation,
			Constraints: []validation.Constraint{{Target: "sAPSizingRecommendation", Name: validation.Null, Rule: false,
				Chain: []validation.Constraint{{Target: "sAPSizingRecommendation.AppLocation", Name: validation.Null, Rule: true, Chain: nil},
					{Target: "sAPSizingRecommendation.Saps", Name: validation.Null, Rule: true, Chain: nil},
					{Target: "sAPSizingRecommendation.DbMemory", Name: validation.Null, Rule: true, Chain: nil},
				}}}}}); err != nil {
		return result, validation.NewError("workloads.BaseClient", "SAPSizingRecommendations", err.Error())
	}

	req, err := client.SAPSizingRecommendationsPreparer(ctx, location, sAPSizingRecommendation)
	if err != nil {
		err = autorest.NewErrorWithError(err, "workloads.BaseClient", "SAPSizingRecommendations", nil, "Failure preparing request")
		return
	}

	resp, err := client.SAPSizingRecommendationsSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "workloads.BaseClient", "SAPSizingRecommendations", resp, "Failure sending request")
		return
	}

	result, err = client.SAPSizingRecommendationsResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "workloads.BaseClient", "SAPSizingRecommendations", resp, "Failure responding to request")
		return
	}

	return
}

// SAPSizingRecommendationsPreparer prepares the SAPSizingRecommendations request.
func (client BaseClient) SAPSizingRecommendationsPreparer(ctx context.Context, location string, sAPSizingRecommendation *SAPSizingRecommendationRequest) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"location":       autorest.Encode("path", location),
		"subscriptionId": autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2021-12-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/providers/Microsoft.Workloads/locations/{location}/sapVirtualInstanceMetadata/default/getSizingRecommendations", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	if sAPSizingRecommendation != nil {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(sAPSizingRecommendation))
	}
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// SAPSizingRecommendationsSender sends the SAPSizingRecommendations request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) SAPSizingRecommendationsSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// SAPSizingRecommendationsResponder handles the response to the SAPSizingRecommendations request. The method always
// closes the http.Response Body.
func (client BaseClient) SAPSizingRecommendationsResponder(resp *http.Response) (result SAPSizingRecommendationResultModel, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// SAPSupportedSkuMethod get SAP supported SKUs.
// Parameters:
// location - the name of Azure region.
// sAPSupportedSku - SAP Supported SKU Request body
func (client BaseClient) SAPSupportedSkuMethod(ctx context.Context, location string, sAPSupportedSku *SAPSupportedSkusRequest) (result SAPSupportedResourceSkusResult, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.SAPSupportedSkuMethod")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: client.SubscriptionID,
			Constraints: []validation.Constraint{{Target: "client.SubscriptionID", Name: validation.MinLength, Rule: 1, Chain: nil}}},
		{TargetValue: location,
			Constraints: []validation.Constraint{{Target: "location", Name: validation.MinLength, Rule: 1, Chain: nil}}},
		{TargetValue: sAPSupportedSku,
			Constraints: []validation.Constraint{{Target: "sAPSupportedSku", Name: validation.Null, Rule: false,
				Chain: []validation.Constraint{{Target: "sAPSupportedSku.AppLocation", Name: validation.Null, Rule: true, Chain: nil}}}}}}); err != nil {
		return result, validation.NewError("workloads.BaseClient", "SAPSupportedSkuMethod", err.Error())
	}

	req, err := client.SAPSupportedSkuMethodPreparer(ctx, location, sAPSupportedSku)
	if err != nil {
		err = autorest.NewErrorWithError(err, "workloads.BaseClient", "SAPSupportedSkuMethod", nil, "Failure preparing request")
		return
	}

	resp, err := client.SAPSupportedSkuMethodSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "workloads.BaseClient", "SAPSupportedSkuMethod", resp, "Failure sending request")
		return
	}

	result, err = client.SAPSupportedSkuMethodResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "workloads.BaseClient", "SAPSupportedSkuMethod", resp, "Failure responding to request")
		return
	}

	return
}

// SAPSupportedSkuMethodPreparer prepares the SAPSupportedSkuMethod request.
func (client BaseClient) SAPSupportedSkuMethodPreparer(ctx context.Context, location string, sAPSupportedSku *SAPSupportedSkusRequest) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"location":       autorest.Encode("path", location),
		"subscriptionId": autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2021-12-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/providers/Microsoft.Workloads/locations/{location}/sapVirtualInstanceMetadata/default/getSapSupportedSku", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	if sAPSupportedSku != nil {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(sAPSupportedSku))
	}
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// SAPSupportedSkuMethodSender sends the SAPSupportedSkuMethod request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) SAPSupportedSkuMethodSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// SAPSupportedSkuMethodResponder handles the response to the SAPSupportedSkuMethod request. The method always
// closes the http.Response Body.
func (client BaseClient) SAPSupportedSkuMethodResponder(resp *http.Response) (result SAPSupportedResourceSkusResult, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

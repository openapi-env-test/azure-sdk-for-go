package billing

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/tracing"
	"net/http"
)

// PaymentMethodsClient is the billing Client
type PaymentMethodsClient struct {
	BaseClient
}

// NewPaymentMethodsClient creates an instance of the PaymentMethodsClient client.
func NewPaymentMethodsClient() PaymentMethodsClient {
	return NewPaymentMethodsClientWithBaseURI(DefaultBaseURI)
}

// NewPaymentMethodsClientWithBaseURI creates an instance of the PaymentMethodsClient client using a custom endpoint.
// Use this when interacting with an Azure cloud that uses a non-standard base URI (sovereign clouds, Azure stack).
func NewPaymentMethodsClientWithBaseURI(baseURI string) PaymentMethodsClient {
	return PaymentMethodsClient{NewWithBaseURI(baseURI)}
}

// DeleteAtBillingProfile deletes a payment method link and removes the payment method from a billing profile. The
// operation is supported only for billing accounts with agreement type Microsoft Customer Agreement.
// Parameters:
// billingAccountName - the ID that uniquely identifies a billing account.
// billingProfileName - the ID that uniquely identifies a billing profile.
// paymentMethodName - the ID that uniquely identifies a payment method.
func (client PaymentMethodsClient) DeleteAtBillingProfile(ctx context.Context, billingAccountName string, billingProfileName string, paymentMethodName string) (result PaymentMethodsDeleteAtBillingProfileFuture, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/PaymentMethodsClient.DeleteAtBillingProfile")
		defer func() {
			sc := -1
			if result.FutureAPI != nil && result.FutureAPI.Response() != nil {
				sc = result.FutureAPI.Response().StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.DeleteAtBillingProfilePreparer(ctx, billingAccountName, billingProfileName, paymentMethodName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "billing.PaymentMethodsClient", "DeleteAtBillingProfile", nil, "Failure preparing request")
		return
	}

	result, err = client.DeleteAtBillingProfileSender(req)
	if err != nil {
		err = autorest.NewErrorWithError(err, "billing.PaymentMethodsClient", "DeleteAtBillingProfile", result.Response(), "Failure sending request")
		return
	}

	return
}

// DeleteAtBillingProfilePreparer prepares the DeleteAtBillingProfile request.
func (client PaymentMethodsClient) DeleteAtBillingProfilePreparer(ctx context.Context, billingAccountName string, billingProfileName string, paymentMethodName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"billingAccountName": autorest.Encode("path", billingAccountName),
		"billingProfileName": autorest.Encode("path", billingProfileName),
		"paymentMethodName":  autorest.Encode("path", paymentMethodName),
	}

	const APIVersion = "2021-10-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsDelete(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/paymentMethodLinks/{paymentMethodName}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// DeleteAtBillingProfileSender sends the DeleteAtBillingProfile request. The method will close the
// http.Response Body if it receives an error.
func (client PaymentMethodsClient) DeleteAtBillingProfileSender(req *http.Request) (future PaymentMethodsDeleteAtBillingProfileFuture, err error) {
	var resp *http.Response
	future.FutureAPI = &azure.Future{}
	resp, err = client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	if err != nil {
		return
	}
	var azf azure.Future
	azf, err = azure.NewFutureFromResponse(resp)
	future.FutureAPI = &azf
	future.Result = future.result
	return
}

// DeleteAtBillingProfileResponder handles the response to the DeleteAtBillingProfile request. The method always
// closes the http.Response Body.
func (client PaymentMethodsClient) DeleteAtBillingProfileResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent),
		autorest.ByClosing())
	result.Response = resp
	return
}

// DeleteByUser deletes a payment method owned by the caller.
// Parameters:
// paymentMethodName - the ID that uniquely identifies a payment method.
func (client PaymentMethodsClient) DeleteByUser(ctx context.Context, paymentMethodName string) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/PaymentMethodsClient.DeleteByUser")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.DeleteByUserPreparer(ctx, paymentMethodName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "billing.PaymentMethodsClient", "DeleteByUser", nil, "Failure preparing request")
		return
	}

	resp, err := client.DeleteByUserSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "billing.PaymentMethodsClient", "DeleteByUser", resp, "Failure sending request")
		return
	}

	result, err = client.DeleteByUserResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "billing.PaymentMethodsClient", "DeleteByUser", resp, "Failure responding to request")
		return
	}

	return
}

// DeleteByUserPreparer prepares the DeleteByUser request.
func (client PaymentMethodsClient) DeleteByUserPreparer(ctx context.Context, paymentMethodName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"paymentMethodName": autorest.Encode("path", paymentMethodName),
	}

	const APIVersion = "2021-10-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsDelete(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/providers/Microsoft.Billing/paymentMethods/{paymentMethodName}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// DeleteByUserSender sends the DeleteByUser request. The method will close the
// http.Response Body if it receives an error.
func (client PaymentMethodsClient) DeleteByUserSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// DeleteByUserResponder handles the response to the DeleteByUser request. The method always
// closes the http.Response Body.
func (client PaymentMethodsClient) DeleteByUserResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusNoContent),
		autorest.ByClosing())
	result.Response = resp
	return
}

// GetByBillingAccount gets a payment method available for a billing account. The operation is supported only for
// billing accounts with agreement type Microsoft Customer Agreement.
// Parameters:
// billingAccountName - the ID that uniquely identifies a billing account.
// paymentMethodName - the ID that uniquely identifies a payment method.
func (client PaymentMethodsClient) GetByBillingAccount(ctx context.Context, billingAccountName string, paymentMethodName string) (result PaymentMethod, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/PaymentMethodsClient.GetByBillingAccount")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.GetByBillingAccountPreparer(ctx, billingAccountName, paymentMethodName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "billing.PaymentMethodsClient", "GetByBillingAccount", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetByBillingAccountSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "billing.PaymentMethodsClient", "GetByBillingAccount", resp, "Failure sending request")
		return
	}

	result, err = client.GetByBillingAccountResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "billing.PaymentMethodsClient", "GetByBillingAccount", resp, "Failure responding to request")
		return
	}

	return
}

// GetByBillingAccountPreparer prepares the GetByBillingAccount request.
func (client PaymentMethodsClient) GetByBillingAccountPreparer(ctx context.Context, billingAccountName string, paymentMethodName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"billingAccountName": autorest.Encode("path", billingAccountName),
		"paymentMethodName":  autorest.Encode("path", paymentMethodName),
	}

	const APIVersion = "2021-10-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/paymentMethods/{paymentMethodName}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetByBillingAccountSender sends the GetByBillingAccount request. The method will close the
// http.Response Body if it receives an error.
func (client PaymentMethodsClient) GetByBillingAccountSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetByBillingAccountResponder handles the response to the GetByBillingAccount request. The method always
// closes the http.Response Body.
func (client PaymentMethodsClient) GetByBillingAccountResponder(resp *http.Response) (result PaymentMethod, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetByBillingProfile gets a payment method linked with a billing profile. The operation is supported only for billing
// accounts with agreement type Microsoft Customer Agreement.
// Parameters:
// billingAccountName - the ID that uniquely identifies a billing account.
// billingProfileName - the ID that uniquely identifies a billing profile.
// paymentMethodName - the ID that uniquely identifies a payment method.
func (client PaymentMethodsClient) GetByBillingProfile(ctx context.Context, billingAccountName string, billingProfileName string, paymentMethodName string) (result PaymentMethodLink, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/PaymentMethodsClient.GetByBillingProfile")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.GetByBillingProfilePreparer(ctx, billingAccountName, billingProfileName, paymentMethodName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "billing.PaymentMethodsClient", "GetByBillingProfile", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetByBillingProfileSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "billing.PaymentMethodsClient", "GetByBillingProfile", resp, "Failure sending request")
		return
	}

	result, err = client.GetByBillingProfileResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "billing.PaymentMethodsClient", "GetByBillingProfile", resp, "Failure responding to request")
		return
	}

	return
}

// GetByBillingProfilePreparer prepares the GetByBillingProfile request.
func (client PaymentMethodsClient) GetByBillingProfilePreparer(ctx context.Context, billingAccountName string, billingProfileName string, paymentMethodName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"billingAccountName": autorest.Encode("path", billingAccountName),
		"billingProfileName": autorest.Encode("path", billingProfileName),
		"paymentMethodName":  autorest.Encode("path", paymentMethodName),
	}

	const APIVersion = "2021-10-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/paymentMethodLinks/{paymentMethodName}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetByBillingProfileSender sends the GetByBillingProfile request. The method will close the
// http.Response Body if it receives an error.
func (client PaymentMethodsClient) GetByBillingProfileSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetByBillingProfileResponder handles the response to the GetByBillingProfile request. The method always
// closes the http.Response Body.
func (client PaymentMethodsClient) GetByBillingProfileResponder(resp *http.Response) (result PaymentMethodLink, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetByUser gets a payment method owned by the caller.
// Parameters:
// paymentMethodName - the ID that uniquely identifies a payment method.
func (client PaymentMethodsClient) GetByUser(ctx context.Context, paymentMethodName string) (result PaymentMethod, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/PaymentMethodsClient.GetByUser")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.GetByUserPreparer(ctx, paymentMethodName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "billing.PaymentMethodsClient", "GetByUser", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetByUserSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "billing.PaymentMethodsClient", "GetByUser", resp, "Failure sending request")
		return
	}

	result, err = client.GetByUserResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "billing.PaymentMethodsClient", "GetByUser", resp, "Failure responding to request")
		return
	}

	return
}

// GetByUserPreparer prepares the GetByUser request.
func (client PaymentMethodsClient) GetByUserPreparer(ctx context.Context, paymentMethodName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"paymentMethodName": autorest.Encode("path", paymentMethodName),
	}

	const APIVersion = "2021-10-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/providers/Microsoft.Billing/paymentMethods/{paymentMethodName}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetByUserSender sends the GetByUser request. The method will close the
// http.Response Body if it receives an error.
func (client PaymentMethodsClient) GetByUserSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetByUserResponder handles the response to the GetByUser request. The method always
// closes the http.Response Body.
func (client PaymentMethodsClient) GetByUserResponder(resp *http.Response) (result PaymentMethod, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// ListByBillingAccount lists the payment methods available for a billing account. Along with the payment methods owned
// by the caller, these payment methods can be attached to a billing profile to make payments. The operation is
// supported only for billing accounts with agreement type Microsoft Customer Agreement.
// Parameters:
// billingAccountName - the ID that uniquely identifies a billing account.
func (client PaymentMethodsClient) ListByBillingAccount(ctx context.Context, billingAccountName string) (result PaymentMethodsListResultPage, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/PaymentMethodsClient.ListByBillingAccount")
		defer func() {
			sc := -1
			if result.pmlr.Response.Response != nil {
				sc = result.pmlr.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	result.fn = client.listByBillingAccountNextResults
	req, err := client.ListByBillingAccountPreparer(ctx, billingAccountName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "billing.PaymentMethodsClient", "ListByBillingAccount", nil, "Failure preparing request")
		return
	}

	resp, err := client.ListByBillingAccountSender(req)
	if err != nil {
		result.pmlr.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "billing.PaymentMethodsClient", "ListByBillingAccount", resp, "Failure sending request")
		return
	}

	result.pmlr, err = client.ListByBillingAccountResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "billing.PaymentMethodsClient", "ListByBillingAccount", resp, "Failure responding to request")
		return
	}
	if result.pmlr.hasNextLink() && result.pmlr.IsEmpty() {
		err = result.NextWithContext(ctx)
		return
	}

	return
}

// ListByBillingAccountPreparer prepares the ListByBillingAccount request.
func (client PaymentMethodsClient) ListByBillingAccountPreparer(ctx context.Context, billingAccountName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"billingAccountName": autorest.Encode("path", billingAccountName),
	}

	const APIVersion = "2021-10-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/paymentMethods", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ListByBillingAccountSender sends the ListByBillingAccount request. The method will close the
// http.Response Body if it receives an error.
func (client PaymentMethodsClient) ListByBillingAccountSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// ListByBillingAccountResponder handles the response to the ListByBillingAccount request. The method always
// closes the http.Response Body.
func (client PaymentMethodsClient) ListByBillingAccountResponder(resp *http.Response) (result PaymentMethodsListResult, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// listByBillingAccountNextResults retrieves the next set of results, if any.
func (client PaymentMethodsClient) listByBillingAccountNextResults(ctx context.Context, lastResults PaymentMethodsListResult) (result PaymentMethodsListResult, err error) {
	req, err := lastResults.paymentMethodsListResultPreparer(ctx)
	if err != nil {
		return result, autorest.NewErrorWithError(err, "billing.PaymentMethodsClient", "listByBillingAccountNextResults", nil, "Failure preparing next results request")
	}
	if req == nil {
		return
	}
	resp, err := client.ListByBillingAccountSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		return result, autorest.NewErrorWithError(err, "billing.PaymentMethodsClient", "listByBillingAccountNextResults", resp, "Failure sending next results request")
	}
	result, err = client.ListByBillingAccountResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "billing.PaymentMethodsClient", "listByBillingAccountNextResults", resp, "Failure responding to next results request")
	}
	return
}

// ListByBillingAccountComplete enumerates all values, automatically crossing page boundaries as required.
func (client PaymentMethodsClient) ListByBillingAccountComplete(ctx context.Context, billingAccountName string) (result PaymentMethodsListResultIterator, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/PaymentMethodsClient.ListByBillingAccount")
		defer func() {
			sc := -1
			if result.Response().Response.Response != nil {
				sc = result.page.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	result.page, err = client.ListByBillingAccount(ctx, billingAccountName)
	return
}

// ListByBillingProfile lists payment methods attached to a billing profile. The operation is supported only for
// billing accounts with agreement type Microsoft Customer Agreement.
// Parameters:
// billingAccountName - the ID that uniquely identifies a billing account.
// billingProfileName - the ID that uniquely identifies a billing profile.
func (client PaymentMethodsClient) ListByBillingProfile(ctx context.Context, billingAccountName string, billingProfileName string) (result PaymentMethodLinksListResultPage, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/PaymentMethodsClient.ListByBillingProfile")
		defer func() {
			sc := -1
			if result.pmllr.Response.Response != nil {
				sc = result.pmllr.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	result.fn = client.listByBillingProfileNextResults
	req, err := client.ListByBillingProfilePreparer(ctx, billingAccountName, billingProfileName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "billing.PaymentMethodsClient", "ListByBillingProfile", nil, "Failure preparing request")
		return
	}

	resp, err := client.ListByBillingProfileSender(req)
	if err != nil {
		result.pmllr.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "billing.PaymentMethodsClient", "ListByBillingProfile", resp, "Failure sending request")
		return
	}

	result.pmllr, err = client.ListByBillingProfileResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "billing.PaymentMethodsClient", "ListByBillingProfile", resp, "Failure responding to request")
		return
	}
	if result.pmllr.hasNextLink() && result.pmllr.IsEmpty() {
		err = result.NextWithContext(ctx)
		return
	}

	return
}

// ListByBillingProfilePreparer prepares the ListByBillingProfile request.
func (client PaymentMethodsClient) ListByBillingProfilePreparer(ctx context.Context, billingAccountName string, billingProfileName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"billingAccountName": autorest.Encode("path", billingAccountName),
		"billingProfileName": autorest.Encode("path", billingProfileName),
	}

	const APIVersion = "2021-10-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/paymentMethodLinks", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ListByBillingProfileSender sends the ListByBillingProfile request. The method will close the
// http.Response Body if it receives an error.
func (client PaymentMethodsClient) ListByBillingProfileSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// ListByBillingProfileResponder handles the response to the ListByBillingProfile request. The method always
// closes the http.Response Body.
func (client PaymentMethodsClient) ListByBillingProfileResponder(resp *http.Response) (result PaymentMethodLinksListResult, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// listByBillingProfileNextResults retrieves the next set of results, if any.
func (client PaymentMethodsClient) listByBillingProfileNextResults(ctx context.Context, lastResults PaymentMethodLinksListResult) (result PaymentMethodLinksListResult, err error) {
	req, err := lastResults.paymentMethodLinksListResultPreparer(ctx)
	if err != nil {
		return result, autorest.NewErrorWithError(err, "billing.PaymentMethodsClient", "listByBillingProfileNextResults", nil, "Failure preparing next results request")
	}
	if req == nil {
		return
	}
	resp, err := client.ListByBillingProfileSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		return result, autorest.NewErrorWithError(err, "billing.PaymentMethodsClient", "listByBillingProfileNextResults", resp, "Failure sending next results request")
	}
	result, err = client.ListByBillingProfileResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "billing.PaymentMethodsClient", "listByBillingProfileNextResults", resp, "Failure responding to next results request")
	}
	return
}

// ListByBillingProfileComplete enumerates all values, automatically crossing page boundaries as required.
func (client PaymentMethodsClient) ListByBillingProfileComplete(ctx context.Context, billingAccountName string, billingProfileName string) (result PaymentMethodLinksListResultIterator, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/PaymentMethodsClient.ListByBillingProfile")
		defer func() {
			sc := -1
			if result.Response().Response.Response != nil {
				sc = result.page.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	result.page, err = client.ListByBillingProfile(ctx, billingAccountName, billingProfileName)
	return
}

// ListByUser lists the payment methods owned by the caller.
func (client PaymentMethodsClient) ListByUser(ctx context.Context) (result PaymentMethodsListResultPage, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/PaymentMethodsClient.ListByUser")
		defer func() {
			sc := -1
			if result.pmlr.Response.Response != nil {
				sc = result.pmlr.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	result.fn = client.listByUserNextResults
	req, err := client.ListByUserPreparer(ctx)
	if err != nil {
		err = autorest.NewErrorWithError(err, "billing.PaymentMethodsClient", "ListByUser", nil, "Failure preparing request")
		return
	}

	resp, err := client.ListByUserSender(req)
	if err != nil {
		result.pmlr.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "billing.PaymentMethodsClient", "ListByUser", resp, "Failure sending request")
		return
	}

	result.pmlr, err = client.ListByUserResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "billing.PaymentMethodsClient", "ListByUser", resp, "Failure responding to request")
		return
	}
	if result.pmlr.hasNextLink() && result.pmlr.IsEmpty() {
		err = result.NextWithContext(ctx)
		return
	}

	return
}

// ListByUserPreparer prepares the ListByUser request.
func (client PaymentMethodsClient) ListByUserPreparer(ctx context.Context) (*http.Request, error) {
	const APIVersion = "2021-10-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/providers/Microsoft.Billing/paymentMethods"),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ListByUserSender sends the ListByUser request. The method will close the
// http.Response Body if it receives an error.
func (client PaymentMethodsClient) ListByUserSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// ListByUserResponder handles the response to the ListByUser request. The method always
// closes the http.Response Body.
func (client PaymentMethodsClient) ListByUserResponder(resp *http.Response) (result PaymentMethodsListResult, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// listByUserNextResults retrieves the next set of results, if any.
func (client PaymentMethodsClient) listByUserNextResults(ctx context.Context, lastResults PaymentMethodsListResult) (result PaymentMethodsListResult, err error) {
	req, err := lastResults.paymentMethodsListResultPreparer(ctx)
	if err != nil {
		return result, autorest.NewErrorWithError(err, "billing.PaymentMethodsClient", "listByUserNextResults", nil, "Failure preparing next results request")
	}
	if req == nil {
		return
	}
	resp, err := client.ListByUserSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		return result, autorest.NewErrorWithError(err, "billing.PaymentMethodsClient", "listByUserNextResults", resp, "Failure sending next results request")
	}
	result, err = client.ListByUserResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "billing.PaymentMethodsClient", "listByUserNextResults", resp, "Failure responding to next results request")
	}
	return
}

// ListByUserComplete enumerates all values, automatically crossing page boundaries as required.
func (client PaymentMethodsClient) ListByUserComplete(ctx context.Context) (result PaymentMethodsListResultIterator, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/PaymentMethodsClient.ListByUser")
		defer func() {
			sc := -1
			if result.Response().Response.Response != nil {
				sc = result.page.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	result.page, err = client.ListByUser(ctx)
	return
}
